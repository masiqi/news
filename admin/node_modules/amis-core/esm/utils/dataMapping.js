/**
 * amis-core v6.13.0
 * Copyright 2018-2025 fex
 */

import { __values, __assign } from 'tslib';
import { isPureVariable } from './isPureVariable.js';
import { resolveVariableAndFilter } from './resolveVariableAndFilter.js';
import { tokenize } from './tokenize.js';
import isPlainObject from 'lodash/isPlainObject';
import { createObject, setVariable, deleteVariable } from './object.js';

function resolveMapping(value, data, defaultFilter, ignoreIfNotMatch) {
    if (defaultFilter === void 0) { defaultFilter = '| raw'; }
    if (ignoreIfNotMatch === void 0) { ignoreIfNotMatch = false; }
    var result = typeof value === 'string' && isPureVariable(value)
        ? resolveVariableAndFilter(value, data, defaultFilter, function () { return ''; })
        : typeof value === 'string' && ~value.indexOf('$')
            ? tokenize(value, data, defaultFilter)
            : value;
    if (ignoreIfNotMatch && (result == null || result === '')) {
        return value;
    }
    return result;
}
/**
 * 遍历对象，对每个字符串 key 进行数据映射
 * @param value 要映射的对象
 * @param data 数据上下文
 */
function resolveMappingObject(value, data) {
    var e_1, _a;
    try {
        for (var _b = __values(Object.keys(value)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var key = _c.value;
            if (typeof value[key] === 'string') {
                value[key] = resolveMapping(value[key], data);
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return value;
}
function dataMapping(to, from, ignoreFunction, convertKeyToPath, ignoreIfNotMatch) {
    if (from === void 0) { from = {}; }
    if (ignoreFunction === void 0) { ignoreFunction = false; }
    if (ignoreIfNotMatch === void 0) { ignoreIfNotMatch = false; }
    if (Array.isArray(to)) {
        return to.map(function (item) {
            return dataMapping(item, from, ignoreFunction, convertKeyToPath, ignoreIfNotMatch);
        });
    }
    else if (typeof to === 'string') {
        return resolveMapping(to, from, undefined, ignoreIfNotMatch);
    }
    else if (!isPlainObject(to)) {
        return to;
    }
    var ret = {};
    var keys = Object.keys(to);
    if (keys.length === 1 && keys[0][0] === '$' && isPlainObject(to[keys[0]])) {
        // from[keys[0].substring(1)] &&
        // Array.isArray(from[keys[0].substring(1)])
        // 支持只取数组中的部分值这个需求
        // 如:
        // data: {
        //   items: {
        //     '$rows': {
        //        id: '$id',
        //        forum_id: '$forum_id'
        //      }
        //   }
        // }
        var left = resolveMapping(keys[0], from, '| raw');
        if (!Array.isArray(left) && ignoreIfNotMatch) {
            ret[keys[0]] = to[keys[0]];
        }
        else {
            var arr = Array.isArray(left) ? left : [];
            var mapping_1 = to[keys[0]];
            ret = arr.map(function (raw) {
                return dataMapping(mapping_1, createObject(from, __assign({ item: raw }, raw)), ignoreFunction, convertKeyToPath, ignoreIfNotMatch);
            });
        }
    }
    else {
        var objectKeys = Object.keys(to);
        // 如果存在  '&' 作为 key，则特殊处理
        // 就是无论这个 key 的位置在什么地方始终都是当放在最前面
        var idx = objectKeys.indexOf('&');
        if (~idx) {
            var value_1 = to['&'];
            objectKeys.splice(idx, 1);
            if (value_1 === '$$') {
                ret = __assign(__assign({}, ret), from);
            }
            else {
                var keys_1;
                var v = isPlainObject(value_1) &&
                    (keys_1 = Object.keys(value_1)) &&
                    keys_1.length === 1 &&
                    from[keys_1[0].substring(1)] &&
                    Array.isArray(from[keys_1[0].substring(1)])
                    ? from[keys_1[0].substring(1)].map(function (raw) {
                        return dataMapping(value_1[keys_1[0]], createObject(from, raw), ignoreFunction, convertKeyToPath, ignoreIfNotMatch);
                    })
                    : resolveMapping(value_1, from, undefined, ignoreIfNotMatch);
                if (Array.isArray(v) || typeof v === 'string') {
                    ret = v;
                }
                else if (typeof v === 'function') {
                    ret = __assign(__assign({}, ret), v(from));
                }
                else {
                    ret = __assign(__assign({}, ret), v);
                }
            }
        }
        objectKeys.forEach(function (key) {
            var value = to[key];
            if (typeof ignoreFunction === 'function' && ignoreFunction(key, value)) {
                // 如果被ignore，不做数据映射处理。
                setVariable(ret, key, value, convertKeyToPath);
            }
            else if (value === '$$') {
                setVariable(ret, key, from, convertKeyToPath);
            }
            else if (typeof value === 'string' &&
                value.length > 0 &&
                value[0] === '$') {
                var v = resolveMapping(value, from, undefined, ignoreIfNotMatch);
                setVariable(ret, key, v, convertKeyToPath);
                if (v === '__undefined') {
                    deleteVariable(ret, key);
                }
            }
            else if (isPlainObject(value) || Array.isArray(value)) {
                setVariable(ret, key, dataMapping(value, from, ignoreFunction, convertKeyToPath, ignoreIfNotMatch), convertKeyToPath);
            }
            else if (typeof value == 'string' && ~value.indexOf('$')) {
                setVariable(ret, key, resolveMapping(value, from, undefined, ignoreIfNotMatch), convertKeyToPath);
            }
            else if (typeof value === 'function' && ignoreFunction !== true) {
                setVariable(ret, key, value(from), convertKeyToPath);
            }
            else {
                setVariable(ret, key, value, convertKeyToPath);
                if (value === '__undefined') {
                    deleteVariable(ret, key);
                }
            }
        });
    }
    return ret;
}

export { dataMapping, resolveMapping, resolveMappingObject };
