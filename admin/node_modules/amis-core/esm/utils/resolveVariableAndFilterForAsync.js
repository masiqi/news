/**
 * amis-core v6.13.0
 * Copyright 2018-2025 fex
 */

import { __awaiter, __generator } from 'tslib';
import { AsyncEvaluator } from 'amis-formula';
import { memoryParse } from './memoryParse.js';

var formulaEvalErrorHandler;
/**
 * 设置自定义函数，functions中找不到处理的函数时执行
 * @param fn
 */
function setFormulaEvalErrorHandler(fn) {
    formulaEvalErrorHandler = fn;
}
var resolveVariableAndFilterForAsync = function (path, data, defaultFilter, fallbackValue, skipFormulaEvalErrorHandler) {
    if (data === void 0) { data = {}; }
    if (defaultFilter === void 0) { defaultFilter = '| html'; }
    if (fallbackValue === void 0) { fallbackValue = function (value) { return value; }; }
    if (skipFormulaEvalErrorHandler === void 0) { skipFormulaEvalErrorHandler = false; }
    return __awaiter(void 0, void 0, void 0, function () {
        var ast, ret, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!path || typeof path !== 'string') {
                        return [2 /*return*/, undefined];
                    }
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    ast = memoryParse(path, {
                        evalMode: false,
                        allowFilter: true
                    });
                    return [4 /*yield*/, new AsyncEvaluator(data, {
                            defaultFilter: defaultFilter
                        }).evalute(ast)];
                case 2:
                    ret = _a.sent();
                    return [2 /*return*/, ret == null && !~path.indexOf('default') && !~path.indexOf('now')
                            ? fallbackValue(ret)
                            : ret];
                case 3:
                    e_1 = _a.sent();
                    if (e_1.name === 'FormulaEvalError') {
                        if (!skipFormulaEvalErrorHandler) {
                            // 无法解析时，执行handler自定义解析逻辑
                            return [2 /*return*/, formulaEvalErrorHandler === null || formulaEvalErrorHandler === void 0 ? void 0 : formulaEvalErrorHandler(path, data, defaultFilter, fallbackValue)];
                        }
                        // 跳过自定义解析逻辑，则直接抛异常
                        throw e_1;
                    }
                    console.warn(e_1);
                    return [2 /*return*/, undefined];
                case 4: return [2 /*return*/];
            }
        });
    });
};

export { resolveVariableAndFilterForAsync, setFormulaEvalErrorHandler };
