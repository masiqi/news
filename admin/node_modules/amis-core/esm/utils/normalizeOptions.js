/**
 * amis-core v6.13.0
 * Copyright 2018-2025 fex
 */

import { __assign } from 'tslib';
import isPlainObject from 'lodash/isPlainObject';

function normalizeOptions(options, share, valueField) {
    if (share === void 0) { share = {
        values: [],
        options: []
    }; }
    if (valueField === void 0) { valueField = 'value'; }
    if (typeof options === 'string') {
        return options.split(',').map(function (item) {
            var _a;
            var idx = share.values.indexOf(item);
            if (~idx) {
                return share.options[idx];
            }
            var option = (_a = {
                    label: item
                },
                // 添加 option 的 value 根据 valueField 来
                // 否则某些情况下多余字段会有影响
                _a[valueField] = item,
                _a);
            share.values.push(option.value);
            share.options.push(option);
            return option;
        });
    }
    else if (Array.isArray(options) &&
        (typeof options[0] === 'string' ||
            typeof options[0] === 'number')) {
        return options.map(function (item) {
            var _a;
            var idx = share.values.indexOf(item);
            if (~idx) {
                return share.options[idx];
            }
            var option = (_a = {
                    label: item
                },
                _a[valueField] = item,
                _a);
            share.values.push(option[valueField]);
            share.options.push(option);
            return option;
        });
    }
    else if (Array.isArray(options)) {
        return options
            .filter(function (item) { return item !== null && item !== undefined; })
            .map(function (item) {
            var _a;
            var value = item && item[valueField];
            var idx = value !== undefined && !item.children
                ? share.values.indexOf(value)
                : -1;
            if (~idx) {
                return share.options[idx];
            }
            var option = __assign(__assign({}, item), (_a = {}, _a[valueField] = value, _a));
            if (typeof option.children !== 'undefined') {
                // 用新的 share 避免 children 内部复用全局缓存
                option.children = normalizeOptions(option.children, {
                    values: [],
                    options: []
                }, valueField);
            }
            else if (value !== undefined) {
                share.values.push(value);
                share.options.push(option);
            }
            return option;
        });
    }
    else if (isPlainObject(options)) {
        return Object.keys(options).map(function (key) {
            var _a;
            var idx = share.values.indexOf(key);
            if (~idx) {
                return share.options[idx];
            }
            var option = (_a = {
                    label: options[key]
                },
                _a[valueField] = key,
                _a);
            share.values.push(option.value);
            share.options.push(option);
            return option;
        });
    }
    return [];
}

export { normalizeOptions };
