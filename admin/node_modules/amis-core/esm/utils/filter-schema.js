/**
 * amis-core v6.13.0
 * Copyright 2018-2025 fex
 */

import { evalExpression, evalExpressionWithConditionBuilder, filter } from './tpl.js';
import { mapObject, injectPropsToObject } from './helper.js';
import isPlainObject from 'lodash/isPlainObject';
import { tokenize } from './tokenize.js';

/**
 * 计算下发给子组件的className，处理对象类型的className，将其中的表达式计算出来，避免被classnames识别为true
 *
 * @param value - CSS类名值
 * @param ctx - 数据域
 */
function filterClassNameObject(classValue, ctx) {
    if (ctx === void 0) { ctx = {}; }
    var result = classValue;
    if (classValue && typeof classValue === 'string') {
        result = tokenize(classValue, ctx);
    }
    else if (classValue && isPlainObject(classValue)) {
        result = mapObject(classValue, function (value) {
            return typeof value === 'string' ? evalExpression(value, ctx) : value;
        }, undefined, function (key) { return tokenize(key, ctx); });
    }
    return result;
}
/**
 * 处理 Props 数据，所有带 On 结束的做一次
 *
 * xxxOn
 * xxxExpr
 *
 *
 * @param schema
 * @param data
 */
function getExprProperties(schema, data, ignoreList, props) {
    if (data === void 0) { data = {}; }
    if (ignoreList === void 0) { ignoreList = ['addOn', 'ref']; }
    var exprProps = {};
    var ctx = null;
    Object.getOwnPropertyNames(schema).forEach(function (key) {
        if (ignoreList && ~ignoreList.indexOf(key)) {
            return;
        }
        var parts = /^(.*)(On|Expr|(?:c|C)lassName)(Raw)?$/.exec(key);
        var type = parts === null || parts === void 0 ? void 0 : parts[2];
        var value = schema[key];
        if (value &&
            (typeof value === 'string' ||
                Object.prototype.toString.call(value) === '[object Object]') &&
            (parts === null || parts === void 0 ? void 0 : parts[1]) &&
            (type === 'On' || type === 'Expr')) {
            key = parts[1];
            if (type === 'On' || type === 'Expr') {
                if (!ctx &&
                    props &&
                    typeof value === 'string' &&
                    ~value.indexOf('__props')) {
                    ctx = injectPropsToObject(data, {
                        __props: props
                    });
                }
                if (type === 'On') {
                    value =
                        (props === null || props === void 0 ? void 0 : props[key]) ||
                            evalExpressionWithConditionBuilder(value, ctx || data);
                }
                else {
                    value = filter(value, ctx || data);
                }
            }
            exprProps[key] = value;
        }
        else if ((type === 'className' || type === 'ClassName') &&
            !(props === null || props === void 0 ? void 0 : props[key]) && // 如果 props 里面有则是 props 优先
            value &&
            (typeof value === 'string' || isPlainObject(value))) {
            exprProps["".concat(key, "Raw")] = value;
            exprProps[key] = filterClassNameObject(value, data);
        }
    });
    return exprProps;
}
function hasExprPropertiesChanged(schema, prevSchema) {
    return Object.getOwnPropertyNames(schema).some(function (key) {
        var parts = /^(.*)(On|Expr|(?:c|C)lassName)(Raw)?$/.exec(key);
        if (parts) {
            return schema[key] !== prevSchema[key];
        }
        return false;
    });
}

export { getExprProperties as default, filterClassNameObject, getExprProperties, hasExprPropertiesChanged };
