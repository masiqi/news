/**
 * amis-core v6.13.0
 * Copyright 2018-2025 fex
 */

import { __assign } from 'tslib';
import { saveAs } from 'file-saver';

/**
 * 处理接口返回附件的情况，好几个地方用
 * @param response
 * @param __
 * @returns
 */
function attachmentAdpator(response, __, api) {
    var _a;
    if (response && response.headers && response.headers['content-disposition']) {
        var disposition = response.headers['content-disposition'];
        var filename = '';
        if (disposition && disposition.indexOf('attachment') !== -1) {
            // 如果 api 中配置了，则优先用 api 中的配置
            if (api === null || api === void 0 ? void 0 : api.downloadFileName) {
                filename = api.downloadFileName;
            }
            else {
                // disposition 有可能是 attachment; filename="??.xlsx"; filename*=UTF-8''%E4%B8%AD%E6%96%87.xlsx
                // 这种情况下最后一个才是正确的文件名
                var filenameRegex = /filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/i;
                var matches = disposition.match(filenameRegex);
                if (matches && matches.length) {
                    filename = matches[1].replace("UTF-8''", '').replace(/['"]/g, '');
                }
                else {
                    filename = disposition === null || disposition === void 0 ? void 0 : disposition.split(';')[1];
                }
                // 很可能是中文被 url-encode 了
                if (filename && filename.replace(/[^%]/g, '').length > 2) {
                    filename = decodeURIComponent(filename);
                    // 有些后端用错了，导致空格转义成了 +，这里转回来
                    filename = filename.replace(/\+/g, ' ');
                }
            }
            var type = (_a = response.headers) === null || _a === void 0 ? void 0 : _a['content-type'];
            var blob = response.data.toString() === '[object Blob]'
                ? response.data
                : new Blob([response.data], { type: type });
            saveAs(blob, filename);
            return __assign(__assign({}, response), { data: {
                    status: 0,
                    msg: __('Embed.downloading')
                } });
        }
    }
    else if (response.data && response.data.toString() === '[object Blob]') {
        return new Promise(function (resolve, reject) {
            var reader = new FileReader();
            reader.addEventListener('loadend', function (e) {
                var text = reader.result;
                try {
                    resolve(__assign(__assign({}, response), { data: __assign({}, JSON.parse(text)) }));
                }
                catch (e) {
                    reject(e);
                }
            });
            reader.readAsText(response.data);
        });
    }
    return response;
}

export { attachmentAdpator, attachmentAdpator as default };
