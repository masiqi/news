/**
 * amis-core v6.13.0
 * Copyright 2018-2025 fex
 */

import { __extends, __assign, __spreadArray, __read, __awaiter, __generator } from 'tslib';
import { isObservableArray, isObservable } from 'mobx';
import uniq from 'lodash/uniq';
import last from 'lodash/last';
import merge from 'lodash/merge';
import isPlainObject from 'lodash/isPlainObject';
import isNaN from 'lodash/isNaN';
import isNumber from 'lodash/isNumber';
import isString from 'lodash/isString';
import qs from 'qs';
import { compile } from 'path-to-regexp';
import { matchSorter } from 'match-sorter';
import { filter, evalExpressionWithConditionBuilder, evalExpression } from './tpl.js';
import { autobindMethod } from './autobind.js';
import 'amis-formula';
import 'moment';
import { isObject } from './object.js';
export { cloneObject, createObject, deleteVariable, extendObject, isObject, setVariable } from './object.js';
import { resolveVariableAndFilter } from './resolveVariableAndFilter.js';
import { isPureVariable } from './isPureVariable.js';
import '@rc-component/mini-decimal';
import { tokenize } from './tokenize.js';
import { resolveVariable } from './resolveVariable.js';
import './memoryParse.js';
import './filter.js';
export { string2regExp } from './string2regExp.js';
import { getVariable } from './getVariable.js';
export { getVariable } from './getVariable.js';
import { keyToPath } from './keyToPath.js';
export { keyToPath } from './keyToPath.js';
import { isExpression, replaceExpression } from './formula.js';
import { isAlive } from 'mobx-state-tree';

function preventDefault(event) {
    if (typeof event.cancelable !== 'boolean' || event.cancelable) {
        event.preventDefault();
    }
}
// isMobile根据media宽度判断是否是移动端
function isMobile() {
    var _a, _b;
    return (_b = (_a = window).matchMedia) === null || _b === void 0 ? void 0 : _b.call(_a, '(max-width: 768px)').matches;
}
// isMobileDevice根据userAgent判断是否为移动端设备
function isMobileDevice() {
    var userAgent = navigator.userAgent;
    var isMobileUA = /Android|webOS|iPhone|iPad|iPod|BlackBerry|Windows Phone|Opera Mini|IEMobile|Mobile/i.test(userAgent);
    return isMobileUA;
}
function range(num, min, max) {
    return Math.min(Math.max(num, min), max);
}
/**
 * 给目标对象添加其他属性，可读取但是不会被遍历。
 * @param target
 * @param props
 */
function injectPropsToObject(target, props) {
    var sup = Object.create(target.__super || null);
    Object.keys(props).forEach(function (key) { return (sup[key] = props[key]); });
    var result = Object.create(sup);
    Object.keys(target).forEach(function (key) { return (result[key] = target[key]); });
    return result;
}
function isSuperDataModified(data, prevData, store) {
    var keys;
    if (store && store.storeType === 'FormStore') {
        keys = uniq(store.items
            .map(function (item) { return "".concat(item.name).replace(/\..*$/, ''); })
            .concat(Object.keys(store.data)));
    }
    else {
        keys = Object.keys(store.data);
    }
    if (Array.isArray(keys) && keys.length) {
        return keys.some(function (key) { return data[key] !== prevData[key]; });
    }
    return false;
}
function syncDataFromSuper(data, superObject, prevSuperObject, store, force) {
    var obj = __assign({}, data);
    var keys = [];
    // 如果是 form store，则从父级同步 formItem 种东西。
    if (store &&
        store.storeType === 'FormStore' &&
        store.canAccessSuperData !== false) {
        keys = uniq(store.items
            .map(function (item) { return "".concat(item.name).replace(/\..*$/, ''); })
            .concat(Object.keys(obj)));
    }
    else if (force) {
        keys = Object.keys(obj);
    }
    if (superObject || prevSuperObject) {
        keys.forEach(function (key) {
            if (!key) {
                return;
            }
            if (((superObject && typeof superObject[key] !== 'undefined') ||
                (prevSuperObject && typeof prevSuperObject[key] !== 'undefined')) &&
                ((prevSuperObject && !superObject) ||
                    (!prevSuperObject && superObject) ||
                    prevSuperObject[key] !== superObject[key])) {
                obj[key] = superObject[key];
            }
        });
    }
    return obj;
}
/**
 * 生成 8 位随机数字。
 *
 * @return {string} 8位随机数字
 */
function guid() {
    function s4() {
        return Math.floor((1 + Math.random()) * 0x10000)
            .toString(16)
            .substring(1);
    }
    return s4() + s4() + s4();
}
function findIndex(arr, detect) {
    for (var i = 0, len = arr.length; i < len; i++) {
        if (detect(arr[i], i)) {
            return i;
        }
    }
    return -1;
}
function hasOwnPropertyInPath(data, key) {
    var parts = keyToPath(key);
    while (parts.length) {
        var key_1 = parts.shift();
        if (!isObject(data) || !data.hasOwnProperty(key_1)) {
            return false;
        }
        data = data[key_1];
    }
    return true;
}
function noop() { }
function anyChanged(attrs, from, to, strictMode) {
    if (strictMode === void 0) { strictMode = true; }
    return (typeof attrs === 'string'
        ? attrs.split(',').map(function (item) { return item.trim(); })
        : attrs).some(function (key) {
        return strictMode ? !Object.is(from[key], to[key]) : from[key] != to[key];
    });
}
function changedEffect(attrs, origin, data, effect, strictMode) {
    if (strictMode === void 0) { strictMode = true; }
    var changes = {};
    var keys = typeof attrs === 'string'
        ? attrs.split(',').map(function (item) { return item.trim(); })
        : attrs;
    keys.forEach(function (key) {
        if (strictMode ? !Object.is(origin[key], data[key]) : origin[key] != data[key]) {
            changes[key] = data[key];
        }
    });
    Object.keys(changes).length && effect(changes);
}
function rmUndefined(obj) {
    var newObj = {};
    if (typeof obj !== 'object') {
        return obj;
    }
    var keys = Object.keys(obj);
    keys.forEach(function (key) {
        if (obj[key] !== undefined) {
            newObj[key] = obj[key];
        }
    });
    return newObj;
}
function isObjectShallowModified(prev, next, strictModeOrFunc, ignoreUndefined, stack, maxDepth) {
    if (strictModeOrFunc === void 0) { strictModeOrFunc = true; }
    if (ignoreUndefined === void 0) { ignoreUndefined = false; }
    if (stack === void 0) { stack = []; }
    if (maxDepth === void 0) { maxDepth = -1; }
    if (Array.isArray(prev) && Array.isArray(next)) {
        return prev.length !== next.length
            ? true
            : prev.some(function (prev, index) {
                return isObjectShallowModified(prev, next[index], strictModeOrFunc, ignoreUndefined, stack);
            });
    }
    if (isNaN(prev) && isNaN(next)) {
        return false;
    }
    if (null == prev ||
        null == next ||
        !isObject(prev) ||
        !isObject(next) ||
        // 不是 Object.create 创建的对象
        // 不是 plain object
        prev.constructor !== Object ||
        next.constructor !== Object) {
        if (strictModeOrFunc && typeof strictModeOrFunc === 'function') {
            return strictModeOrFunc(prev, next);
        }
        return strictModeOrFunc ? prev !== next : prev != next;
    }
    if (ignoreUndefined) {
        prev = rmUndefined(prev);
        next = rmUndefined(next);
    }
    var keys = Object.keys(prev);
    var nextKeys = Object.keys(next);
    if (keys.length !== nextKeys.length ||
        keys.sort().join(',') !== nextKeys.sort().join(',')) {
        return true;
    }
    // 避免循环引用死循环。
    if (~stack.indexOf(prev)) {
        return false;
    }
    stack.push(prev);
    if (maxDepth > 0 && stack.length > maxDepth) {
        return true;
    }
    for (var i = keys.length - 1; i >= 0; i--) {
        var key = keys[i];
        if (isObjectShallowModified(prev[key], next[key], strictModeOrFunc, ignoreUndefined, stack)) {
            return true;
        }
    }
    return false;
}
function isArrayChildrenModified(prev, next, strictMode) {
    if (strictMode === void 0) { strictMode = true; }
    if (!Array.isArray(prev) || !Array.isArray(next)) {
        return strictMode ? prev !== next : prev != next;
    }
    if (prev.length !== next.length) {
        return true;
    }
    for (var i = prev.length - 1; i >= 0; i--) {
        if ((strictMode ? prev[i] !== next[i] : prev[i] != next[i]) ||
            isArrayChildrenModified(prev[i].children, next[i].children, strictMode)) {
            return true;
        }
    }
    return false;
}
function immutableExtends(to, from, deep) {
    // 不是对象，不可以merge
    if (!isObject(to) || !isObject(from)) {
        return to;
    }
    var ret = to;
    Object.keys(from).forEach(function (key) {
        var origin = to[key];
        var value = from[key];
        // todo 支持深度merge
        if (origin !== value) {
            // 一旦有修改，就创建个新对象。
            ret = ret !== to ? ret : __assign({}, to);
            ret[key] = value;
        }
    });
    return ret;
}
// 即将抛弃
function makeColumnClassBuild(steps, classNameTpl) {
    if (classNameTpl === void 0) { classNameTpl = 'col-sm-$value'; }
    var count = 12;
    var step = Math.floor(count / steps);
    return function (schema) {
        if (schema.columnClassName &&
            /\bcol-(?:xs|sm|md|lg)-(\d+)\b/.test(schema.columnClassName)) {
            var flex = parseInt(RegExp.$1, 10);
            count -= flex;
            steps--;
            step = Math.floor(count / steps);
            return schema.columnClassName;
        }
        if (schema.columnClassName) {
            count -= step;
            steps--;
            return schema.columnClassName;
        }
        count -= step;
        steps--;
        return classNameTpl.replace('$value', '' + step);
    };
}
function hasVisibleExpression(schema) {
    return !!(schema.visibleOn || schema.hiddenOn);
}
function isVisible(schema, data, statusStore) {
    var _a;
    // 有状态时，状态优先
    if ((schema.id || schema.name) && statusStore) {
        var id = filter(schema.id, data);
        var name_1 = filter(schema.name, data);
        var visible = isAlive(statusStore)
            ? (_a = statusStore.visibleState[id]) !== null && _a !== void 0 ? _a : statusStore.visibleState[name_1]
            : undefined;
        if (typeof visible !== 'undefined') {
            return visible;
        }
    }
    return !(schema.hidden ||
        schema.visible === false ||
        (schema.hiddenOn &&
            evalExpressionWithConditionBuilder(schema.hiddenOn, data)) ||
        (schema.visibleOn &&
            !evalExpressionWithConditionBuilder(schema.visibleOn, data)));
}
function isUnfolded(node, config) {
    var foldedField = config.foldedField, unfoldedField = config.unfoldedField;
    unfoldedField || (unfoldedField = 'unfolded');
    foldedField || (foldedField = 'folded');
    if (unfoldedField && typeof node[unfoldedField] !== 'undefined') {
        return !!node[unfoldedField];
    }
    if (foldedField && typeof node[foldedField] !== 'undefined') {
        return !node[foldedField];
    }
    return false;
}
/**
 * 过滤掉被隐藏的数组元素
 */
function visibilityFilter(items, data) {
    return items.filter(function (item) {
        return isVisible(item, data);
    });
}
function isDisabled(schema, data) {
    return (schema.disabled ||
        (schema.disabledOn &&
            evalExpressionWithConditionBuilder(schema.disabledOn, data)));
}
function hasAbility(schema, ability, data, defaultValue) {
    if (defaultValue === void 0) { defaultValue = true; }
    return schema.hasOwnProperty(ability)
        ? schema[ability]
        : schema.hasOwnProperty("".concat(ability, "On"))
            ? evalExpressionWithConditionBuilder(schema["".concat(ability, "On")], data || schema)
            : defaultValue;
}
function makeHorizontalDeeper(horizontal, count) {
    if (count > 1 && /\bcol-(xs|sm|md|lg)-(\d+)\b/.test(horizontal.left)) {
        var flex = parseInt(RegExp.$2, 10) * count;
        return {
            leftFixed: horizontal.leftFixed,
            left: flex,
            right: 12 - flex,
            offset: flex
        };
    }
    else if (count > 1 && typeof horizontal.left === 'number') {
        var flex = horizontal.left * count;
        return {
            leftFixed: horizontal.leftFixed,
            left: flex,
            right: 12 - flex,
            offset: flex
        };
    }
    return horizontal;
}
function promisify(fn) {
    // 避免重复处理
    if (fn._promisified) {
        return fn;
    }
    var promisified = function () {
        try {
            var ret_1 = fn.apply(null, arguments);
            if (ret_1 && ret_1.then) {
                return ret_1;
            }
            if (typeof ret_1 === 'function') {
                // thunk support
                return new Promise(function (resolve, reject) {
                    return ret_1(function (error, value) {
                        return error ? reject(error) : resolve(value);
                    });
                });
            }
            return Promise.resolve(ret_1);
        }
        catch (e) {
            return Promise.reject(e);
        }
    };
    promisified.raw = fn;
    promisified._promisified = true;
    return promisified;
}
/**
 *
 * @param node 当前元素
 * @param compute 自定义计算，找到的父元素是否满足特殊场景
 * @returns 返回控制当前元素滚动的父元素
 */
function getScrollParent(node, compute) {
    if (compute === void 0) { compute = function () { return true; }; }
    if (node == null) {
        return null;
    }
    var style = getComputedStyle(node);
    if (!style) {
        return null;
    }
    var text = style.getPropertyValue('overflow') +
        style.getPropertyValue('overflow-x') +
        style.getPropertyValue('overflow-y');
    if (node.nodeName === 'BODY' || (/auto|scroll/.test(text) && compute(node))) {
        return node;
    }
    return getScrollParent(node.parentNode, compute);
}
/**
 * Deep diff between two object, using lodash
 * @param  {Object} object Object compared
 * @param  {Object} base   Object to compare with
 * @return {Object}        Return a new object who represent the diff
 */
function difference(object, base, keepProps) {
    function changes(object, base) {
        if (isObject(object) && isObject(base)) {
            var keys = uniq(Object.keys(object).concat(Object.keys(base)));
            var result_1 = {};
            keys.forEach(function (key) {
                var a = object[key];
                var b = base[key];
                if (keepProps && ~keepProps.indexOf(key)) {
                    result_1[key] = a;
                }
                // isEquals 里面没有处理好递归引用对象的情况
                if (object.hasOwnProperty(key) && // 其中一个不是自己的属性，就不要比对了
                    base.hasOwnProperty(key) &&
                    !isObjectShallowModified(a, b, true, undefined, undefined, 10)) {
                    return;
                }
                if (!object.hasOwnProperty(key)) {
                    result_1[key] = undefined;
                }
                else if (Array.isArray(a) && Array.isArray(b)) {
                    result_1[key] = a;
                }
                else {
                    result_1[key] = changes(a, b);
                }
            });
            return result_1;
        }
        return object;
    }
    return changes(object, base);
}
var padArr = function (arr, size, fillUndefined) {
    if (size === void 0) { size = 4; }
    if (fillUndefined === void 0) { fillUndefined = false; }
    var ret = [[]];
    var pool = arr.concat();
    var from = 0;
    while (pool.length || (fillUndefined && ret[ret.length - 1].length < size)) {
        var host = ret[from] || (ret[from] = []);
        if (host.length >= size) {
            from += 1;
            continue;
        }
        host.push(pool.shift());
    }
    return ret;
};
function __uri(id) {
    return id;
}
// xs < 768px
// sm >= 768px
// md >= 992px
// lg >= 1200px
function isBreakpoint(str) {
    if (typeof str !== 'string') {
        return !!str;
    }
    var breaks = str.split(/\s*,\s*|\s+/);
    if (window.matchMedia) {
        return breaks.some(function (item) {
            return item === '*' ||
                (item === 'xs' &&
                    matchMedia("screen and (max-width: 767px)").matches) ||
                (item === 'sm' &&
                    matchMedia("screen and (min-width: 768px) and (max-width: 991px)")
                        .matches) ||
                (item === 'md' &&
                    matchMedia("screen and (min-width: 992px) and (max-width: 1199px)")
                        .matches) ||
                (item === 'lg' && matchMedia("screen and (min-width: 1200px)").matches);
        });
    }
    else {
        var width_1 = window.innerWidth;
        return breaks.some(function (item) {
            return item === '*' ||
                (item === 'xs' && width_1 < 768) ||
                (item === 'sm' && width_1 >= 768 && width_1 < 992) ||
                (item === 'md' && width_1 >= 992 && width_1 < 1200) ||
                (item === 'lg' && width_1 >= 1200);
        });
    }
}
function until(fn, when, getCanceler, interval) {
    var _this = this;
    if (interval === void 0) { interval = 5000; }
    var timer;
    var stoped = false;
    return new Promise(function (resolve, reject) {
        var cancel = function () {
            clearTimeout(timer);
            stoped = true;
        };
        var check = function () { return __awaiter(_this, void 0, void 0, function () {
            var ret, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, fn()];
                    case 1:
                        ret = _a.sent();
                        if (stoped) {
                            return [2 /*return*/];
                        }
                        else if (when(ret)) {
                            stoped = true;
                            resolve(ret);
                        }
                        else {
                            timer = setTimeout(check, interval);
                        }
                        return [3 /*break*/, 3];
                    case 2:
                        e_1 = _a.sent();
                        reject(e_1);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        }); };
        check();
        getCanceler && getCanceler(cancel);
    });
}
function omitControls(controls, omitItems) {
    return controls.filter(function (control) { return !~omitItems.indexOf(control.name || control._name); });
}
function isEmpty(thing) {
    return !(isObject(thing) && Object.keys(thing).length);
}
/**
 * 基于时间戳的 uuid
 *
 * @returns uniqueId
 */
var uuid = function () {
    return (+new Date()).toString(36);
};
// 参考 https://github.com/streamich/v4-uuid
var createStr = function () {
    return ('00000000000000000' + (Math.random() * 0xffffffffffffffff).toString(16)).slice(-16);
};
var uuidv4 = function () {
    var a = createStr();
    var b = createStr();
    return (a.slice(0, 8) +
        '-' +
        a.slice(8, 12) +
        '-4' +
        a.slice(13) +
        '-a' +
        b.slice(1, 4) +
        '-' +
        b.slice(4));
};
/**
 * 类似于 arr.map 方法，此方法主要针对类似下面示例的树形结构。
 * [
 *     {
 *         children: []
 *     },
 *     // 其他成员
 * ]
 *
 * @param {Tree} tree 树形数据
 * @param {Function} iterator 处理函数，返回的数据会被替换成新的。
 * @return {Tree} 返回处理过的 tree
 */
function mapTree(tree, iterator, level, depthFirst, paths, indexes) {
    if (level === void 0) { level = 1; }
    if (depthFirst === void 0) { depthFirst = false; }
    if (paths === void 0) { paths = []; }
    if (indexes === void 0) { indexes = []; }
    return tree.map(function (item, index) {
        if (depthFirst) {
            var children = item.children
                ? mapTree(item.children, iterator, level + 1, depthFirst, paths.concat(item), indexes.concat(index))
                : undefined;
            children && (item = __assign(__assign({}, item), { children: children }));
            item = iterator(item, index, level, paths, indexes.concat(index)) || __assign({}, item);
            return item;
        }
        item = iterator(item, index, level, paths, indexes.concat(index)) || __assign({}, item);
        if (item.children && item.children.splice) {
            item.children = mapTree(item.children, iterator, level + 1, depthFirst, paths.concat(item), indexes.concat(index));
        }
        return item;
    });
}
/**
 * 遍历树
 * @param tree
 * @param iterator
 */
function eachTree(tree, iterator, level, paths) {
    var _a;
    if (level === void 0) { level = 1; }
    if (paths === void 0) { paths = []; }
    var length = tree.length;
    for (var i = 0; i < length; i++) {
        var item = tree[i];
        var res = iterator(item, i, level, paths);
        if (res === 'break') {
            break;
        }
        if (res === 'continue') {
            continue;
        }
        if ((_a = item.children) === null || _a === void 0 ? void 0 : _a.splice) {
            eachTree(item.children, iterator, level + 1, paths.concat(item));
        }
    }
}
/**
 * 在树中查找节点。
 * @param tree
 * @param iterator
 * @param withCache {Object} 启用缓存（new Map()），多次重复从一颗树中查找时可大幅度提升性能
 * @param withCache.value {string} 必须，需要从缓存Map中匹配的值，使用Map.get(value) 匹配
 * @param withCache.resolve {function} 构建Map 时，存入key 的处理函数
 * @param withCache.foundEffect 匹配到时，额外做的一些副作用
 */
var findTreeCache = {
    tree: null,
    map: null
};
function findTree(tree, iterator, withCache) {
    var isValidateKey = function (value) {
        return value !== '' && (isString(value) || isNumber(value));
    };
    // 缓存优化
    if (withCache && isValidateKey(withCache.value)) {
        var resolve_1 = withCache.resolve, value = withCache.value, foundEffect = withCache.foundEffect;
        // 构建缓存
        if (tree !== findTreeCache.tree || !findTreeCache.map) {
            var map_1 = new Map();
            eachTree(tree, function (item, key, level, paths) {
                var mapKey = resolve_1 ? resolve_1(item) : item;
                isValidateKey(mapKey) &&
                    map_1.set(String(mapKey), [item, key, level, paths]);
            });
            findTreeCache.map = map_1;
            findTreeCache.tree = tree;
        }
        // 从缓存查找结果
        var res = findTreeCache.map.get(String(value));
        if (res != null) {
            // 副作用
            foundEffect && foundEffect.apply(null, res.slice());
            return res[0];
        }
    }
    var result = null;
    everyTree(tree, function (item, key, level, paths) {
        if (iterator(item, key, level, paths)) {
            result = item;
            return false;
        }
        return true;
    });
    return result;
}
/**
 * 在树中查找节点。
 * @param tree
 * @param iterator
 */
function findTreeAll(tree, iterator) {
    var result = [];
    everyTree(tree, function (item, key, level, paths) {
        if (iterator(item, key, level, paths)) {
            result.push(item);
        }
        return true;
    });
    return result;
}
/**
 * 在树中查找节点, 返回下标数组。
 * @param tree
 * @param iterator
 * @param withCache {Object} 启用缓存（new Map()），多次重复从一颗树中查找时可大幅度提升性能
 * @param withCache.value {any} 必须，需要从缓存Map中匹配的值，使用Map.get(value) 匹配
 * @param withCache.resolve {function} 构建Map 时，存入key 的处理函数
 */
function findTreeIndex(tree, iterator, withCache) {
    var idx = [];
    var foundEffect = function (item, index, level, paths) {
        idx = [index];
        paths = paths.concat();
        paths.unshift({
            children: tree
        });
        for (var i = paths.length - 1; i > 0; i--) {
            var prev = paths[i - 1];
            var current = paths[i];
            idx.unshift(prev.children.indexOf(current));
        }
    };
    findTree(tree, function (item, index, level, paths) {
        if (iterator(item, index, level, paths)) {
            foundEffect(item, index, level, paths);
            return true;
        }
        return false;
    }, !withCache
        ? undefined
        : __assign(__assign({}, withCache), { foundEffect: foundEffect }));
    return idx.length ? idx : undefined;
}
function getTree(tree, idx) {
    var indexes = Array.isArray(idx) ? idx.concat() : [idx];
    var lastIndex = indexes.pop();
    var list = tree;
    for (var i = 0, len = indexes.length; i < len; i++) {
        var index = indexes[i];
        if (!list[index]) {
            list = null;
            break;
        }
        list = list[index].children;
    }
    return list ? list[lastIndex] : undefined;
}
/**
 * 过滤树节点
 *
 * @param tree
 * @param iterator
 */
function filterTree(tree, iterator, level, depthFirst, paths) {
    if (level === void 0) { level = 1; }
    if (depthFirst === void 0) { depthFirst = false; }
    if (paths === void 0) { paths = []; }
    if (depthFirst) {
        return tree
            .map(function (item) {
            var children = item.children
                ? filterTree(item.children, iterator, level + 1, depthFirst, paths.concat(item))
                : undefined;
            if (Array.isArray(children) && Array.isArray(item.children)) {
                item = __assign(__assign({}, item), { children: children });
            }
            return item;
        })
            .filter(function (item, index) { return iterator(item, index, level, paths); });
    }
    return tree
        .filter(function (item, index) { return iterator(item, index, level, paths); })
        .map(function (item) {
        var _a;
        if ((_a = item.children) === null || _a === void 0 ? void 0 : _a.splice) {
            var children = filterTree(item.children, iterator, level + 1, depthFirst, paths.concat(item));
            if (Array.isArray(children) && Array.isArray(item.children)) {
                item = __assign(__assign({}, item), { children: children });
            }
        }
        return item;
    });
}
/**
 * 判断树中每个节点是否满足某个条件。
 * @param tree
 * @param iterator
 */
function everyTree(tree, iterator, level, paths, indexes) {
    var _a;
    var stack = [];
    stack.push({ item: null, index: -1, level: 1, paths: [], indexes: [] });
    while (stack.length > 0) {
        var _b = stack.pop(), item = _b.item, index = _b.index, level_1 = _b.level, paths_1 = _b.paths, indexes_1 = _b.indexes;
        if (index >= 0) {
            var value = iterator(item, index, level_1, paths_1, indexes_1);
            if (value && ((_a = item.children) === null || _a === void 0 ? void 0 : _a.splice)) {
                var children = item.children;
                for (var i = children.length - 1; i >= 0; i--) {
                    stack.push({
                        item: children[i],
                        index: i,
                        level: level_1 + 1,
                        paths: paths_1.concat(item),
                        indexes: indexes_1.concat(index)
                    });
                }
            }
            else if (!value) {
                return false;
            }
        }
        else {
            if (!Array.isArray(tree) && !isObservableArray(tree)) {
                return false;
            }
            for (var i = tree.length - 1; i >= 0; i--) {
                stack.push({
                    item: tree[i],
                    index: i,
                    level: 1,
                    paths: [],
                    indexes: []
                });
            }
        }
    }
    return true;
}
/**
 * 判断树中是否有某些节点满足某个条件。
 * @param tree
 * @param iterator
 */
function someTree(tree, iterator) {
    var result = false;
    everyTree(tree, function (item, key, level, paths) {
        if (iterator(item, key, level, paths)) {
            result = true;
            return false;
        }
        return true;
    });
    return result;
}
function flattenTree(tree, mapper) {
    var flattened = [];
    eachTree(tree, function (item, index, level, paths) {
        return flattened.push(mapper ? mapper(item, index, level, paths) : item);
    });
    return flattened;
}
function flattenTreeWithLeafNodes(tree, mapper) {
    var flattened = [];
    eachTree(tree, function (item, index) {
        if (!item.hasOwnProperty('children')) {
            flattened.push(mapper ? mapper(item, index) : item);
        }
    });
    return flattened;
}
/**
 * 操作树，遵循 imutable, 每次返回一个新的树。
 * 类似数组的 splice 不同的地方这个方法不修改原始数据，
 * 同时第二个参数不是下标，而是下标数组，分别代表每一层的下标。
 *
 * 至于如何获取下标数组，请查看 findTreeIndex
 *
 * @param tree
 * @param idx
 * @param deleteCount
 * @param ...items
 */
function spliceTree(tree, idx, deleteCount) {
    if (deleteCount === void 0) { deleteCount = 0; }
    var items = [];
    for (var _i = 3; _i < arguments.length; _i++) {
        items[_i - 3] = arguments[_i];
    }
    var list = tree.concat();
    if (typeof idx === 'number') {
        list.splice.apply(list, __spreadArray([idx, deleteCount], __read(items), false));
    }
    else if (Array.isArray(idx) && idx.length) {
        idx = idx.concat();
        var lastIdx = idx.pop();
        var host = idx.reduce(function (list, idx) {
            var child = __assign(__assign({}, list[idx]), { children: list[idx].children ? list[idx].children.concat() : [] });
            list[idx] = child;
            return child.children;
        }, list);
        host.splice.apply(host, __spreadArray([lastIdx, deleteCount], __read(items), false));
    }
    return list;
}
/**
 * 计算树的深度
 * @param tree
 */
function getTreeDepth(tree) {
    if (Array.isArray(tree) && tree.length === 0) {
        return 0;
    }
    return Math.max.apply(Math, __spreadArray([], __read(tree.map(function (item) {
        if (Array.isArray(item.children)) {
            return 1 + getTreeDepth(item.children);
        }
        return 1;
    })), false));
}
/**
 * 从树中获取某个值的所有祖先
 * @param tree
 * @param value
 */
function getTreeAncestors(tree, value, includeSelf) {
    if (includeSelf === void 0) { includeSelf = false; }
    var ancestors = null;
    findTree(tree, function (item, index, level, paths) {
        if (item === value) {
            ancestors = paths;
            if (includeSelf) {
                ancestors.push(item);
            }
            return true;
        }
        return false;
    });
    return ancestors;
}
/**
 * 从树中获取某个值的上级
 * @param tree
 * @param value
 */
function getTreeParent(tree, value) {
    var ancestors = getTreeAncestors(tree, value);
    return (ancestors === null || ancestors === void 0 ? void 0 : ancestors.length) ? ancestors[ancestors.length - 1] : null;
}
function countTree(tree, iterator) {
    var count = 0;
    eachTree(tree, function (item, key, level, paths) {
        if (!iterator || iterator(item, key, level, paths)) {
            count++;
        }
    });
    return count;
}
function ucFirst(str) {
    return typeof str === 'string'
        ? str.substring(0, 1).toUpperCase() + str.substring(1)
        : str;
}
function lcFirst(str) {
    return str ? str.substring(0, 1).toLowerCase() + str.substring(1) : '';
}
function camel(str) {
    return str
        ? str
            .split(/[\s_\-]/)
            .map(function (item, index) { return (index === 0 ? lcFirst(item) : ucFirst(item)); })
            .join('')
        : '';
}
function getWidthRate(value, strictMode) {
    if (strictMode === void 0) { strictMode = false; }
    if (typeof value === 'string' && /\bcol\-\w+\-(\d+)\b/.test(value)) {
        return parseInt(RegExp.$1, 10);
    }
    return strictMode ? 0 : value || 0;
}
function getLevelFromClassName(value, defaultValue) {
    if (defaultValue === void 0) { defaultValue = 'default'; }
    if (/\b(?:btn|text)-(link|primary|secondary|info|success|warning|danger|light|dark)\b/.test(value)) {
        return RegExp.$1;
    }
    return defaultValue;
}
function pickEventsProps(props) {
    var ret = {};
    props &&
        Object.keys(props).forEach(function (key) { return /^on/.test(key) && (ret[key] = props[key]); });
    return ret;
}
var autobind = autobindMethod;
var bulkBindFunctions = function (context, funNames) {
    funNames.forEach(function (key) { return (context[key] = context[key].bind(context)); });
};
function sortArray(items, field, dir, fieldGetter) {
    return items.sort(function (a, b) {
        var ret;
        var a1 = fieldGetter ? fieldGetter(a, field) : a[field];
        var b1 = fieldGetter ? fieldGetter(b, field) : b[field];
        if (typeof a1 === 'number' && typeof b1 === 'number') {
            ret = a1 < b1 ? -1 : a1 === b1 ? 0 : 1;
        }
        else {
            ret = String(a1).localeCompare(String(b1));
        }
        return ret * dir;
    });
}
function applyFilters(items, options) {
    if (options.matchFunc && typeof options.matchFunc === 'function') {
        items = options.matchFunc(items, items, options);
    }
    else {
        if (Array.isArray(options.columns)) {
            options.columns.forEach(function (column) {
                var value = typeof column.name === 'string'
                    ? getVariable(options.query, column.name)
                    : undefined;
                var key = column.name;
                if ((options.filterOnAllColumns ||
                    column.searchable ||
                    column.filterable) &&
                    key &&
                    value != null) {
                    // value可能为null、undefined、''、0
                    if (Array.isArray(value)) {
                        if (value.length > 0) {
                            var arr_1 = __spreadArray([], __read(items), false);
                            var arrItems_1 = [];
                            value.forEach(function (item) {
                                arrItems_1 = __spreadArray(__spreadArray([], __read(arrItems_1), false), __read(matchSorter(arr_1, item, {
                                    keys: [key],
                                    threshold: matchSorter.rankings.CONTAINS
                                })), false);
                            });
                            items = items.filter(function (item) {
                                return arrItems_1.find(function (a) { return a === item; });
                            });
                        }
                    }
                    else {
                        items = matchSorter(items, value, {
                            keys: [key],
                            threshold: matchSorter.rankings.CONTAINS
                        });
                    }
                }
            });
        }
    } /** 字段的格式类型无法穷举，所以支持使用函数过滤 */
    return items;
}
// 只判断一层, 如果层级很深，form-data 也不好表达。
function hasFile(object) {
    return Object.keys(object).some(function (key) {
        var value = object[key];
        return (value instanceof File ||
            (Array.isArray(value) && value.length && value[0] instanceof File));
    });
}
function qsstringify(data, options, keepEmptyArray) {
    if (options === void 0) { options = {
        arrayFormat: 'indices',
        encodeValuesOnly: true
    }; }
    // qs会保留空字符串。fix: Combo模式的空数组，无法清空。改为存为空字符串；
    if (keepEmptyArray) {
        data = JSONValueMap(data, function (value) {
            return Array.isArray(value) && !value.length ? '' : value;
        });
    }
    return qs.stringify(data, options);
}
function qsparse(data, options) {
    if (options === void 0) { options = {
        arrayFormat: 'indices',
        encodeValuesOnly: true,
        depth: 1000,
        arrayLimit: 1000 /** array元素数量超出限制，会被自动转化为object格式，默认值1000 */
    }; }
    return qs.parse(data, options);
}
function object2formData(data, options, fd) {
    if (options === void 0) { options = {
        arrayFormat: 'indices',
        encodeValuesOnly: true
    }; }
    if (fd === void 0) { fd = new FormData(); }
    var fileObjects = [];
    var others = {};
    Object.keys(data).forEach(function (key) {
        var value = data[key];
        if (value instanceof File) {
            fileObjects.push([key, value]);
        }
        else if (Array.isArray(value) &&
            value.length &&
            value[0] instanceof File) {
            value.forEach(function (value) { return fileObjects.push(["".concat(key, "[]"), value]); });
        }
        else {
            others[key] = value;
        }
    });
    // 因为 key 的格式太多了，偷个懒，用 qs 来处理吧。
    qsstringify(others, options)
        .split('&')
        .forEach(function (item) {
        var parts = item.split('=');
        // form-data/multipart 是不需要 encode 值的。
        parts[0] && fd.append(parts[0], decodeURIComponent(parts[1]));
    });
    // Note: File类型字段放在后面，可以支持第三方云存储鉴权
    fileObjects.forEach(function (fileObject) {
        return fd.append(fileObject[0], fileObject[1], fileObject[1].name);
    });
    return fd;
}
function chainFunctions() {
    var fns = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        fns[_i] = arguments[_i];
    }
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return fns.reduce(function (ret, fn) {
            return ret === false
                ? false
                : typeof fn == 'function'
                    ? fn.apply(void 0, __spreadArray([], __read(args), false)) : undefined;
        }, undefined);
    };
}
function chainEvents(props, schema) {
    var ret = {};
    Object.keys(props).forEach(function (key) {
        var _a;
        if (key.substr(0, 2) === 'on' &&
            typeof props[key] === 'function' &&
            typeof schema[key] === 'function' &&
            schema[key] !== props[key]) {
            // 表单项里面的 onChange 很特殊，这个不要处理。
            if (props.formStore && key === 'onChange') {
                ret[key] = props[key];
            }
            else {
                ret[key] = chainFunctions(schema[key], props[key]);
            }
        }
        else {
            ret[key] = (_a = props[key]) !== null && _a !== void 0 ? _a : schema[key];
        }
    });
    return ret;
}
function mapObject(value, valueMapper, skipFn, keyMapper) {
    // 如果value值满足skipFn条件则不做map操作
    skipFn =
        skipFn && typeof skipFn === 'function'
            ? skipFn
            : function (value) {
                // File类型处理之后会变成plain object
                if (value instanceof File) {
                    return true;
                }
                return false;
            };
    if (skipFn(value)) {
        return value;
    }
    if (Array.isArray(value)) {
        return value.map(function (item) { return mapObject(item, valueMapper, skipFn, keyMapper); });
    }
    if (isObject(value)) {
        var tmpValue_1 = {};
        Object.keys(value).forEach(function (key) {
            var newKey = keyMapper ? keyMapper(key) : key;
            tmpValue_1[newKey] = mapObject(value[key], valueMapper, skipFn, keyMapper);
        });
        return tmpValue_1;
    }
    return valueMapper(value);
}
function loadScript(src) {
    return new Promise(function (ok, fail) {
        var script = document.createElement('script');
        script.onerror = function (reason) { return fail(reason); };
        if (~src.indexOf('{{callback}}')) {
            var callbackFn_1 = "loadscriptcallback_".concat(uuid());
            window[callbackFn_1] = function () {
                ok();
                delete window[callbackFn_1];
            };
            src = src.replace('{{callback}}', callbackFn_1);
        }
        else {
            script.onload = function () { return ok(); };
        }
        script.src = src;
        document.head.appendChild(script);
    });
}
function loadStyle(href) {
    return new Promise(function (ok, fail) {
        var link = document.createElement('link');
        link.rel = 'stylesheet';
        link.onerror = function (reason) { return fail(reason); };
        link.onload = function () { return ok(); };
        link.href = href;
        document.head.appendChild(link);
    });
}
var SkipOperation = /** @class */ (function (_super) {
    __extends(SkipOperation, _super);
    function SkipOperation() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return SkipOperation;
}(Error));
var ValidateError = /** @class */ (function (_super) {
    __extends(ValidateError, _super);
    function ValidateError(message, error, rawError) {
        var _this = _super.call(this) || this;
        _this.name = 'ValidateError';
        _this.message = message;
        _this.detail = error;
        _this.rawError = rawError;
        return _this;
    }
    return ValidateError;
}(Error));
/**
 * 检查对象是否有循环引用，来自 https://stackoverflow.com/a/34909127
 * @param obj
 */
function isCyclic(obj) {
    var seenObjects = [];
    function detect(obj) {
        if (obj && typeof obj === 'object') {
            if (seenObjects.indexOf(obj) !== -1) {
                return true;
            }
            seenObjects.push(obj);
            for (var key in obj) {
                if (obj.hasOwnProperty(key) && detect(obj[key])) {
                    return true;
                }
            }
        }
        return false;
    }
    return detect(obj);
}
function internalFindObjectsWithKey(obj, key) {
    var objects = [];
    for (var k in obj) {
        if (!obj.hasOwnProperty(k))
            continue;
        if (k === key) {
            objects.push(obj);
        }
        else if (typeof obj[k] === 'object') {
            objects = objects.concat(internalFindObjectsWithKey(obj[k], key));
        }
    }
    return objects;
}
/**
 * 深度查找具有某个 key 名字段的对象，实际实现是 internalFindObjectsWithKey，这里包一层是为了做循环引用检测
 * @param obj
 * @param key
 */
function findObjectsWithKey(obj, key) {
    // 避免循环引用导致死循环
    if (isCyclic(obj)) {
        return [];
    }
    return internalFindObjectsWithKey(obj, key);
}
var scrollbarWidth;
/**
 * 获取浏览器滚动条宽度 https://stackoverflow.com/a/13382873
 */
function getScrollbarWidth() {
    if (typeof scrollbarWidth !== 'undefined') {
        return scrollbarWidth;
    }
    // Creating invisible container
    var outer = document.createElement('div');
    outer.style.visibility = 'hidden';
    outer.style.overflow = 'scroll'; // forcing scrollbar to appear
    // @ts-ignore
    outer.style.msOverflowStyle = 'scrollbar'; // needed for WinJS apps
    document.body.appendChild(outer);
    // Creating inner element and placing it in the container
    var inner = document.createElement('div');
    outer.appendChild(inner);
    // Calculating difference between container's full width and the child width
    scrollbarWidth = outer.offsetWidth - inner.offsetWidth;
    // Removing temporary elements from the DOM
    // @ts-ignore
    outer.parentNode.removeChild(outer);
    return scrollbarWidth;
}
// 后续改用 FormulaExec['formula']
function resolveValueByName(data, name, canAccessSuper) {
    return isPureVariable(name)
        ? resolveVariableAndFilter(name, data, '|raw')
        : resolveVariable(name, data, canAccessSuper);
}
// 统一的获取 value 值方法
function getPropValue(props, getter, canAccessSuper) {
    var _a, _b;
    if (canAccessSuper === void 0) { canAccessSuper = props.canAccessSuperData; }
    var name = props.name, value = props.value, data = props.data, defaultValue = props.defaultValue;
    return ((_b = (_a = value !== null && value !== void 0 ? value : getter === null || getter === void 0 ? void 0 : getter(props)) !== null && _a !== void 0 ? _a : resolveValueByName(data, name, canAccessSuper)) !== null && _b !== void 0 ? _b : (isExpression(defaultValue)
        ? resolveVariableAndFilter(defaultValue, data)
        : replaceExpression(defaultValue)));
}
// 检测 value 是否有变化，有变化就执行 onChange
function detectPropValueChanged(props, prevProps, onChange, getter) {
    var nextValue;
    if (typeof props.value !== 'undefined') {
        props.value !== prevProps.value && onChange(props.value);
    }
    else if ((nextValue = getter === null || getter === void 0 ? void 0 : getter(props)) !== undefined) {
        nextValue !== getter(prevProps) && onChange(nextValue);
    }
    else if (typeof props.name === 'string' &&
        (nextValue = resolveValueByName(props.data, props.name)) !== undefined) {
        nextValue !== resolveValueByName(prevProps.data, prevProps.name) &&
            onChange(nextValue);
    }
    else if (props.defaultValue !== prevProps.defaultValue) {
        onChange(props.defaultValue);
    }
}
// 去掉字符串中的 html 标签，不完全准确但效率比较高
function removeHTMLTag(str) {
    return typeof str === 'string' ? str.replace(/<\/?[^>]+(>|$)/g, '') : str;
}
/**
 * 将路径格式的value转换成普通格式的value值
 *
 * @example
 *
 * 'a/b/c' => 'c';
 * {label: 'A/B/C', value: 'a/b/c'} => {label: 'C', value: 'c'};
 * 'a/b/c,a/d' => 'c,d';
 * ['a/b/c', 'a/d'] => ['c', 'd'];
 * [{label: 'A/B/C', value: 'a/b/c'},{label: 'A/D', value: 'a/d'}] => [{label: 'C', value: 'c'},{label: 'D', value: 'd'}]
 */
function normalizeNodePath(value, enableNodePath, labelField, valueField, pathSeparator, delimiter) {
    var _a;
    if (labelField === void 0) { labelField = 'label'; }
    if (valueField === void 0) { valueField = 'value'; }
    if (pathSeparator === void 0) { pathSeparator = '/'; }
    if (delimiter === void 0) { delimiter = ','; }
    var nodeValueArray = [];
    var nodePathArray = [];
    var getLastNodeFromPath = function (path) {
        return last(path ? path.toString().split(pathSeparator) : []);
    };
    if (typeof value === 'undefined' || !enableNodePath) {
        return { nodeValueArray: nodeValueArray, nodePathArray: nodePathArray };
    }
    // 尾节点为当前options中value值
    if (Array.isArray(value)) {
        value.forEach(function (nodePath) {
            var _a;
            if (nodePath && nodePath.hasOwnProperty(valueField)) {
                nodeValueArray.push(__assign(__assign({}, nodePath), (_a = {}, _a[labelField] = getLastNodeFromPath(nodePath[labelField]), _a[valueField] = getLastNodeFromPath(nodePath[valueField]), _a)));
                nodePathArray.push(nodePath[valueField]);
            }
            else {
                nodeValueArray.push(getLastNodeFromPath(nodePath));
                nodePathArray.push(nodePath);
            }
        });
    }
    else if (typeof value === 'string') {
        value
            .toString()
            .split(delimiter)
            .forEach(function (path) {
            nodeValueArray.push(getLastNodeFromPath(path));
            nodePathArray.push(path);
        });
    }
    else {
        nodeValueArray.push(__assign(__assign({}, value), (_a = {}, _a[labelField] = getLastNodeFromPath(value[labelField]), _a[valueField || 'value'] = getLastNodeFromPath(value[valueField]), _a)));
        nodePathArray.push(value[valueField]);
    }
    return { nodeValueArray: nodeValueArray, nodePathArray: nodePathArray };
}
// 主要用于排除点击输入框和链接等情况
function isClickOnInput(e) {
    var target = e.target;
    var formItem;
    return !!(!e.currentTarget.contains(target) ||
        ~['INPUT', 'TEXTAREA'].indexOf(target.tagName) ||
        ((formItem = target.closest("button, a, [data-role=\"form-item\"], label[data-role=\"checkbox\"], label[data-role=\"switch\"]")) &&
            e.currentTarget.contains(formItem)));
}
// 计算字符串 hash
function hashCode(s) {
    return s.split('').reduce(function (a, b) {
        a = (a << 5) - a + b.charCodeAt(0);
        return a & a;
    }, 0);
}
/**
 * 遍历 schema
 * @param json
 * @param mapper
 */
function JSONTraverse(json, mapper, maxDeep) {
    if (maxDeep === void 0) { maxDeep = Number.MAX_VALUE; }
    if (maxDeep <= 0) {
        return;
    }
    Object.keys(json).forEach(function (key) {
        var value = json[key];
        if (!isObservable(value)) {
            if (isPlainObject(value) || Array.isArray(value)) {
                JSONTraverse(value, mapper, maxDeep - 1);
            }
            else {
                mapper(value, key, json);
            }
        }
    });
}
/**
 * 每层都会执行，返回新的对象，新对象不会递归下去
 * @param json
 * @param mapper
 * @returns
 */
function JSONValueMap(json, mapper, deepFirst, stack) {
    if (deepFirst === void 0) { deepFirst = false; }
    if (stack === void 0) { stack = []; }
    if (!isPlainObject(json) && !Array.isArray(json)) {
        return json;
    }
    var iterator = function (origin, key, host, stack) {
        var _a, _b;
        if (stack === void 0) { stack = []; }
        if (deepFirst) {
            var value = JSONValueMap(origin, mapper, deepFirst, stack);
            return (_a = mapper(value, key, host, stack)) !== null && _a !== void 0 ? _a : value;
        }
        var maped = (_b = mapper(origin, key, host, stack)) !== null && _b !== void 0 ? _b : origin;
        // 如果不是深度优先，上层的对象都修改了，就不继续递归进到新返回的对象了
        if (maped === origin) {
            return JSONValueMap(origin, mapper, deepFirst, stack);
        }
        return maped;
    };
    if (Array.isArray(json)) {
        var modified_1 = false;
        var arr = json.map(function (value, index) {
            var newValue = iterator(value, index, json, [json].concat(stack));
            modified_1 = modified_1 || newValue !== value;
            return newValue;
        });
        return modified_1 ? arr : json;
    }
    var modified = false;
    var toUpdate = {};
    Object.keys(json).forEach(function (key) {
        var value = json[key];
        var result = iterator(value, key, json, [json].concat(stack));
        if (result !== value) {
            modified = true;
            toUpdate[key] = result;
        }
    });
    return modified
        ? __assign(__assign({}, json), toUpdate) : json;
}
function convertArrayValueToMoment(value, types, mom) {
    if (value.length === 0)
        return mom;
    for (var i = 0; i < types.length; i++) {
        var type = types[i];
        // @ts-ignore
        mom.set(type, value[i]);
    }
    return mom;
}
function getRange(min, max, step) {
    if (step === void 0) { step = 1; }
    var arr = [];
    for (var i = min; i <= max; i += step) {
        arr.push(i);
    }
    return arr;
}
function repeatCount(count, iterator) {
    var result = [];
    var index = 0;
    while (count--) {
        result.push(iterator(index++));
    }
    return result;
}
function isNumeric(value) {
    if (typeof value === 'number') {
        return true;
    }
    return /^[-+]?(?:\d*[.])?\d+$/.test(value);
}
/**
 * 解析Query字符串中的原始类型，目前仅支持转化布尔类型
 *
 * @param query 查询字符串
 * @param options 配置参数
 * @returns 解析后的查询字符串
 */
function parsePrimitiveQueryString(rawQuery, options) {
    if (!isPlainObject(rawQuery)) {
        return rawQuery;
    }
    options = options || { primitiveTypes: ['boolean'] };
    if (!Array.isArray(options.primitiveTypes) ||
        options.primitiveTypes.length === 0) {
        options.primitiveTypes = ['boolean'];
    }
    var query = JSONValueMap(rawQuery, function (value) {
        var _a, _b;
        if ((((_a = options === null || options === void 0 ? void 0 : options.primitiveTypes) === null || _a === void 0 ? void 0 : _a.includes('boolean')) && value === 'true') ||
            value === 'false') {
            /** 解析布尔类型 */
            return value === 'true';
        }
        else if (((_b = options === null || options === void 0 ? void 0 : options.primitiveTypes) === null || _b === void 0 ? void 0 : _b.includes('number')) &&
            isNumeric(value) &&
            isFinite(value) &&
            value >= -Number.MAX_SAFE_INTEGER &&
            value <= Number.MAX_SAFE_INTEGER) {
            /** 解析数字类型 */
            var result = Number(value);
            return !isNaN(result) ? result : value;
        }
        return value;
    });
    return query;
}
/**
 * 获取URL链接中的query参数（包含hash mode）
 *
 * @param location Location对象，或者类Location结构的对象
 * @param {Object} options 配置项
 * @param {Boolean} options.parsePrimitive 是否将query的值解析为原始类型，目前仅支持转化布尔类型
 */
function parseQuery(location, options) {
    var _a;
    var _b = options || {}, _c = _b.parsePrimitive, parsePrimitive = _c === void 0 ? false : _c, _d = _b.primitiveTypes, primitiveTypes = _d === void 0 ? ['boolean'] : _d;
    var query = (location && !(location instanceof Location) && (location === null || location === void 0 ? void 0 : location.query)) ||
        (location && (location === null || location === void 0 ? void 0 : location.search) && qsparse(location.search.substring(1))) ||
        (window.location.search && qsparse(window.location.search.substring(1)));
    var normalizedQuery = isPlainObject(query)
        ? parsePrimitive
            ? parsePrimitiveQueryString(query, { primitiveTypes: primitiveTypes })
            : query
        : {};
    /* 处理hash中的query */
    var hash = (_a = window.location) === null || _a === void 0 ? void 0 : _a.hash;
    var hashQuery = {};
    var idx = -1;
    if (typeof hash === 'string' && ~(idx = hash.indexOf('?'))) {
        hashQuery = qsparse(hash.substring(idx + 1));
    }
    return merge(normalizedQuery, hashQuery);
}
/**
 * 计算两个数组的差集
 *
 * @template T 数组元素类型
 * @param allOptions 包含所有元素的数组
 * @param options 被筛选的数组
 * @param getValue 返回数组元素值的函数
 * @returns 两个数组的差集
 */
var differenceFromAllCache = {
    allOptions: null,
    options: null,
    res: []
};
function differenceFromAll(allOptions, options, getValue) {
    if (allOptions === differenceFromAllCache.allOptions &&
        options === differenceFromAllCache.options) {
        return differenceFromAllCache.res;
    }
    var map = new Map(allOptions.map(function (item) { return [getValue(item), item]; }));
    var res = options.filter(function (item) { return !map.get(getValue(item)); });
    differenceFromAllCache.allOptions = allOptions;
    differenceFromAllCache.options = options;
    differenceFromAllCache.res = res;
    return res;
}
/**
 * 基于 schema 自动提取 trackExpression
 * 可能会不准确，建议用户自己配置
 * @param schema
 * @returns
 */
function buildTrackExpression(schema) {
    if (!isPlainObject(schema) && !Array.isArray(schema)) {
        return '';
    }
    var trackExpressions = [];
    JSONTraverse(schema, function (value, key) {
        if (typeof value !== 'string') {
            return;
        }
        if (key === 'name') {
            trackExpressions.push(isPureVariable(value) ? value : "${".concat(value, "}"));
        }
        else if (key === 'source') {
            trackExpressions.push(value);
        }
        else if (key.endsWith('On') ||
            key === 'condition' ||
            key === 'trackExpression') {
            trackExpressions.push(value.startsWith('${') ? value : "<script>".concat(value, "</script>"));
        }
        else if (value.includes('$')) {
            trackExpressions.push(value);
        }
    }, 10 // 最多遍历 10 层
    );
    return trackExpressions.join('|');
}
function evalTrackExpression(expression, data) {
    if (typeof expression !== 'string') {
        return '';
    }
    var parts = [];
    while (true) {
        // 这个是自动提取的时候才会用到，用户配置不要用到这个语法
        var idx = expression.indexOf('<script>');
        if (idx === -1) {
            break;
        }
        var endIdx = expression.indexOf('</script>');
        if (endIdx === -1) {
            throw new Error('Invalid trackExpression miss end script token `</script>`');
        }
        if (idx) {
            parts.push({
                type: 'text',
                value: expression.substring(0, idx)
            });
        }
        parts.push({
            type: 'script',
            value: expression.substring(idx + 8, endIdx)
        });
        expression = expression.substring(endIdx + 9);
    }
    expression &&
        parts.push({
            type: 'text',
            value: expression
        });
    return parts
        .map(function (item) {
        if (item.type === 'text') {
            return tokenize(item.value, data);
        }
        return evalExpression(item.value, data);
    })
        .join('');
}
// 很奇怪的问题，react-json-view import 有些情况下 mod.default 才是 esModule
function importLazyComponent(mod) {
    return mod.default.__esModule ? mod.default : mod;
}
function replaceUrlParams(path, params) {
    if (typeof path === 'string' && /\:\w+/.test(path)) {
        return compile(path)(params);
    }
    return path;
}
var TEST_ID_KEY = 'data-testid';
var TestIdBuilder = /** @class */ (function () {
    // 为空就表示没有启用testId，后续一直返回都将是空
    function TestIdBuilder(testId) {
        this.testId = testId;
    }
    TestIdBuilder.fast = function (testId) {
        var _a;
        return _a = {},
            _a[TEST_ID_KEY] = testId,
            _a;
    };
    // 生成子区域的testid生成器
    TestIdBuilder.prototype.getChild = function (childPath, data) {
        if (this.testId == null) {
            return new TestIdBuilder();
        }
        return new TestIdBuilder(data
            ? filter("".concat(this.testId, "-").concat(childPath), data)
            : "".concat(this.testId, "-").concat(childPath));
    };
    // 获取当前组件的testid
    TestIdBuilder.prototype.getTestId = function (data) {
        var _a;
        if (this.testId == null) {
            return undefined;
        }
        return _a = {},
            _a[TEST_ID_KEY] = data ? filter(this.testId, data) : this.testId,
            _a;
    };
    TestIdBuilder.prototype.getTestIdValue = function (data) {
        if (this.testId == null) {
            return undefined;
        }
        return data ? filter(this.testId, data) : this.testId;
    };
    return TestIdBuilder;
}());
function supportsMjs() {
    try {
        new Function('import("")');
        return true;
    }
    catch (e) {
        return false;
    }
}
function formateId(id) {
    if (!id) {
        return guid();
    }
    // 将className非法字符替换为短横线
    id = id.replace(/[^a-zA-Z0-9-]/g, '-');
    // 将连续的-替换为单个-
    id = id.replace(/-{2,}/g, '-');
    // 去掉首尾的-
    id = id.replace(/^-|-$/g, '');
    // 首字母不能为数字
    if (/^\d/.test(id)) {
        id = 'amis-' + id;
    }
    return id;
}
function formateCheckThemeCss(themeCss, type) {
    var _a;
    if (!themeCss) {
        return {};
    }
    var className = themeCss["".concat(type, "ClassName")] || {};
    var controlClassName = themeCss["".concat(type, "ControlClassName")] || {};
    var defaultControlThemeCss = {};
    var checkedControlThemeCss = {};
    var defaultThemeCss = {};
    var checkedThemeCss = {};
    Object.keys(className).forEach(function (key) {
        if (key.includes('checked-')) {
            var newKey = key.replace('checked-', '');
            checkedThemeCss[newKey] = className[key];
        }
        else if (key.includes("".concat(type, "-"))) {
            var newKey = key.replace("".concat(type, "-"), '');
            defaultThemeCss[newKey] = className[key];
        }
        else {
            defaultThemeCss[key] = className[key];
        }
    });
    Object.keys(controlClassName).forEach(function (key) {
        if (key.includes('checked-')) {
            var newKey = key.replace('checked-', '');
            checkedControlThemeCss[newKey] = controlClassName[key];
        }
        else if (key.includes("".concat(type, "-"))) {
            var newKey = key.replace("".concat(type, "-"), '');
            defaultControlThemeCss[newKey] = controlClassName[key];
        }
        else {
            defaultControlThemeCss[key] = controlClassName[key];
        }
    });
    return __assign(__assign({}, themeCss), (_a = {}, _a["".concat(type, "ControlClassName")] = defaultControlThemeCss, _a["".concat(type, "ControlCheckedClassName")] = checkedControlThemeCss, _a["".concat(type, "ClassName")] = defaultThemeCss, _a["".concat(type, "CheckedClassName")] = checkedThemeCss, _a));
}

export { JSONTraverse, JSONValueMap, SkipOperation, TEST_ID_KEY, TestIdBuilder, ValidateError, __uri, anyChanged, applyFilters, autobind, buildTrackExpression, bulkBindFunctions, camel, chainEvents, chainFunctions, changedEffect, convertArrayValueToMoment, countTree, detectPropValueChanged, difference, differenceFromAll, eachTree, evalTrackExpression, everyTree, filterTree, findIndex, findObjectsWithKey, findTree, findTreeAll, findTreeIndex, flattenTree, flattenTreeWithLeafNodes, formateCheckThemeCss, formateId, getLevelFromClassName, getPropValue, getRange, getScrollParent, getScrollbarWidth, getTree, getTreeAncestors, getTreeDepth, getTreeParent, getWidthRate, guid, hasAbility, hasFile, hasOwnPropertyInPath, hasVisibleExpression, hashCode, immutableExtends, importLazyComponent, injectPropsToObject, isArrayChildrenModified, isBreakpoint, isClickOnInput, isDisabled, isEmpty, isMobile, isMobileDevice, isNumeric, isObjectShallowModified, isSuperDataModified, isUnfolded, isVisible, lcFirst, loadScript, loadStyle, makeColumnClassBuild, makeHorizontalDeeper, mapObject, mapTree, noop, normalizeNodePath, object2formData, omitControls, padArr, parsePrimitiveQueryString, parseQuery, pickEventsProps, preventDefault, promisify, qsparse, qsstringify, range, removeHTMLTag, repeatCount, replaceUrlParams, rmUndefined, someTree, sortArray, spliceTree, supportsMjs, syncDataFromSuper, ucFirst, until, uuid, uuidv4, visibilityFilter };
