/**
 * amis-core v6.13.0
 * Copyright 2018-2025 fex
 */

import { __assign } from 'tslib';
import styleManager from '../StyleManager.js';

function generateStyleByAnimation(className, animation) {
    var _a;
    return _a = {},
        _a[className.join(',')] = {
            animationName: animation.name,
            animationDuration: "".concat(animation.duration || 1, "s"),
            animationIterationCount: animation.iterationCount || 1,
            animationDelay: "".concat(animation.delay || 0, "s"),
            animationTimingFunction: animation.timingFunction || 'ease',
            animationFillMode: animation.fillMode || 'none'
        },
        _a;
}
function generateStyleByHover(className, animation) {
    var _a, _b;
    var style = {};
    if (['hoverFlash', 'hoverShake'].includes(animation.name)) {
        style = (_a = {},
            _a["".concat(className, ":hover,").concat(className, "-show")] = {
                animation: "".concat(animation.name, " ").concat(animation.duration || 1, "s ease ").concat(animation.delay || 0, "s ").concat(animation.repeat || 1)
            },
            _a);
    }
    return __assign((_b = {}, _b[className] = {
        transition: "all ".concat(animation.duration || 1, "s ease ").concat(animation.delay || 0, "s")
    }, _b), style);
}
function createAnimationStyle(id, animationsConfig) {
    var _a;
    var styleConfig = {};
    Object.keys(animationsConfig).forEach(function (key) {
        var animationConfig = animationsConfig[key];
        if (!animationConfig) {
            return;
        }
        styleConfig = Object.assign(styleConfig, key === 'hover'
            ? generateStyleByHover(".".concat(animationConfig.type, "-").concat(id, "-").concat(key), {
                name: animationConfig.type,
                duration: animationConfig.duration,
                delay: animationConfig.delay,
                repeat: animationConfig.repeat
            })
            : generateStyleByAnimation([".".concat(animationConfig.type, "-").concat(id, "-").concat(key)], {
                name: animationConfig.type,
                duration: animationConfig.duration,
                iterationCount: key === 'attention' ? 'infinite' : 1,
                delay: animationConfig.delay,
                fillMode: key === 'attention' ? 'none' : 'forwards'
            }));
    });
    styleManager.updateStyle((_a = {},
        _a[id] = styleConfig,
        _a));
}

export { createAnimationStyle };
