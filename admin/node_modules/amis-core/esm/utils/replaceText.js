/**
 * amis-core v6.13.0
 * Copyright 2018-2025 fex
 */

import { __values } from 'tslib';
import { JSONValueMap } from './helper.js';
import { isObject } from './object.js';

function replaceText(schema, replaceText, replaceTextIgnoreKeys) {
    // 进行文本替换
    if (replaceText && isObject(replaceText)) {
        var replaceKeys_1 = Object.keys(replaceText);
        if (!replaceKeys_1.length) {
            return schema;
        }
        replaceKeys_1.sort(function (a, b) { return b.length - a.length; }); // 避免用户将短的放前面
        var IgnoreKeys_1 = new Set(Array.isArray(replaceTextIgnoreKeys) ? replaceTextIgnoreKeys : []);
        var ignore_1 = typeof replaceTextIgnoreKeys === 'function'
            ? replaceTextIgnoreKeys
            : function (key) {
                return IgnoreKeys_1.has(key);
            };
        return JSONValueMap(schema, function (value, key, object) {
            var e_1, _a;
            if (typeof value === 'string' && !ignore_1(key, value, object)) {
                try {
                    for (var replaceKeys_2 = __values(replaceKeys_1), replaceKeys_2_1 = replaceKeys_2.next(); !replaceKeys_2_1.done; replaceKeys_2_1 = replaceKeys_2.next()) {
                        var replaceKey = replaceKeys_2_1.value;
                        if (~value.indexOf(replaceKey)) {
                            return value.replaceAll(replaceKey, replaceText[replaceKey]);
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (replaceKeys_2_1 && !replaceKeys_2_1.done && (_a = replaceKeys_2.return)) _a.call(replaceKeys_2);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            return value;
        });
    }
    return schema;
}

export { replaceText };
