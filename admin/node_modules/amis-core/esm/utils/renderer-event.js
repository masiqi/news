/**
 * amis-core v6.13.0
 * Copyright 2018-2025 fex
 */

import { __values, __awaiter, __generator, __assign } from 'tslib';
import { runActions } from '../actions/Action.js';
import { isExpression } from './formula.js';
import { eachTree, getTree } from './helper.js';
import { extendObject, createObject } from './object.js';
import debounce from 'lodash/debounce';
import { resolveVariableAndFilterForAsync } from './resolveVariableAndFilterForAsync.js';
import { evalExpression, evalExpressionWithConditionBuilderAsync } from './tpl.js';
import { debug } from './debug.js';

var rendererEventListeners = [];
// 创建渲染器事件对象
function createRendererEvent(type, context) {
    var rendererEvent = Object.defineProperties({
        context: extendObject({ pristineData: context.data }, context),
        type: type,
        prevented: false,
        stoped: false,
        preventDefault: function () {
            rendererEvent.prevented = true;
        },
        stopPropagation: function () {
            rendererEvent.stoped = true;
        },
        get data() {
            return rendererEvent.context.data;
        },
        get pristineData() {
            return rendererEvent.context.pristineData;
        },
        setData: function (data) {
            rendererEvent.context.data = data;
        },
        // 用来记录那些还没完的动作
        // 有时候要等所有完成了才进行下一步
        pendingPromise: [],
        allDone: function () {
            return Promise.all(rendererEvent.pendingPromise);
        }
    }, {
        context: {
            enumerable: false
        },
        pristineData: {
            enumerable: false
        },
        preventDefault: {
            enumerable: false
        },
        stopPropagation: {
            enumerable: false
        },
        setData: {
            enumerable: false
        },
        pendingPromise: {
            enumerable: false
        },
        allDone: {
            enumerable: false
        }
    });
    return rendererEvent;
}
// 绑定事件
var bindEvent = function (renderer) {
    var e_1, _a;
    var _b, _c, _d;
    if (!renderer) {
        return undefined;
    }
    var listeners = renderer.props.$schema.onEvent;
    if (listeners) {
        var _loop_1 = function (key) {
            var listener = rendererEventListeners.find(function (item) {
                return item.renderer === renderer &&
                    item.type === key &&
                    item.actions === listeners[key].actions;
            });
            if (listener === null || listener === void 0 ? void 0 : listener.executing) {
                (_c = (_b = listener === null || listener === void 0 ? void 0 : listener.debounceInstance) === null || _b === void 0 ? void 0 : _b.cancel) === null || _c === void 0 ? void 0 : _c.call(_b);
                rendererEventListeners = rendererEventListeners.filter(function (item) {
                    return !(item.renderer === listener.renderer && item.type === listener.type);
                });
                listener.actions.length &&
                    rendererEventListeners.push({
                        renderer: renderer,
                        type: key,
                        debounce: listener.debounce || null,
                        track: listeners[key].track || null,
                        weight: listener.weight || 0,
                        actions: listener.actions
                    });
            }
            if (!listener && ((_d = listeners[key].actions) === null || _d === void 0 ? void 0 : _d.length)) {
                rendererEventListeners.push({
                    renderer: renderer,
                    type: key,
                    debounce: listeners[key].debounce || null,
                    track: listeners[key].track || null,
                    weight: listeners[key].weight || 0,
                    actions: listeners[key].actions
                });
            }
        };
        try {
            // 暂存
            for (var _e = __values(Object.keys(listeners)), _f = _e.next(); !_f.done; _f = _e.next()) {
                var key = _f.value;
                _loop_1(key);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return function (eventName) {
            // eventName用来避免过滤广播事件
            rendererEventListeners = rendererEventListeners.filter(function (item) {
                // 如果 eventName 为 undefined，表示全部解绑，否则解绑指定事件
                return eventName === undefined
                    ? item.renderer !== renderer
                    : item.renderer !== renderer || item.type !== eventName;
            });
        };
    }
    return undefined;
};
var bindGlobalEventForRenderer = function (renderer) {
    var e_2, _a;
    if (!renderer) {
        return undefined;
    }
    var listeners = renderer.props.$schema.onEvent;
    var bcs = [];
    if (listeners) {
        var _loop_2 = function (key) {
            var listener = listeners[key];
            if (typeof BroadcastChannel !== 'function') {
                console.error('BroadcastChannel is not supported in your browser');
                return { value: void 0 };
            }
            var bc = new BroadcastChannel(key);
            bcs.push({
                renderer: renderer,
                bc: bc
            });
            bc.onmessage = function (e) {
                var _a;
                var _b = e.data, eventName = _b.eventName, data = _b.data;
                var rendererEvent = createRendererEvent(eventName, {
                    env: (_a = renderer === null || renderer === void 0 ? void 0 : renderer.props) === null || _a === void 0 ? void 0 : _a.env,
                    nativeEvent: eventName,
                    scoped: renderer === null || renderer === void 0 ? void 0 : renderer.context,
                    data: data
                });
                // 过滤掉当前的广播事件，避免循环广播
                var actions = listener.actions.filter(function (a) { return !(a.actionType === 'broadcast' && a.eventName === eventName); });
                runActions(actions, renderer, rendererEvent);
            };
        };
        try {
            for (var _b = __values(Object.keys(listeners)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var key = _c.value;
                var state_1 = _loop_2(key);
                if (typeof state_1 === "object")
                    return state_1.value;
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return function () {
            bcs
                .filter(function (item) { return item.renderer === renderer; })
                .forEach(function (item) { return item.bc.close(); });
        };
    }
    return void 0;
};
var bindGlobalEvent = function (eventName, callback) {
    if (typeof BroadcastChannel !== 'function') {
        console.error('BroadcastChannel is not supported in your browser');
        return;
    }
    var bc = new BroadcastChannel(eventName);
    bc.onmessage = function (e) {
        var _a = e.data, name = _a.eventName, data = _a.data;
        if (name === eventName) {
            callback(data);
        }
    };
    return function () { return bc.close(); };
};
// 触发事件
function dispatchEvent(e, renderer, scoped, data, broadcast) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    return __awaiter(this, void 0, void 0, function () {
        var unbindEvent, eventName, from, eventConfig, rendererEvent, listeners, executedCount, checkExecuted, _loop_3, listeners_1, listeners_1_1, listener, state_2, e_3_1;
        var e_3, _l;
        var _this = this;
        return __generator(this, function (_m) {
            switch (_m.label) {
                case 0:
                    unbindEvent = null;
                    eventName = typeof e === 'string' ? e : e.type;
                    from = (renderer === null || renderer === void 0 ? void 0 : renderer.props.id) || (renderer === null || renderer === void 0 ? void 0 : renderer.props.name) || '';
                    debug('event', "dispatch `".concat(eventName, "` from \u300C").concat((renderer === null || renderer === void 0 ? void 0 : renderer.props.type) || 'unknown').concat(from ? "#".concat(from) : '', "\u300D"), data);
                    (_c = (_b = (_a = renderer === null || renderer === void 0 ? void 0 : renderer.props) === null || _a === void 0 ? void 0 : _a.env) === null || _b === void 0 ? void 0 : _b.beforeDispatchEvent) === null || _c === void 0 ? void 0 : _c.call(_b, e, renderer, scoped, data, broadcast);
                    broadcast && ((_e = (_d = renderer.props).onBroadcast) === null || _e === void 0 ? void 0 : _e.call(_d, e, broadcast, data));
                    if (!broadcast) {
                        eventConfig = (_g = (_f = renderer === null || renderer === void 0 ? void 0 : renderer.props) === null || _f === void 0 ? void 0 : _f.onEvent) === null || _g === void 0 ? void 0 : _g[eventName];
                        if (!eventConfig) {
                            // 没命中也没关系
                            return [2 /*return*/, Promise.resolve()];
                        }
                        unbindEvent = bindEvent(renderer);
                    }
                    // 没有可处理的监听
                    if (!rendererEventListeners.length) {
                        return [2 /*return*/, Promise.resolve()];
                    }
                    rendererEvent = broadcast ||
                        createRendererEvent(eventName, {
                            env: (_h = renderer === null || renderer === void 0 ? void 0 : renderer.props) === null || _h === void 0 ? void 0 : _h.env,
                            nativeEvent: e,
                            data: data,
                            scoped: scoped
                        });
                    listeners = rendererEventListeners
                        .filter(function (item) {
                        var _a, _b;
                        return item.type === eventName &&
                            (broadcast
                                ? true
                                : item.renderer === renderer &&
                                    item.actions === ((_b = (_a = renderer.props) === null || _a === void 0 ? void 0 : _a.onEvent) === null || _b === void 0 ? void 0 : _b[eventName].actions));
                    })
                        .sort(function (prev, next) {
                        return next.weight - prev.weight;
                    });
                    executedCount = 0;
                    checkExecuted = function () {
                        executedCount++;
                        if (executedCount === listeners.length) {
                            unbindEvent === null || unbindEvent === void 0 ? void 0 : unbindEvent(eventName);
                        }
                    };
                    _loop_3 = function (listener) {
                        var _o, _p, wait, _q, trailing, _r, leading, _s, maxWait, debounced_1, _t, trackId, trackName;
                        return __generator(this, function (_u) {
                            switch (_u.label) {
                                case 0:
                                    _o = (listener === null || listener === void 0 ? void 0 : listener.debounce) || {}, _p = _o.wait, wait = _p === void 0 ? 100 : _p, _q = _o.trailing, trailing = _q === void 0 ? true : _q, _r = _o.leading, leading = _r === void 0 ? false : _r, _s = _o.maxWait, maxWait = _s === void 0 ? 10000 : _s;
                                    if (!(listener === null || listener === void 0 ? void 0 : listener.debounce)) return [3 /*break*/, 1];
                                    debounced_1 = debounce(function () { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0: return [4 /*yield*/, runActions(listener.actions, listener.renderer, rendererEvent)];
                                                case 1:
                                                    _a.sent();
                                                    checkExecuted();
                                                    return [2 /*return*/];
                                            }
                                        });
                                    }); }, wait, {
                                        trailing: trailing,
                                        leading: leading,
                                        maxWait: maxWait
                                    });
                                    rendererEventListeners.forEach(function (item) {
                                        // 找到事件队列中正在执行的事件加上标识，下次待执行队列就会把这个事件过滤掉
                                        if (item.renderer === listener.renderer &&
                                            listener.type === item.type) {
                                            item.executing = true;
                                            item.debounceInstance = debounced_1;
                                        }
                                    });
                                    debounced_1();
                                    return [3 /*break*/, 3];
                                case 1: return [4 /*yield*/, runActions(listener.actions, listener.renderer, rendererEvent)];
                                case 2:
                                    _u.sent();
                                    checkExecuted();
                                    _u.label = 3;
                                case 3:
                                    if (listener === null || listener === void 0 ? void 0 : listener.track) {
                                        _t = listener.track, trackId = _t.id, trackName = _t.name;
                                        (_k = (_j = renderer === null || renderer === void 0 ? void 0 : renderer.props) === null || _j === void 0 ? void 0 : _j.env) === null || _k === void 0 ? void 0 : _k.tracker({
                                            eventType: listener.type,
                                            eventData: {
                                                trackId: trackId,
                                                trackName: trackName
                                            }
                                        });
                                    }
                                    // 停止后续监听器执行
                                    if (rendererEvent.stoped) {
                                        return [2 /*return*/, "break"];
                                    }
                                    return [2 /*return*/];
                            }
                        });
                    };
                    _m.label = 1;
                case 1:
                    _m.trys.push([1, 6, 7, 8]);
                    listeners_1 = __values(listeners), listeners_1_1 = listeners_1.next();
                    _m.label = 2;
                case 2:
                    if (!!listeners_1_1.done) return [3 /*break*/, 5];
                    listener = listeners_1_1.value;
                    return [5 /*yield**/, _loop_3(listener)];
                case 3:
                    state_2 = _m.sent();
                    if (state_2 === "break")
                        return [3 /*break*/, 5];
                    _m.label = 4;
                case 4:
                    listeners_1_1 = listeners_1.next();
                    return [3 /*break*/, 2];
                case 5: return [3 /*break*/, 8];
                case 6:
                    e_3_1 = _m.sent();
                    e_3 = { error: e_3_1 };
                    return [3 /*break*/, 8];
                case 7:
                    try {
                        if (listeners_1_1 && !listeners_1_1.done && (_l = listeners_1.return)) _l.call(listeners_1);
                    }
                    finally { if (e_3) throw e_3.error; }
                    return [7 /*endfinally*/];
                case 8: return [2 /*return*/, Promise.resolve(rendererEvent)];
            }
        });
    });
}
function dispatchGlobalEventForRenderer(eventName, renderer, scoped, data, broadcast) {
    var _a, _b, _c, _d, _e;
    return __awaiter(this, void 0, void 0, function () {
        var from;
        return __generator(this, function (_f) {
            from = (renderer === null || renderer === void 0 ? void 0 : renderer.props.id) || (renderer === null || renderer === void 0 ? void 0 : renderer.props.name) || '';
            debug('event', "dispatch `".concat(eventName, "` from \u300C").concat((renderer === null || renderer === void 0 ? void 0 : renderer.props.type) || 'unknown').concat(from ? "#".concat(from) : '', "\u300D"), data);
            (_c = (_b = (_a = renderer === null || renderer === void 0 ? void 0 : renderer.props) === null || _a === void 0 ? void 0 : _a.env) === null || _b === void 0 ? void 0 : _b.beforeDispatchEvent) === null || _c === void 0 ? void 0 : _c.call(_b, eventName, renderer, scoped, data, broadcast);
            (_e = (_d = renderer.props).onBroadcast) === null || _e === void 0 ? void 0 : _e.call(_d, eventName, broadcast, data);
            dispatchGlobalEvent(eventName, data);
            return [2 /*return*/];
        });
    });
}
function dispatchGlobalEvent(eventName, data) {
    return __awaiter(this, void 0, void 0, function () {
        var bc;
        return __generator(this, function (_a) {
            if (typeof BroadcastChannel !== 'function') {
                console.error('BroadcastChannel is not supported in your browser');
                return [2 /*return*/];
            }
            bc = new BroadcastChannel(eventName);
            bc.postMessage({
                eventName: eventName,
                data: data
            });
            bc.close();
            return [2 /*return*/];
        });
    });
}
var getRendererEventListeners = function () {
    return rendererEventListeners;
};
/**
 * 兼容历史配置，追加对应name的值
 * @param props
 * @param data
 * @param valueKey
 */
var resolveEventData = function (props, data, valueKey) {
    var _a, _b;
    var _c, _d;
    if (valueKey === void 0) { valueKey = 'value'; }
    var proto = (_d = (_c = props.getData) === null || _c === void 0 ? void 0 : _c.call(props)) !== null && _d !== void 0 ? _d : props.data;
    return createObject(proto, props.name && valueKey
        ? __assign(__assign({}, data), (_a = {}, _a[props.name] = data[valueKey], _a.__rendererData = __assign(__assign({}, proto), (_b = {}, _b[props.name] = data[valueKey], _b)), _a)) : data);
};
/**
 * 基于 index、condition、oldCondition 获取匹配的事件目标
 * @param tree
 * @param ctx
 * @param index
 * @param condition
 * @param oldCondition
 * @returns
 */
function getMatchedEventTargets(tree, ctx, index, condition, oldCondition) {
    return __awaiter(this, void 0, void 0, function () {
        var targets, row, _a, promies_1, promies_2;
        var _this = this;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    targets = [];
                    if (!(typeof index === 'number')) return [3 /*break*/, 1];
                    row = tree[index];
                    row && targets.push(row);
                    return [3 /*break*/, 9];
                case 1:
                    if (!(typeof index === 'string')) return [3 /*break*/, 5];
                    if (!isExpression(index)) return [3 /*break*/, 3];
                    return [4 /*yield*/, resolveVariableAndFilterForAsync(index, ctx)];
                case 2:
                    _a = _b.sent();
                    return [3 /*break*/, 4];
                case 3:
                    _a = index;
                    _b.label = 4;
                case 4:
                    index = _a;
                    index.split(',').forEach(function (i) {
                        i = i.trim();
                        if (i) {
                            var indexes = i.split('.').map(function (ii) { return parseInt(ii, 10); });
                            var row = getTree(tree, indexes);
                            row && targets.push(row);
                        }
                    });
                    return [3 /*break*/, 9];
                case 5:
                    if (!condition) return [3 /*break*/, 7];
                    promies_1 = [];
                    eachTree(tree, function (item) {
                        var data = item.storeType ? item.data : item;
                        promies_1.push(function () { return __awaiter(_this, void 0, void 0, function () {
                            var result;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, evalExpressionWithConditionBuilderAsync(condition, createObject(ctx, data))];
                                    case 1:
                                        result = _a.sent();
                                        result && targets.push(item);
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                    });
                    return [4 /*yield*/, Promise.all(promies_1.map(function (fn) { return fn(); }))];
                case 6:
                    _b.sent();
                    return [3 /*break*/, 9];
                case 7:
                    if (!oldCondition) return [3 /*break*/, 9];
                    promies_2 = [];
                    eachTree(tree, function (item, rowIndex) {
                        var record = item.storeType ? item.data : item;
                        promies_2.push(function () { return __awaiter(_this, void 0, void 0, function () {
                            var result;
                            return __generator(this, function (_a) {
                                result = evalExpression(oldCondition, createObject(ctx, {
                                    record: record,
                                    rowIndex: rowIndex,
                                    item: record,
                                    index: rowIndex,
                                    indexPath: item.path
                                }));
                                result && targets.push(item);
                                return [2 /*return*/];
                            });
                        }); });
                    });
                    return [4 /*yield*/, Promise.all(promies_2.map(function (fn) { return fn(); }))];
                case 8:
                    _b.sent();
                    _b.label = 9;
                case 9: return [2 /*return*/, targets];
            }
        });
    });
}

export { bindEvent, bindGlobalEvent, bindGlobalEventForRenderer, createRendererEvent, dispatchEvent, dispatchGlobalEvent, dispatchGlobalEventForRenderer, getMatchedEventTargets, getRendererEventListeners, resolveEventData };
