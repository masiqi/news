/**
 * amis-core v6.13.0
 * Copyright 2018-2025 fex
 */

import { __read } from 'tslib';
import React, { useState, useMemo, useEffect, useCallback } from 'react';
import { CSSTransition } from 'react-transition-group';
import 'amis-formula';
import 'moment';
import 'lodash/isPlainObject';
import '../utils/memoryParse.js';
import '@rc-component/mini-decimal';
import '../utils/filter.js';
import '../utils/api.js';
import 'file-saver';
import '../utils/browser.js';
import '../utils/ColorScale.js';
import 'lodash/chunk';
import '../utils/DataSchema.js';
import '../utils/DataScope.js';
import '../utils/debug.js';
import 'react-dom';
import { formateId } from '../utils/helper.js';
import '../utils/errors.js';
import '../utils/tpl.js';
import 'lodash/isObject';
import 'lodash/isString';
import 'lodash/isBoolean';
import '../utils/image.js';
import 'lodash/isEqual';
import '../actions/Action.js';
import 'lodash/debounce';
import '../utils/resize-sensor.js';
import 'react-overlays/useRootClose';
import '../utils/SimpleMap.js';
import 'lodash/mapValues';
import 'lodash/camelCase';
import 'lodash/cloneDeep';
import 'lodash/map';
import 'lodash/isEmpty';
import 'lodash/kebabCase';
import 'uncontrollable';
import 'hoist-non-react-statics';
import '../utils/validations.js';
import '../utils/resolveCondition.js';
import 'mobx';
import '../utils/Animation.js';
import { createAnimationStyle } from '../utils/animations.js';
import styleManager from '../StyleManager.js';

function Animations(_a) {
    var schema = _a.schema, component = _a.component, show = _a.show;
    var enter = (schema.animations || {}).enter;
    var _b = __read(useState(!(enter === null || enter === void 0 ? void 0 : enter.inView)), 2), animationShow = _b[0], setAnimationShow = _b[1];
    var _c = __read(useState(!!(enter === null || enter === void 0 ? void 0 : enter.inView)), 2), placeholderShow = _c[0], setPlaceholderShow = _c[1];
    var id = useMemo(function () { return formateId(schema.id); }, []);
    var observer = useMemo(newObserver, []);
    var animationClassNames = useMemo(initAnimationClassNames, []);
    var animationTimeout = useMemo(initAnimationTimeout, []);
    useEffect(function () {
        createAnimationStyle(id, schema.animations);
        return function () {
            if (schema.animations) {
                styleManager.removeStyles(id);
            }
            observer.disconnect();
        };
    }, []);
    function newObserver() {
        return new IntersectionObserver(function (entries, observer) {
            entries.forEach(function (entry) {
                if (entry.target.getAttribute('data-role') === 'animation-placeholder') {
                    if (entry.isIntersecting) {
                        setAnimationShow(true);
                        setPlaceholderShow(false);
                        observer.unobserve(entry.target);
                    }
                }
                else {
                    if (!entry.isIntersecting) {
                        setAnimationShow(false);
                        observer.unobserve(entry.target);
                    }
                }
            });
        }, {
            root: null,
            rootMargin: '0px',
            threshold: 0.1
        });
    }
    function initAnimationClassNames() {
        var animations = schema === null || schema === void 0 ? void 0 : schema.animations;
        var animationClassNames = {
            appear: '',
            enter: '',
            exit: ''
        };
        if (animations) {
            if (animations.enter) {
                animationClassNames.enter = "".concat(animations.enter.type, "-").concat(id, "-enter");
                animationClassNames.appear = animationClassNames.enter;
            }
            if (animations.exit) {
                animationClassNames.exit = "".concat(animations.exit.type, "-").concat(id, "-exit");
            }
        }
        return animationClassNames;
    }
    function initAnimationTimeout() {
        var animations = schema === null || schema === void 0 ? void 0 : schema.animations;
        var animationTimeout = {
            enter: 0,
            exit: 0
        };
        if (animations) {
            if (animations.enter) {
                animationTimeout.enter =
                    ((animations.enter.duration || 1) + (animations.enter.delay || 0)) *
                        1000;
            }
            if (animations.exit) {
                animationTimeout.exit =
                    ((animations.exit.duration || 1) + (animations.exit.delay || 0)) *
                        1000;
            }
        }
        return animationTimeout;
    }
    function refFn(ref) {
        if (ref) {
            observer.observe(ref);
        }
    }
    var handleEntered = useCallback(function (node) {
        var _a = schema.animations || {}, attention = _a.attention, exit = _a.exit, enter = _a.enter, hover = _a.hover;
        if (attention) {
            node.classList.add("".concat(attention.type, "-").concat(id, "-attention"));
        }
        if (hover) {
            node.classList.add("".concat(hover.type, "-").concat(id, "-hover"));
            node.classList.add("amis-".concat(hover.type));
        }
        if ((exit === null || exit === void 0 ? void 0 : exit.outView) || (enter === null || enter === void 0 ? void 0 : enter.repeat)) {
            observer.observe(node);
        }
    }, []);
    var handleExit = useCallback(function (node) {
        var _a = schema.animations || {}, attention = _a.attention, hover = _a.hover;
        if (attention) {
            node.classList.remove("".concat(attention.type, "-").concat(id, "-attention"));
        }
        if (hover) {
            node.classList.remove("".concat(hover.type, "-").concat(id, "-hover"));
            node.classList.remove("amis-".concat(hover.type));
        }
    }, []);
    var handleExited = useCallback(function () {
        setPlaceholderShow(true);
    }, []);
    return (React.createElement(React.Fragment, null,
        !animationShow && show && placeholderShow && (React.createElement("div", { ref: refFn, className: "amis-animation-placeholder", "data-role": "animation-placeholder" }, component)),
        React.createElement(CSSTransition, { in: animationShow && show, timeout: animationTimeout, classNames: animationClassNames, onEntered: handleEntered, onExit: handleExit, onExited: handleExited, appear: true, unmountOnExit: true }, component)));
}

export { Animations as default };
