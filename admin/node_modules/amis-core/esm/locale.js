/**
 * amis-core v6.13.0
 * Copyright 2018-2025 fex
 */

import { __assign, __extends, __spreadArray, __read } from 'tslib';
import React from 'react';
import hoistNonReactStatic from 'hoist-non-react-statics';
import moment from 'moment';
import 'amis-formula';
import 'lodash/isPlainObject';
import { resolveVariable } from './utils/resolveVariable.js';
import './utils/memoryParse.js';
import '@rc-component/mini-decimal';
import './utils/filter.js';

var defaultLocale = 'zh-CN';
var momentLocaleMap = {
    'zh-CN': 'zh-cn',
    'en-US': 'en',
    'de-DE': 'de'
};
var locales = {};
function register(name, config) {
    // 修改为扩展，防止已注册的语料被覆盖
    extendLocale(name, config);
}
function extendLocale(name, config, cover) {
    if (cover === void 0) { cover = true; }
    if (cover) {
        // 覆盖式扩展语料
        locales[name] = __assign(__assign({}, (locales[name] || {})), config);
    }
    else {
        locales[name] = __assign(__assign({}, config), (locales[name] || {}));
    }
}
/** 删除语料数据 */
function removeLocaleData(name, key) {
    var _a;
    if (Array.isArray(key)) {
        key.forEach(function (item) {
            removeLocaleData(name, item);
        });
        return;
    }
    if ((_a = locales === null || locales === void 0 ? void 0 : locales[name]) === null || _a === void 0 ? void 0 : _a[key]) {
        delete locales[name][key];
    }
}
var fns = {};
function format(str, data) {
    if (!str.includes('{{'))
        return str; // 先快速检查，避免无谓的正则执行
    return str.replace(/(\\)?\{\{([^{}]+?)\}\}/g, function (_, escape, key) {
        if (escape) {
            return _.substring(1);
        }
        return resolveVariable(key, data || {});
    });
}
function makeTranslator(locale) {
    if (locale && fns[locale]) {
        return fns[locale];
    }
    var fn = function (str) {
        var _a, _b, _c;
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (!str || typeof str !== 'string') {
            return str;
        }
        var value = ((_a = locales[locale]) === null || _a === void 0 ? void 0 : _a[str]) ||
            ((_b = locales[defaultLocale]) === null || _b === void 0 ? void 0 : _b[str]) ||
            ((_c = locales['zh-CN']) === null || _c === void 0 ? void 0 : _c[str]) ||
            str;
        return format.apply(void 0, __spreadArray([value], __read(args), false));
    };
    locale && (fns[locale] = fn);
    return fn;
}
function getDefaultLocale() {
    return defaultLocale;
}
function setDefaultLocale(locale) {
    defaultLocale = locale;
}
var LocaleContext = React.createContext('');
function localeable(ComposedComponent, methods) {
    var _a;
    var result = hoistNonReactStatic((_a = /** @class */ (function (_super) {
            __extends(class_1, _super);
            function class_1(props) {
                var _this = _super.call(this, props) || this;
                _this.childRef = _this.childRef.bind(_this);
                _this.getWrappedInstance = _this.getWrappedInstance.bind(_this);
                return _this;
            }
            class_1.prototype.childRef = function (ref) {
                while (ref && ref.getWrappedInstance) {
                    ref = ref.getWrappedInstance();
                }
                this.ref = ref;
            };
            class_1.prototype.getWrappedInstance = function () {
                return this.ref;
            };
            class_1.prototype.render = function () {
                var _a, _b;
                var locale = this.props.locale || this.context || defaultLocale;
                var translate = this.props.translate || makeTranslator(locale);
                var injectedProps = {
                    locale: locale,
                    translate: translate
                };
                moment.locale((_a = momentLocaleMap === null || momentLocaleMap === void 0 ? void 0 : momentLocaleMap[locale]) !== null && _a !== void 0 ? _a : locale);
                var refConfig = ((_b = ComposedComponent.prototype) === null || _b === void 0 ? void 0 : _b.isReactComponent) ||
                    ComposedComponent.$$typeof ===
                        Symbol.for('react.forward_ref')
                    ? { ref: this.childRef }
                    : { forwardedRef: this.childRef };
                var body = (React.createElement(ComposedComponent, __assign({}, this.props, injectedProps, refConfig)));
                return this.context ? (body) : (React.createElement(LocaleContext.Provider, { value: locale }, body));
            };
            return class_1;
        }(React.Component)),
        _a.displayName = "I18N(".concat(ComposedComponent.displayName || ComposedComponent.name, ")"),
        _a.contextType = LocaleContext,
        _a.ComposedComponent = ComposedComponent,
        _a), ComposedComponent);
    if (Array.isArray(methods)) {
        methods.forEach(function (method) {
            if (ComposedComponent.prototype[method]) {
                result.prototype[method] = function () {
                    var _a;
                    var fn = (_a = this.ref) === null || _a === void 0 ? void 0 : _a[method];
                    return fn ? fn.apply(this.ref, arguments) : undefined;
                };
            }
        });
    }
    return result;
}

export { LocaleContext, extendLocale, format, getDefaultLocale, localeable, makeTranslator, register, removeLocaleData, setDefaultLocale };
