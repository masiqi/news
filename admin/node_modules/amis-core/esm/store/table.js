/**
 * amis-core v6.13.0
 * Copyright 2018-2025 fex
 */

import { __assign, __rest, __spreadArray, __read, __values } from 'tslib';
import { types, getParent, getEnv, isAlive } from 'mobx-state-tree';
import { iRendererStore } from './iRenderer.js';
import 'amis-formula';
import 'moment';
import { createObject, extendObject, isObject } from '../utils/object.js';
import { resolveVariableAndFilter } from '../utils/resolveVariableAndFilter.js';
import '../utils/memoryParse.js';
import '@rc-component/mini-decimal';
import { resolveVariable } from '../utils/resolveVariable.js';
import 'lodash/isPlainObject';
import '../utils/filter.js';
import isEqual from 'lodash/isEqual';
import sortBy from 'lodash/sortBy';
import { immutableExtends, flattenTree, findTree, eachTree, findTreeIndex, guid, isVisible, hasVisibleExpression, isBreakpoint, difference, sortArray } from '../utils/helper.js';
import { evalExpression, filter } from '../utils/tpl.js';
import { getStoreById } from './manager.js';
import { getPageId } from '../utils/getPageId.js';

/**
 * 内部列的数量 '__checkme' | '__dragme' | '__expandme'
 */
var PARTITION_INDEX = 3;
function initChildren(children, depth, pindex, parentId, path, getEntryId) {
    if (path === void 0) { path = ''; }
    depth += 1;
    return children.map(function (item, index) {
        var _a;
        item = isObject(item)
            ? item
            : {
                item: item
            };
        var id = String(getEntryId ? getEntryId(item, index) : (_a = item.__id) !== null && _a !== void 0 ? _a : guid());
        return {
            // id: String(item && (item as any)[self.primaryField] || `${pindex}-${depth}-${key}`),
            id: String(id),
            parentId: String(parentId),
            key: String("".concat(pindex, "-").concat(depth, "-").concat(index)),
            path: "".concat(path).concat(index),
            depth: depth,
            index: index,
            newIndex: index,
            pristine: item,
            data: item,
            defer: !!item.defer,
            loaded: false,
            loading: false,
            rowSpans: {},
            children: item && Array.isArray(item.children)
                ? initChildren(item.children, depth, index, id, "".concat(path).concat(index, "."), getEntryId)
                : []
        };
    });
}
var SELECTED_STATUS;
(function (SELECTED_STATUS) {
    SELECTED_STATUS[SELECTED_STATUS["ALL"] = 0] = "ALL";
    SELECTED_STATUS[SELECTED_STATUS["PARTIAL"] = 1] = "PARTIAL";
    SELECTED_STATUS[SELECTED_STATUS["NONE"] = 2] = "NONE";
})(SELECTED_STATUS || (SELECTED_STATUS = {}));
var Column = types
    .model('Column', {
    label: types.optional(types.frozen(), undefined),
    type: types.optional(types.string, 'plain'),
    name: types.maybe(types.string),
    value: types.frozen(),
    id: '',
    groupName: '',
    toggled: false,
    toggable: true,
    expandable: false,
    checkdisable: false,
    searchable: types.maybe(types.frozen()),
    enableSearch: true,
    sortable: false,
    filterable: types.optional(types.frozen(), undefined),
    fixed: '',
    index: 0,
    rawIndex: 0,
    width: 0,
    minWidth: 0,
    realWidth: 0,
    breakpoint: types.optional(types.frozen(), undefined),
    pristine: types.optional(types.frozen(), undefined),
    remark: types.optional(types.frozen(), undefined),
    className: types.union(types.string, types.frozen()),
    appeared: false
})
    .views(function (self) { return ({
    get isPrimary() {
        var _a;
        var table = getParent(self, 2);
        return (((_a = table.filteredColumns.find(function (column) { return !column.type.startsWith('__'); })) === null || _a === void 0 ? void 0 : _a.id) === self.id);
    },
    get columnKey() {
        return self.pristine.uid || self.name || self.label || self.rawIndex;
    }
}); })
    .actions(function (self) { return ({
    toggleToggle: function (min) {
        if (min === void 0) { min = 1; }
        self.toggled = !self.toggled;
        var table = getParent(self, 2);
        if (table.activeToggaleColumns.length < min) {
            self.toggled = true;
        }
        table.persistSaveToggledColumns();
    },
    setToggled: function (value) {
        self.toggled = value;
    },
    setEnableSearch: function (value, skipSave) {
        if (skipSave === void 0) { skipSave = false; }
        self.enableSearch = value;
        if (!skipSave) {
            var table = getParent(self, 2);
            table.persistSaveToggledColumns();
        }
    },
    setMinWidth: function (value) {
        self.minWidth = value;
    },
    setWidth: function (value) {
        self.width = value;
    },
    setRealWidth: function (value) {
        self.realWidth = value;
    },
    markAppeared: function (value) {
        self.appeared = self.appeared || value;
    }
}); });
var Row = types
    .model('Row', {
    storeType: 'Row',
    id: types.identifier,
    parentId: '',
    key: types.string,
    pristine: types.frozen({}),
    data: types.frozen({}),
    rowSpans: types.frozen({}),
    index: types.number,
    newIndex: types.number,
    path: '',
    checkdisable: false,
    isHover: false,
    children: types.optional(types.array(types.late(function () { return Row; })), []),
    defer: false,
    loaded: false,
    loading: false,
    error: '',
    depth: types.number // 当前children位于第几层，便于使用getParent获取最顶层TableStore
    // appeared: true,
    // lazyRender: false
})
    .views(function (self) { return ({
    get parent() {
        return getParent(self, 2);
    },
    get table() {
        return getParent(self, self.depth * 2);
    },
    get expandable() {
        var table;
        return !!((self && self.children.length) ||
            (self && self.defer && !self.loaded) ||
            ((table = getParent(self, self.depth * 2)) &&
                table.footable &&
                table.footableColumns.length));
    },
    childrenSelected: function () {
        var _a = self, children = _a.children, table = _a.table;
        var selectedLength = children.filter(function (child) {
            return table.isSelected(child);
        }).length;
        if (!selectedLength) {
            return SELECTED_STATUS.NONE;
        }
        if (selectedLength === children.length) {
            return SELECTED_STATUS.ALL;
        }
        return SELECTED_STATUS.PARTIAL;
    },
    get partial() {
        var childrenSelected = this.childrenSelected() === SELECTED_STATUS.PARTIAL;
        var childrenPartial = self.children.some(function (child) { return child.partial; });
        return childrenSelected || childrenPartial;
    },
    get checked() {
        return getParent(self, self.depth * 2).isSelected(self);
    },
    get modified() {
        if (!self.data) {
            return false;
        }
        return Object.keys(self.data).some(function (key) { return !isEqual(self.data[key], self.pristine[key]); });
    },
    getDataWithModifiedChilden: function () {
        var data = self.data;
        if (data.children && self.children) {
            data = __assign(__assign({}, data), { children: self.children.map(function (item) { return item.getDataWithModifiedChilden(); }) });
        }
        return data;
    },
    get collapsed() {
        var table = getParent(self, self.depth * 2);
        if (table.dragging) {
            return true;
        }
        var from = self;
        while (from && from !== table) {
            if (!table.isExpanded(from)) {
                return true;
            }
            from = getParent(from, 2);
        }
        return false;
    },
    get expanded() {
        return !this.collapsed;
    },
    get moved() {
        return self.index !== self.newIndex;
    },
    get locals() {
        var children = null;
        if (self.children.length) {
            children = self.children.map(function (item) { return item.locals; });
        }
        var table = getParent(self, self.depth * 2);
        var parent = getParent(self, 2);
        return createObject(extendObject(getParent(self, self.depth * 2).data, __assign({ index: self.index, path: self.path, 
            // todo 以后再支持多层，目前先一层
            parent: parent.storeType === Row.name ? parent.data : undefined }, table.eventContext)), children
            ? __assign(__assign({}, self.data), { children: children }) : self.data);
    },
    get checkable() {
        var table = getParent(self, self.depth * 2);
        return table && table.itemCheckableOn
            ? evalExpression(table.itemCheckableOn, self.locals)
            : true;
    },
    get draggable() {
        var table = getParent(self, self.depth * 2);
        return table && table.itemDraggableOn
            ? evalExpression(table.itemDraggableOn, self.locals)
            : true;
    },
    /**
     * 判断当前行点击后是否应该继续触发check
     * 用于限制checkOnItemClick触发的check事件
     */
    get isCheckAvaiableOnClick() {
        var _a;
        var table = getParent(self, self.depth * 2);
        var selectionUpperLimit = table.getSelectionUpperLimit();
        // 如果未做配置，或者配置不合法直接通过检查
        if (!Number.isInteger(selectionUpperLimit) ||
            selectionUpperLimit === Infinity) {
            return true;
        }
        // 使用内置ID，不会重复
        var selectedIds = ((_a = table === null || table === void 0 ? void 0 : table.selectedRows) !== null && _a !== void 0 ? _a : []).map(function (item) { return item.id; });
        // 此时syncSelected还没有触发，所以需要比较点击之后的数量
        var selectedCount = selectedIds.includes(self.id)
            ? selectedIds.length - 1
            : selectedIds.length + 1;
        if (selectedCount > selectionUpperLimit) {
            return false;
        }
        return true;
    },
    get indentStyle() {
        return {
            paddingLeft: "calc(".concat(self.depth - 1, " * var(--Table-tree-indent))")
        };
    }
}); })
    .actions(function (self) { return ({
    toggle: function (checked) {
        var table = self.table;
        var row = self;
        table.toggle(row, checked);
        // 多选才需要处理祖先和后代
        // 单选只处理自己就行了
        if (table.multiple) {
            table.toggleAncestors(row);
            table.toggleDescendants(row, checked);
        }
    },
    toggleExpanded: function () {
        getParent(self, self.depth * 2).toggleExpanded(self);
    },
    setExpanded: function (expanded) {
        getParent(self, self.depth * 2).setExpanded(self, expanded);
    },
    change: function (values, savePristine) {
        var data = immutableExtends(self.data, values);
        Object.isExtensible(data) &&
            !data.__pristine &&
            Object.defineProperty(data, '__pristine', {
                value: savePristine ? data : self.pristine,
                enumerable: false,
                configurable: false,
                writable: false
            });
        self.data = data;
        savePristine && (self.pristine = data);
    },
    reset: function () {
        self.newIndex = self.index;
        self.data = self.pristine;
    },
    setCheckdisable: function (bool) {
        self.checkdisable = bool;
    },
    setIsHover: function (value) {
        self.isHover = value;
    },
    replaceWith: function (data) {
        Object.keys(data).forEach(function (key) {
            if (key !== 'id') {
                self[key] = data[key];
            }
        });
        if (Array.isArray(data.children)) {
            this.replaceChildren(data.children);
        }
    },
    replaceChildren: function (children) {
        var arr = children;
        var pool = arr.concat();
        // 把多的删了先
        if (self.children.length > arr.length) {
            self.children.splice(arr.length, self.children.length - arr.length);
        }
        var index = 0;
        var len = self.children.length;
        while (pool.length) {
            // 因为父级id未更新，所以需要将子级的parentId正确指向父级id
            var item = __assign(__assign({}, pool.shift()), { parentId: self.id });
            if (index < len) {
                self.children[index].replaceWith(item);
            }
            else {
                var row = Row.create(item);
                self.children.push(row);
            }
            index++;
        }
    },
    // markAppeared(value: any) {
    //   value && (self.appeared = !!value);
    // },
    markLoading: function (value) {
        self.loading = !!value;
    },
    markLoaded: function (value) {
        self.loaded = !!value;
    },
    setError: function (value) {
        self.error = String(value);
    },
    resetDefered: function () {
        self.error = '';
        self.loaded = false;
    },
    updateData: function (_a) {
        var children = _a.children, rest = __rest(_a, ["children"]);
        var data = __assign(__assign({}, self.data), rest);
        Object.isExtensible(data) &&
            !data.__pristine &&
            Object.defineProperty(data, '__pristine', {
                value: self.data.__pristine || self.pristine,
                enumerable: false,
                configurable: false,
                writable: false
            });
        self.data = data;
        if (Array.isArray(children)) {
            this.replaceChildren(initChildren(children, self.depth, self.index, self.id, "".concat(self.path, ".")));
        }
    }
}); });
var TableStore = iRendererStore
    .named('TableStore')
    .props({
    columns: types.array(Column),
    rows: types.array(Row),
    // 记录原始列表和原始选中的列表
    // 因为如果是前端分页，上层 crud 或者 input-table 下发到这层的
    // 是某个页区间的数据，这个时候 items 和 selectedItems 会少很多条
    fullItems: types.optional(types.array(types.frozen()), []),
    fullSelectedItems: types.optional(types.array(types.frozen()), []),
    selectedRows: types.array(types.reference(Row)),
    expandedRows: types.array(types.string),
    primaryField: 'id',
    orderBy: '',
    orderDir: types.optional(types.union(types.literal('asc'), types.literal('desc'), types.literal('')), 'asc'),
    loading: false,
    canAccessSuperData: false,
    draggable: false,
    dragging: false,
    selectable: false,
    showIndex: false,
    multiple: true,
    footable: types.frozen(),
    expandConfig: types.frozen(),
    isNested: false,
    columnsTogglable: types.optional(types.union(types.boolean, types.literal('auto')), 'auto'),
    itemCheckableOn: '',
    itemDraggableOn: '',
    hideCheckToggler: false,
    combineNum: 0,
    combineFromIndex: 0,
    formsRef: types.optional(types.array(types.frozen()), []),
    maxKeepItemSelectionLength: Infinity,
    keepItemSelectionOnPageChange: false,
    maxItemSelectionLength: Infinity,
    // 导出 Excel 按钮的 loading 状态
    exportExcelLoading: false,
    searchFormExpanded: false,
    lazyRenderAfter: 100,
    tableLayout: 'auto',
    theadHeight: 0,
    persistKey: ''
})
    .views(function (self) {
    function getColumnsExceptBuiltinTypes() {
        return self.columns.filter(function (item) {
            /** 排除掉内置的列和不可见的列 */
            return !/^__/.test(item.type) &&
                isVisible(item.pristine, hasVisibleExpression(item.pristine) ? self.data : {});
        });
    }
    function getForms() {
        return self.formsRef.map(function (item) { return ({
            store: getStoreById(item.id),
            rowIndex: item.rowIndex
        }); });
    }
    function getExportedColumns() {
        return self.columns.filter(function (item) {
            return (item &&
                isVisible(item.pristine, hasVisibleExpression(item.pristine) ? self.data : {}) &&
                (item.toggled || !item.toggable) &&
                !/^__/.test(item.type));
        });
    }
    function getFilteredColumns() {
        return self.columns.filter(function (item) {
            return item &&
                isVisible(item.pristine, hasVisibleExpression(item.pristine) ? self.data : {}) &&
                (item.type === '__checkme'
                    ? self.selectable &&
                        !self.dragging &&
                        !self.hideCheckToggler &&
                        self.rows.length
                    : item.type === '__dragme'
                        ? self.dragging
                        : item.type === '__expandme'
                            ? getFootableColumns().length && !self.dragging
                            : (item.toggled || !item.toggable) &&
                                (!self.footable ||
                                    !item.breakpoint ||
                                    !isBreakpoint(item.breakpoint)));
        });
    }
    function getFootableColumns() {
        return self.columns.filter(function (item) {
            return item.type === '__checkme' ||
                item.type === '__dragme' ||
                item.type === '__expandme'
                ? false
                : (item.toggled || !item.toggable) &&
                    self.footable &&
                    item.breakpoint &&
                    isBreakpoint(item.breakpoint);
        });
    }
    function isSelected(row) {
        return !!~self.selectedRows.indexOf(row);
    }
    function isExpanded(row) {
        return self.expandedRows.includes(row.id);
    }
    function getTogglable() {
        if (self.columnsTogglable === 'auto') {
            return self.columns.filter(function (item) { return !/^__/.test(item.type); }).length > 5;
        }
        return self.columnsTogglable;
    }
    function getToggableColumns() {
        return self.columns.filter(function (item) { return isVisible(item.pristine, self.data) && item.toggable !== false; });
    }
    function getActiveToggableColumns() {
        return getToggableColumns().filter(function (item) { return item.toggled; });
    }
    function getModifiedRows(rows, modifiedRows) {
        if (rows === void 0) { rows = []; }
        if (modifiedRows === void 0) { modifiedRows = []; }
        rows = rows && rows.length ? rows : self.rows;
        rows.forEach(function (item) {
            if (item.children && item.children.length) {
                getModifiedRows(item.children, modifiedRows);
            }
            var diff = difference(item.data, item.pristine);
            var hasDifference = Object.keys(diff).length;
            if (hasDifference) {
                modifiedRows.push(item);
            }
        });
        return modifiedRows;
    }
    function getModified() {
        return getModifiedRows().length;
    }
    function getMovedRows() {
        return flattenTree(self.rows).filter(function (item) { return item.moved; });
    }
    function getMoved() {
        return getMovedRows().length;
    }
    function getHovedRow() {
        return flattenTree(self.rows).find(function (item) { return item.isHover; });
    }
    function getUnSelectedRows() {
        return flattenTree(self.rows).filter(function (item) { return !item.checked; });
    }
    function hasColumnHidden() {
        return self.columns.findIndex(function (column) { return !column.toggled; }) !== -1;
    }
    function getColumnGroup() {
        var columns = getFilteredColumns();
        var len = columns.length;
        if (!len) {
            return [];
        }
        var groups = [
            {
                label: columns[0].groupName,
                colSpan: 1,
                rowSpan: 1,
                index: columns[0].index,
                has: [columns[0]]
            }
        ];
        // 用户是否启用了 groupName
        var hasGroupName = columns.some(function (column) { return column.groupName; });
        for (var i = 1; i < len; i++) {
            var prev = groups[groups.length - 1];
            var current = columns[i];
            var groupNameIsSame = current.groupName === prev.label ||
                resolveVariableAndFilter(current.groupName, self.data) ===
                    resolveVariableAndFilter(prev.label, self.data);
            if (groupNameIsSame &&
                ((hasGroupName && current.groupName) || !hasGroupName)) {
                prev.colSpan++;
                prev.has.push(current);
            }
            else {
                groups.push({
                    /**
                     * 如果中间没有配置groupName，那么样式会错乱，这里设置列的label配置，lable也没有则设置一个空字符串
                     * 注：内部列需要设置为undefined，保证rowSpan在下面计算为2
                     */
                    label: !!~['__checkme', '__expandme'].indexOf(current.type)
                        ? undefined
                        : current.groupName || current.label || ' ',
                    colSpan: 1,
                    rowSpan: 1,
                    index: current.index,
                    has: [current]
                });
            }
        }
        if (groups.length === 1 && !groups[0].label) {
            groups.pop();
        }
        return groups.map(function (item) {
            var rowSpan = !item.label ||
                (item.has.length === 1 && item.label === item.has[0].label)
                ? 2
                : 1;
            return __assign(__assign({}, item), { rowSpan: rowSpan, label: rowSpan === 2 ? item.label || item.has[0].label : item.label, fixed: item.has.every(function (column) { return column.fixed; })
                    ? item.has[0].fixed
                    : undefined, get width() {
                    return item.has.reduce(function (a, b) { return a + b.width; }, 0);
                } });
        });
    }
    function getFirstToggledColumnIndex() {
        var column = self.columns.find(function (column) { return !/^__/.test(column.type) && column.toggled; });
        return column == null ? null : column.index;
    }
    function getSearchableColumns() {
        return self.columns.filter(function (column) { return column.searchable; });
    }
    function getSelectionUpperLimit() {
        var keep = self.keepItemSelectionOnPageChange;
        var selectionUpperLimit = keep
            ? self.maxKeepItemSelectionLength !== Infinity
                ? self.maxKeepItemSelectionLength
                : self.maxItemSelectionLength
            : self.maxItemSelectionLength;
        return selectionUpperLimit;
    }
    return {
        get __() {
            return getEnv(self).translate;
        },
        getSelectionUpperLimit: getSelectionUpperLimit,
        get columnsKey() {
            if (self.persistKey) {
                return filter(self.persistKey, self.data);
            }
            var fn = getEnv(self).getPageId || getPageId;
            return fn() + self.path;
        },
        get columnsData() {
            return getColumnsExceptBuiltinTypes();
        },
        get forms() {
            return getForms();
        },
        get searchableColumns() {
            return getSearchableColumns();
        },
        get activedSearchableColumns() {
            return getSearchableColumns().filter(function (column) { return column.enableSearch; });
        },
        /** 导出excel列（包含breakpoint列） */
        get exportColumns() {
            return getExportedColumns();
        },
        get filteredColumns() {
            return getFilteredColumns();
        },
        get footableColumns() {
            return getFootableColumns();
        },
        get toggableColumns() {
            return getToggableColumns();
        },
        get activeToggaleColumns() {
            return getActiveToggableColumns();
        },
        get someChecked() {
            return !!self.selectedRows.length;
        },
        get allChecked() {
            var selectionUpperLimit = getSelectionUpperLimit();
            if (selectionUpperLimit !== Infinity) {
                return self.isSelectionThresholdReached;
            }
            // 只要selectedRows中包含checkableRows中的全部数据，就认为是全选
            return self.checkableRows.every(function (item) {
                return self.selectedRows.includes(item);
            });
        },
        isSelected: isSelected,
        get allExpanded() {
            return !!(self.expandedRows.length === this.expandableRows.length &&
                this.expandableRows.length);
        },
        isExpanded: isExpanded,
        get toggable() {
            return getTogglable();
        },
        get modified() {
            return getModified();
        },
        get modifiedRows() {
            return getModifiedRows();
        },
        get unSelectedRows() {
            return getUnSelectedRows();
        },
        get falttenedRows() {
            return flattenTree(self.rows);
        },
        get checkableRows() {
            return this.falttenedRows.filter(function (item) { return item.checkable; });
        },
        get expandableRows() {
            return self.rows.filter(function (item) { return item.expandable; });
        },
        get moved() {
            return getMoved();
        },
        get movedRows() {
            return getMovedRows();
        },
        get hoverRow() {
            return getHovedRow();
        },
        /** 已选择item是否达到数量上限 */
        get isSelectionThresholdReached() {
            var _a, _b;
            var selectedLength = (_b = (_a = self.data) === null || _a === void 0 ? void 0 : _a.selectedItems) === null || _b === void 0 ? void 0 : _b.length;
            var maxLength = getSelectionUpperLimit();
            if (!self.data || maxLength === Infinity) {
                return false;
            }
            return maxLength <= selectedLength;
        },
        get firstToggledColumnIndex() {
            return getFirstToggledColumnIndex();
        },
        getData: function (superData) {
            return createObject(superData, this.eventContext);
        },
        get columnGroup() {
            return getColumnGroup();
        },
        getRowById: function (id) {
            return findTree(self.rows, function (item) { return item.id === id; });
        },
        getItemsByName: function (name) {
            return this.forms
                .filter(function (form) { return form.rowIndex === parseInt(name, 10); })
                .map(function (item) { return item.store; });
        },
        // 是否隐藏了某列
        hasColumnHidden: function () {
            return hasColumnHidden();
        },
        getExpandedRows: function () {
            var list = [];
            eachTree(self.rows, function (i) {
                if (self.expandedRows.includes(i.id)) {
                    list.push(i);
                }
            });
            return list;
        },
        get columnWidthReady() {
            return getFilteredColumns().every(function (column) { return column.realWidth; });
        },
        getStickyStyles: function (column, columns, colSpan) {
            if (colSpan === void 0) { colSpan = 1; }
            var stickyClassName = '';
            var style = {};
            var autoFixLeftColumns = ['__checkme', '__dragme', '__expandme'];
            if (column.fixed === 'left' ||
                autoFixLeftColumns.includes(column.type)) {
                stickyClassName = 'is-sticky is-sticky-left';
                var index = columns.indexOf(column) - 1;
                if (columns
                    .slice(index + (colSpan - 1) + 2)
                    .every(function (col) {
                    return !((col && col.fixed === 'left') ||
                        autoFixLeftColumns.includes(col.type));
                })) {
                    stickyClassName += ' is-sticky-last-left';
                }
                var left = [];
                while (index >= 0) {
                    var col = columns[index];
                    if ((col && col.fixed === 'left') ||
                        autoFixLeftColumns.includes(col.type)) {
                        left.push("var(--Table-column-".concat(col.index, "-width)"));
                    }
                    index--;
                }
                style.left = left.length
                    ? left.length === 1
                        ? left[0]
                        : "calc(".concat(left.join(' + '), ")")
                    : 0;
            }
            else if (column.fixed === 'right') {
                stickyClassName = 'is-sticky is-sticky-right';
                var right = [];
                var index = columns.indexOf(column) + 1;
                if (columns.slice(0, index - 1).every(function (col) { return col.fixed !== 'right'; })) {
                    stickyClassName += ' is-sticky-first-right';
                }
                var len = columns.length;
                while (index < len) {
                    var col = columns[index];
                    if (col && col.fixed === 'right') {
                        right.push("var(--Table-column-".concat(col.index, "-width)"));
                    }
                    index++;
                }
                style.right = right.length
                    ? right.length === 1
                        ? right[0]
                        : "calc(".concat(right.join(' + '), ")")
                    : 0;
            }
            return [style, stickyClassName];
        },
        get items() {
            return self.rows.concat();
        },
        buildStyles: function (style) {
            style = __assign(__assign({}, style), { '--Table-thead-height': self.theadHeight + 'px' });
            getFilteredColumns().forEach(function (column) {
                style["--Table-column-".concat(column.index, "-width")] =
                    column.realWidth + 'px';
            });
            return style;
        },
        /**
         * 构建事件的上下文数据
         * @param buildChain
         * @returns
         */
        get eventContext() {
            var context = {
                selectedItems: self.selectedRows.map(function (item) { return item.data; }),
                selectedIndexes: self.selectedRows.map(function (item) { return item.path; }),
                items: self.rows.map(function (item) { return item.data; }),
                unSelectedItems: this.unSelectedRows.map(function (item) { return item.data; })
            };
            // 如果是前端分页情况，需要根据全量数据计算
            // 如果不是前端分页，数据都没有返回，那种就没办法支持全量数据信息了
            if (self.fullItems.length > self.rows.length) {
                // todo 这里的选择顺序会一直变，这个有影响吗?
                var selectedItems_1 = self.fullSelectedItems
                    .filter(function (item) {
                    return !self.rows.find(function (row) { return row.pristine === (item.__pristine || item); });
                })
                    .concat(context.selectedItems);
                context.selectedItems = selectedItems_1;
                context.items = self.fullItems.concat();
                context.unSelectedItems = self.fullItems.filter(function (item) { return !selectedItems_1.includes(item); });
                context.selectedIndexes = selectedItems_1.map(function (item) {
                    var _a;
                    return ((_a = findTreeIndex(self.fullItems, function (i) { return (item.__pristine || item) === (i.__pristine || i); })) === null || _a === void 0 ? void 0 : _a.join('.')) || '-1';
                });
            }
            return context;
        }
    };
})
    .actions(function (self) {
    var tableRef = null;
    function setTable(ref) {
        tableRef = ref;
    }
    function getTable() {
        return tableRef;
    }
    function update(config, options) {
        var _a;
        config.primaryField !== undefined &&
            (self.primaryField = config.primaryField);
        config.selectable !== undefined && (self.selectable = config.selectable);
        config.columnsTogglable !== undefined &&
            (self.columnsTogglable = config.columnsTogglable);
        config.draggable !== undefined && (self.draggable = config.draggable);
        if (typeof config.orderBy === 'string' ||
            typeof config.orderDir === 'string') {
            setOrderByInfo((_a = config.orderBy) !== null && _a !== void 0 ? _a : self.orderBy, config.orderDir !== undefined
                ? config.orderDir === 'desc'
                    ? 'desc'
                    : 'asc'
                : self.orderDir);
        }
        config.multiple !== undefined && (self.multiple = config.multiple);
        config.footable !== undefined && (self.footable = config.footable);
        config.expandConfig !== undefined &&
            (self.expandConfig = config.expandConfig);
        config.itemCheckableOn !== undefined &&
            (self.itemCheckableOn = config.itemCheckableOn);
        config.itemDraggableOn !== undefined &&
            (self.itemDraggableOn = config.itemDraggableOn);
        config.hideCheckToggler !== undefined &&
            (self.hideCheckToggler = !!config.hideCheckToggler);
        config.combineNum !== undefined &&
            (self.combineNum = parseInt(config.combineNum, 10) || 0);
        config.combineFromIndex !== undefined &&
            (self.combineFromIndex =
                parseInt(config.combineFromIndex, 10) || 0);
        config.maxKeepItemSelectionLength !== undefined &&
            (self.maxKeepItemSelectionLength = config.maxKeepItemSelectionLength);
        config.keepItemSelectionOnPageChange !== undefined &&
            (self.keepItemSelectionOnPageChange =
                config.keepItemSelectionOnPageChange);
        config.maxItemSelectionLength !== undefined &&
            (self.maxItemSelectionLength = config.maxItemSelectionLength);
        config.exportExcelLoading !== undefined &&
            (self.exportExcelLoading = config.exportExcelLoading);
        config.loading !== undefined && (self.loading = config.loading);
        config.canAccessSuperData !== undefined &&
            (self.canAccessSuperData = !!config.canAccessSuperData);
        typeof config.lazyRenderAfter === 'number' &&
            (self.lazyRenderAfter = config.lazyRenderAfter);
        typeof config.tableLayout === 'string' &&
            (self.tableLayout = config.tableLayout);
        config.showIndex !== undefined && (self.showIndex = config.showIndex);
        config.persistKey !== undefined && (self.persistKey = config.persistKey);
        if (config.columns && Array.isArray(config.columns)) {
            var columns = config.columns
                .map(function (column) {
                if ((options === null || options === void 0 ? void 0 : options.resolveDefinitions) &&
                    typeof (column === null || column === void 0 ? void 0 : column.$ref) == 'string' &&
                    column.$ref) {
                    return __assign(__assign({}, options.resolveDefinitions(column.$ref)), column);
                }
                return column;
            })
                .filter(function (column) { return column; });
            // 更新列顺序，afterCreate生命周期中更新columns不会触发组件的render
            var key = self.columnsKey;
            var data = localStorage.getItem(key);
            var tableMetaData = null;
            if (data) {
                try {
                    tableMetaData = JSON.parse(data);
                }
                catch (error) { }
                var order_1 = tableMetaData === null || tableMetaData === void 0 ? void 0 : tableMetaData.columnOrder;
                if (Array.isArray(order_1) && order_1.length != 0) {
                    columns = sortBy(columns, function (item, index) {
                        var columnKey = item.uid || item.name || item.label || index;
                        var idx = order_1.indexOf(columnKey);
                        return idx === -1 ? Number.MAX_SAFE_INTEGER : idx;
                    });
                }
            }
            updateColumns(columns);
        }
    }
    function updateColumns(columns) {
        if (columns && Array.isArray(columns)) {
            columns = columns.filter(function (column) { return column; }).concat();
            if (!columns.length) {
                columns.push({
                    type: 'text',
                    label: '空'
                });
            }
            if (self.showIndex && !columns.some(function (item) { return item.type === '__index'; })) {
                columns.unshift({
                    type: '__index',
                    label: self.__('Table.index'),
                    width: 50
                });
            }
            columns.some(function (item) { return item.type === '__expandme'; }) ||
                columns.unshift({
                    type: '__expandme',
                    toggable: false,
                    className: 'Table-expandCell'
                });
            columns.some(function (item) { return item.type === '__checkme'; }) ||
                columns.unshift({
                    type: '__checkme',
                    fixed: 'left',
                    toggable: false,
                    className: 'Table-checkCell'
                });
            columns.some(function (item) { return item.type === '__dragme'; }) ||
                columns.unshift({
                    type: '__dragme',
                    toggable: false,
                    className: 'Table-dragCell'
                });
            var originColumns_1 = self.columns.concat();
            var ids_1 = [];
            columns = columns.map(function (item, index) {
                var origin = item.id
                    ? originColumns_1.find(function (column) { return column.pristine.id === item.id; })
                    : originColumns_1[index];
                var id = (origin === null || origin === void 0 ? void 0 : origin.id) || guid();
                // 还不知道为何会出现这个，先用这种方式避免 id 重复
                if (ids_1.includes(id)) {
                    id = guid();
                }
                ids_1.push(id);
                return __assign(__assign({}, item), { id: id, index: index, width: (origin === null || origin === void 0 ? void 0 : origin.width) || 0, minWidth: (origin === null || origin === void 0 ? void 0 : origin.minWidth) || 0, realWidth: (origin === null || origin === void 0 ? void 0 : origin.realWidth) || 0, rawIndex: index - PARTITION_INDEX, type: item.type || 'plain', pristine: item.pristine || item, toggled: item.toggled !== false, breakpoint: item.breakpoint, isPrimary: index === PARTITION_INDEX });
            });
            self.columns.replace(columns);
        }
    }
    function initTableWidth() {
        var table = tableRef;
        if (!table) {
            return;
        }
        var tableWidth = table.parentElement.offsetWidth;
        var thead = table.querySelector(':scope>thead');
        var tbody = null;
        var htmls = [];
        var isFixed = self.tableLayout === 'fixed';
        var someSettedWidth = self.columns.some(function (column) { return column.pristine.width; });
        var minWidths = {};
        // fixed 模式需要参考 auto 获得列最小宽度
        if (isFixed) {
            tbody = table.querySelector(':scope>tbody');
            htmls.push("<table style=\"table-layout:auto!important;width:0!important;min-width:0!important;\" class=\"".concat(table.className, "\">").concat(thead.outerHTML, "</table>"));
        }
        if (someSettedWidth || isFixed) {
            htmls.push("<table style=\"table-layout:auto!important;min-width:".concat(tableWidth, "px!important;width:").concat(tableWidth, "px!important;\" class=\"").concat(table.className.replace('is-layout-fixed', ''), "\">").concat(thead.outerHTML).concat(tbody ? "<tbody>".concat(tbody.innerHTML, "</tbody>") : '', "</table>"));
        }
        if (!htmls.length) {
            return;
        }
        var div = document.createElement('div');
        div.className = 'amis-scope'; // jssdk 里面 css 会在这一层
        div.style.cssText += "visibility: hidden!important;";
        div.innerHTML = htmls.join('');
        var ths1 = [];
        var ths2 = [];
        if (isFixed) {
            ths1 = [].slice.call(div.querySelectorAll(':scope>table:first-child>thead>tr>th[data-index]'));
        }
        if (someSettedWidth || isFixed) {
            ths2 = [].slice.call(div.querySelectorAll(':scope>table:last-child>thead>tr>th[data-index]'));
        }
        ths1.forEach(function (th) {
            th.style.cssText += 'width: 0';
        });
        ths2.forEach(function (th) {
            var index = parseInt(th.getAttribute('data-index'), 10);
            var column = self.columns[index];
            th.style.cssText += "".concat(typeof column.pristine.width === 'number'
                ? "width: ".concat(column.pristine.width, "px;")
                : column.pristine.width
                    ? "width: ".concat(column.pristine.width, ";min-width: ").concat(column.pristine.width, ";")
                    : '' // todo 可能需要让修改过列宽的保持相应宽度，目前这样相当于重置了
            );
        });
        document.body.appendChild(div);
        ths1.forEach(function (th) {
            var index = parseInt(th.getAttribute('data-index'), 10);
            minWidths[index] = th.clientWidth;
            var column = self.columns[index];
            column.setMinWidth(minWidths[index]);
        });
        ths2.forEach(function (col) {
            var index = parseInt(col.getAttribute('data-index'), 10);
            var column = self.columns[index];
            if (column.pristine.width || isFixed) {
                column.setWidth(Math.max(typeof column.pristine.width === 'number'
                    ? column.pristine.width
                    : col.clientWidth, minWidths[index] || 0));
            }
        });
        document.body.removeChild(div);
    }
    function syncTableWidth(setWidth) {
        if (setWidth === void 0) { setWidth = false; }
        var table = tableRef;
        if (!table) {
            return;
        }
        var thead = table.querySelector(':scope>thead');
        var cols = [].slice.call(thead.querySelectorAll('tr>th[data-index]'));
        self.theadHeight = thead.offsetHeight;
        cols.forEach(function (col) {
            var index = parseInt(col.getAttribute('data-index'), 10);
            var column = self.columns[index];
            var realWidth = col.getBoundingClientRect().width;
            column.setRealWidth(realWidth);
            setWidth && column.setWidth(realWidth);
        });
    }
    function combineCell(arr, keys) {
        if (!keys.length || !arr.length) {
            return arr;
        }
        var key = keys.shift();
        var rowIndex = 0;
        var row = arr[rowIndex];
        row.rowSpans[key] = 1;
        var value = resolveVariable(key, row.data);
        for (var i = 1, len = arr.length; i < len; i++) {
            var current = arr[i];
            if (isEqual(resolveVariable(key, current.data), value)) {
                row.rowSpans[key] += 1;
                current.rowSpans[key] = 0;
            }
            else {
                if (row.rowSpans[key] > 1) {
                    combineCell(arr.slice(rowIndex, i), keys.concat());
                }
                rowIndex = i;
                row = current;
                row.rowSpans[key] = 1;
                value = resolveVariable(key, row.data);
            }
        }
        if (row.rowSpans[key] > 1 && keys.length) {
            combineCell(arr.slice(rowIndex, arr.length), keys.concat());
        }
        return arr;
    }
    function autoCombineCell(arr, columns, maxCount, fromIndex) {
        if (fromIndex === void 0) { fromIndex = 0; }
        if (!columns.length || !maxCount || !arr.length) {
            return arr;
        }
        // 如果是嵌套模式，通常第一列都是存在差异的，所以从第二列开始。
        fromIndex =
            fromIndex ||
                (arr.some(function (item) { return Array.isArray(item.children) && item.children.length; })
                    ? 1
                    : 0);
        var keys = [];
        for (var i = 0; i < columns.length; i++) {
            if (keys.length === maxCount) {
                break;
            }
            var column = columns[i];
            if ('__' === column.type.substring(0, 2)) {
                continue;
            }
            var key = column.name;
            if (!key) {
                break;
            }
            if (fromIndex > 0) {
                fromIndex--;
            }
            else {
                keys.push(key);
            }
        }
        return combineCell(arr, keys);
    }
    function initRows(rows, getEntryId, reUseRow, fullItems, fullSelectedItems) {
        self.selectedRows.clear();
        // self.expandedRows.clear();
        /* 避免输入内容为非数组挂掉 */
        rows = !Array.isArray(rows) ? [] : rows;
        var arr = rows.map(function (item, index) {
            var _a;
            if (!isObject(item)) {
                item = {
                    item: item
                };
            }
            var id = String(getEntryId ? getEntryId(item, index) : (_a = item.__id) !== null && _a !== void 0 ? _a : guid());
            return {
                // id: getEntryId ? getEntryId(item, key) : String(item && (item as any)[self.primaryField] || `${key}-1-${key}`),
                id: id,
                key: String("".concat(index, "-1-").concat(index)),
                depth: 1,
                index: index,
                newIndex: index,
                pristine: item.__pristine || item,
                path: "".concat(index),
                data: item,
                rowSpans: {},
                defer: !!item.defer,
                loaded: false,
                loading: false,
                children: item && Array.isArray(item.children)
                    ? initChildren(item.children, 1, index, id, "".concat(index, "."), getEntryId)
                    : []
            };
        });
        if (self.combineNum) {
            arr = autoCombineCell(arr, self.columns, self.combineNum, self.combineFromIndex);
        }
        var allMatched = replaceRow(arr, reUseRow);
        self.isNested = self.rows.some(function (item) { return item.children.length || (item.defer && !item.loaded); });
        if (!allMatched) {
            // 前 20 个直接渲染，后面的按需渲染
            // if (
            //   self.lazyRenderAfter &&
            //   self.falttenedRows.length > self.lazyRenderAfter
            // ) {
            //   for (
            //     let i = self.lazyRenderAfter, len = self.falttenedRows.length;
            //     i < len;
            //     i++
            //   ) {
            //     self.falttenedRows[i].appeared = false;
            //     self.falttenedRows[i].lazyRender = true;
            //   }
            // }
            var expand = self.footable && self.footable.expand;
            if (expand === 'first' ||
                (self.expandConfig && self.expandConfig.expand === 'first')) {
                self.rows.length && self.expandedRows.push(self.rows[0].id);
            }
            else if ((expand === 'all' && !self.footable.accordion) ||
                (self.expandConfig &&
                    self.expandConfig.expand === 'all' &&
                    !self.expandConfig.accordion)) {
                self.expandedRows.replace(getExpandAllRows(self.rows));
            }
        }
        self.dragging = false;
        Array.isArray(fullItems) && self.fullItems.replace(fullItems);
        Array.isArray(fullSelectedItems) &&
            self.fullSelectedItems.replace(fullSelectedItems);
    }
    // 获取所有层级的子节点id
    function getExpandAllRows(arr) {
        return arr.reduce(function (result, current) {
            result.push(current.id);
            if (current.children && current.children.length) {
                result = result.concat(getExpandAllRows(current.children));
            }
            return result;
        }, []);
    }
    // 尽可能的复用 row
    function replaceRow(arr, reUseRow) {
        if (reUseRow === false) {
            self.rows.replace(arr.map(function (item) { return Row.create(item); }));
            return false;
        }
        else if (reUseRow === 'match') {
            var rows_1 = self.falttenedRows;
            var allMatched_1 = true;
            self.rows.replace(arr.map(function (item) {
                var exist = rows_1.find(function (row) { return row.id === item.id; });
                if (exist) {
                    exist.replaceWith(item);
                    return exist;
                }
                allMatched_1 = false;
                return Row.create(item);
            }));
            return allMatched_1;
        }
        var pool = arr.concat();
        // 把多的删了先
        if (self.rows.length > arr.length) {
            self.rows.splice(arr.length, self.rows.length - arr.length);
        }
        var index = 0;
        var len = self.rows.length;
        while (pool.length) {
            var item = pool.shift();
            if (index < len) {
                self.rows[index].replaceWith(item);
            }
            else {
                var row = Row.create(item);
                self.rows.push(row);
            }
            index++;
        }
        return false;
    }
    function updateSelected(selected, valueField) {
        self.selectedRows.clear();
        selected.forEach(function (item) {
            var resolved = findTree(self.rows, function (a) { return a.pristine === item || a.data === item; });
            // 先严格比较，
            if (!resolved) {
                resolved = findTree(self.rows, function (a) {
                    var selectValue = item[valueField || 'value'];
                    var itemValue = a.pristine[valueField || 'value'];
                    return selectValue === itemValue;
                });
            }
            // 再宽松比较
            if (!resolved) {
                resolved = findTree(self.rows, function (a) {
                    var selectValue = item[valueField || 'value'];
                    var itemValue = a.pristine[valueField || 'value'];
                    return selectValue == itemValue;
                });
            }
            resolved && self.selectedRows.push(resolved);
        });
        updateCheckDisable();
    }
    function getSelectedRows() {
        var _a;
        var maxLength = self.getSelectionUpperLimit();
        var selectedItems = (_a = self.data) === null || _a === void 0 ? void 0 : _a.selectedItems;
        if (maxLength !== Infinity &&
            selectedItems &&
            maxLength >= selectedItems.length) {
            var restCheckableRows = self.checkableRows.filter(function (item) { return !item.checked; });
            var checkableRows = restCheckableRows.filter(function (item, i) { return i < maxLength - selectedItems.length; });
            return __spreadArray(__spreadArray([], __read(self.selectedRows), false), __read(checkableRows), false);
        }
        else {
            return __spreadArray(__spreadArray([], __read(self.selectedRows.filter(function (item) { return !item.checkable; })), false), __read(self.checkableRows), false);
        }
    }
    function toggleAll() {
        if (self.allChecked) {
            // 需要将不可选的row排除掉
            // 不可选的 始终保持初始化的状态
            self.selectedRows.replace(self.selectedRows.filter(function (row) { return !row.checkable; }));
        }
        else {
            self.selectedRows.replace(getSelectedRows());
        }
    }
    // 记录最近一次点击的多选框，主要用于 shift 多选时判断上一个选的是什么
    var lastCheckedRow = null;
    function toggle(row, checked) {
        if (!row.checkable) {
            return;
        }
        lastCheckedRow = row;
        var idx = self.selectedRows.indexOf(row);
        if (self.multiple) {
            ~idx
                ? !checked && self.selectedRows.splice(idx, 1)
                : checked && self.selectedRows.push(row);
        }
        else {
            ~idx
                ? !checked && self.selectedRows.splice(idx, 1)
                : checked && self.selectedRows.replace([row]);
        }
    }
    function toggleAncestors(row) {
        var parent = row.parent;
        if (!parent.depth) {
            return;
        }
        var selectedStatus = parent.childrenSelected();
        toggle(parent, selectedStatus === SELECTED_STATUS.ALL);
        toggleAncestors(parent);
    }
    function toggleDescendants(row, checked) {
        var children = row.children;
        if (!(children === null || children === void 0 ? void 0 : children.length)) {
            return;
        }
        children.forEach(function (child) {
            toggle(child, checked);
            toggleDescendants(child, checked);
        });
    }
    function getToggleShiftRows(row) {
        var e_1, _a;
        // 如果是同一个或非 multiple 模式下就和不用 shift 一样
        if (!lastCheckedRow || row === lastCheckedRow || !self.multiple) {
            return [row];
        }
        var toggleRows = [];
        var maxLength = self.maxKeepItemSelectionLength;
        var checkableRows = self.checkableRows;
        var lastCheckedRowIndex = checkableRows.findIndex(function (row) { return row === lastCheckedRow; });
        var rowIndex = checkableRows.findIndex(function (rowItem) { return row === rowItem; });
        var minIndex = lastCheckedRowIndex > rowIndex ? rowIndex : lastCheckedRowIndex + 1;
        var maxIndex = lastCheckedRowIndex > rowIndex ? lastCheckedRowIndex : rowIndex + 1;
        var rows = checkableRows.slice(minIndex, maxIndex);
        try {
            for (var rows_2 = __values(rows), rows_2_1 = rows_2.next(); !rows_2_1.done; rows_2_1 = rows_2.next()) {
                var rowItem = rows_2_1.value;
                // 如果上一个是选中状态，则将之间的所有 check 都变成可选
                if (!(lastCheckedRow.checked &&
                    maxLength &&
                    self.selectedRows.length + toggleRows.length >= maxLength)) {
                    toggleRows.push(rowItem);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (rows_2_1 && !rows_2_1.done && (_a = rows_2.return)) _a.call(rows_2);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return toggleRows;
    }
    // 按住 shift 的时候点击选项
    function toggleShift(row, checked) {
        var toggleRows = getToggleShiftRows(row);
        if ((toggleRows === null || toggleRows === void 0 ? void 0 : toggleRows.length) === 1) {
            toggle(row, checked);
            return;
        }
        toggleRows.forEach(function (row) {
            var idx = self.selectedRows.indexOf(row);
            if (idx === -1 && checked) {
                self.selectedRows.push(row);
            }
            else if (~idx && !checked) {
                self.selectedRows.splice(idx, 1);
            }
        });
        lastCheckedRow = row;
    }
    function updateCheckDisable() {
        if (!self.data) {
            return;
        }
        var maxLength = self.getSelectionUpperLimit();
        var selectedItems = self.selectedRows.map(function (item) { return item.data; });
        self.selectedRows.map(function (item) { return item.setCheckdisable(false); });
        if (maxLength !== Infinity && maxLength <= selectedItems.length) {
            self.unSelectedRows.map(function (item) { return !item.checked && item.setCheckdisable(true); });
        }
        else {
            self.unSelectedRows.map(function (item) { return item.checkdisable && item.setCheckdisable(false); });
        }
    }
    function clear() {
        self.selectedRows.clear();
    }
    function toggleExpandAll() {
        if (self.allExpanded) {
            self.expandedRows.clear();
        }
        else {
            self.expandedRows.replace(self.rows.filter(function (item) { return item.expandable; }).map(function (item) { return item.id; }));
        }
    }
    function toggleExpanded(row) {
        var idx = self.expandedRows.indexOf(row.id);
        if (~idx) {
            self.expandedRows.splice(idx, 1);
        }
        else if (self.footable && self.footable.accordion) {
            self.expandedRows.replace([row.id]);
        }
        else if (self.expandConfig && self.expandConfig.accordion) {
            var rows = self
                .getExpandedRows()
                .filter(function (item) { return item.depth !== row.depth; });
            rows.push(row);
            self.expandedRows.replace(rows.map(function (item) { return item.id; }));
        }
        else {
            self.expandedRows.push(row.id);
        }
    }
    function setExpanded(row, expanded) {
        var id = typeof row === 'string' ? row : row.id;
        var idx = self.expandedRows.indexOf(id);
        if (expanded) {
            if (!~idx) {
                self.expandedRows.push(id);
            }
        }
        else {
            ~idx && self.expandedRows.splice(idx, 1);
        }
    }
    function collapseAllAtDepth(depth) {
        var rows = self.getExpandedRows().filter(function (item) { return item.depth !== depth; });
        self.expandedRows.replace(rows.map(function (item) { return item.id; }));
    }
    function setOrderByInfo(key, direction) {
        self.orderBy = key;
        self.orderDir = key ? direction : '';
    }
    function changeOrder(key, direction) {
        setOrderByInfo(key, direction);
        var dir = /desc/i.test(self.orderDir) ? -1 : 1;
        self.rows.replace(sortArray(self.rows.concat(), self.orderBy, dir, function (item, field) { return item.data[field]; }));
    }
    function reset() {
        self.rows.forEach(function (item) { return item.reset(); });
        var rows = self.rows.concat();
        eachTree(rows, function (item) {
            if (item.children) {
                var rows_3 = item.children.concat().sort(function (a, b) { return a.index - b.index; });
                rows_3.forEach(function (item) { return item.reset(); });
                item.children.replace(rows_3);
            }
        });
        rows.forEach(function (item) { return item.reset(); });
        rows = rows.sort(function (a, b) { return a.index - b.index; });
        self.rows.replace(rows);
        self.dragging = false;
    }
    function toggleDragging() {
        self.dragging = !self.dragging;
    }
    function startDragging() {
        self.dragging = true;
    }
    function stopDragging() {
        self.dragging = false;
    }
    function exchange(fromIndex, toIndex, item) {
        item = item || self.rows[fromIndex];
        if (item.parentId) {
            var parent_1 = self.getRowById(item.parentId);
            var offset = parent_1.children.indexOf(item) - fromIndex;
            toIndex += offset;
            fromIndex += offset;
            var newRows_1 = parent_1.children.concat();
            newRows_1.splice(fromIndex, 1);
            newRows_1.splice(toIndex, 0, item);
            newRows_1.forEach(function (item, index) { return (item.newIndex = index); });
            parent_1.children.replace(newRows_1);
            return;
        }
        var newRows = self.rows.concat();
        newRows.splice(fromIndex, 1);
        newRows.splice(toIndex, 0, item);
        newRows.forEach(function (item, index) { return (item.newIndex = index); });
        self.rows.replace(newRows);
    }
    /**
     * 前端持久化记录列排序，查询字段，显示列信息
     */
    function persistSaveToggledColumns() {
        var key = self.columnsKey;
        var toggledColumns = self.activeToggaleColumns;
        var activedSearchableColumns = self.activedSearchableColumns;
        localStorage.setItem(key, JSON.stringify({
            // 记录隐藏的字段，因为默认不设置是显示的，设置了隐藏才需要记录，这样新出来的字段才会默认显示
            unToggledColumns: self.columnsData
                .filter(function (item) { return !toggledColumns.includes(item); })
                .map(function (item) { return item.columnKey; }),
            // 列排序，name，label可能不存在
            columnOrder: self.columnsData.map(function (item) { return item.columnKey; }),
            // 同理只记录不启用的，因为默认是启用的
            disabledSearchableColumn: self.columnsData
                .filter(function (item) {
                return item.searchable && !activedSearchableColumns.includes(item);
            })
                .map(function (item) { return item.columnKey; })
        }));
    }
    function addForm(form, rowIndex) {
        self.formsRef.push({
            id: form.id,
            rowIndex: rowIndex
        });
    }
    function toggleAllColumns(min) {
        if (min === void 0) { min = 1; }
        if (self.activeToggaleColumns.length) {
            if (self.activeToggaleColumns.length === self.toggableColumns.length) {
                self.toggableColumns.map(function (column) { return column.setToggled(false); });
                toggleColumnsAtLeast(min);
            }
            else {
                self.toggableColumns.map(function (column) { return column.setToggled(true); });
            }
        }
        else {
            // 如果没有一个激活的，那就改成全选
            self.toggableColumns.map(function (column) { return column.setToggled(true); });
        }
        persistSaveToggledColumns();
    }
    function toggleColumnsAtLeast(min) {
        var _a;
        if (min === void 0) { min = 1; }
        if (self.activeToggaleColumns.length < min) {
            for (var i = 0; i < min; i++) {
                (_a = self.toggableColumns[i]) === null || _a === void 0 ? void 0 : _a.setToggled(true);
            }
        }
    }
    function setSearchFormExpanded(value) {
        self.searchFormExpanded = !!value;
    }
    function toggleSearchFormExpanded() {
        self.searchFormExpanded = !self.searchFormExpanded;
    }
    return {
        setTable: setTable,
        getTable: getTable,
        update: update,
        updateColumns: updateColumns,
        initTableWidth: initTableWidth,
        syncTableWidth: syncTableWidth,
        initRows: initRows,
        updateSelected: updateSelected,
        toggleAll: toggleAll,
        getSelectedRows: getSelectedRows,
        toggle: toggle,
        toggleAncestors: toggleAncestors,
        toggleDescendants: toggleDescendants,
        toggleShift: toggleShift,
        getToggleShiftRows: getToggleShiftRows,
        toggleExpandAll: toggleExpandAll,
        toggleExpanded: toggleExpanded,
        setExpanded: setExpanded,
        collapseAllAtDepth: collapseAllAtDepth,
        clear: clear,
        setOrderByInfo: setOrderByInfo,
        changeOrder: changeOrder,
        reset: reset,
        toggleDragging: toggleDragging,
        startDragging: startDragging,
        stopDragging: stopDragging,
        exchange: exchange,
        addForm: addForm,
        toggleAllColumns: toggleAllColumns,
        toggleColumnsAtLeast: toggleColumnsAtLeast,
        persistSaveToggledColumns: persistSaveToggledColumns,
        setSearchFormExpanded: setSearchFormExpanded,
        toggleSearchFormExpanded: toggleSearchFormExpanded,
        switchToFixedLayout: function () {
            this.syncTableWidth(true);
            self.tableLayout = 'fixed';
        },
        // events
        afterCreate: function () {
            setTimeout(function () {
                if (!isAlive(self)) {
                    return;
                }
                var key = self.columnsKey;
                var data = localStorage.getItem(key);
                if (data) {
                    var tableMetaData = JSON.parse(data);
                    var unToggledColumns_1 = Array.isArray(tableMetaData.unToggledColumns)
                        ? tableMetaData.unToggledColumns
                        : [];
                    var disabledSearchableColumn_1 = Array.isArray(tableMetaData.disabledSearchableColumn)
                        ? tableMetaData.disabledSearchableColumn
                        : [];
                    self.toggableColumns.forEach(function (item) {
                        return item.setToggled(!unToggledColumns_1.includes(item.columnKey));
                    });
                    self.searchableColumns.forEach(function (item) {
                        item.setEnableSearch(!disabledSearchableColumn_1.includes(item.columnKey), true);
                    });
                }
            }, 200);
        }
    };
});

export { Column, Row, SELECTED_STATUS, TableStore };
