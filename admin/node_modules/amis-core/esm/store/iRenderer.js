/**
 * amis-core v6.13.0
 * Copyright 2018-2025 fex
 */

import { __assign } from 'tslib';
import { types } from 'mobx-state-tree';
import '../utils/helper.js';
import 'amis-formula';
import 'moment';
import { injectObjectChain, extractObjectChain, createObjectFromChain, createObject, extendObject, cloneObject, setVariable, deleteVariable } from '../utils/object.js';
import '../utils/memoryParse.js';
import '@rc-component/mini-decimal';
import { getVariable } from '../utils/getVariable.js';
import { dataMapping } from '../utils/dataMapping.js';
import '../utils/filter.js';
import { SimpleMap } from '../utils/SimpleMap.js';
import { StoreNode } from './node.js';
import '../utils/api.js';
import 'file-saver';
import '../utils/browser.js';
import '../utils/ColorScale.js';
import 'react';
import 'lodash/chunk';
import { concatData } from '../utils/concatData.js';
import '../utils/DataSchema.js';
import '../utils/DataScope.js';
import '../utils/debug.js';
import 'react-dom';
import '../utils/errors.js';
import '../utils/tpl.js';
import 'lodash/isPlainObject';
import 'lodash/isObject';
import 'lodash/isString';
import 'lodash/isBoolean';
import '../utils/image.js';
import 'lodash/isEqual';
import '../actions/Action.js';
import 'lodash/debounce';
import '../utils/resize-sensor.js';
import 'react-overlays/useRootClose';
import 'lodash/mapValues';
import 'lodash/camelCase';
import 'lodash/cloneDeep';
import 'lodash/map';
import 'lodash/isEmpty';
import 'lodash/kebabCase';
import 'uncontrollable';
import 'hoist-non-react-statics';
import '../utils/validations.js';
import '../utils/resolveCondition.js';
import 'mobx';
import '../utils/Animation.js';
import findLastIndex from 'lodash/findLastIndex';

var iRendererStore = StoreNode.named('iRendererStore')
    .props({
    hasRemoteData: types.optional(types.boolean, false),
    data: types.optional(types.frozen(), {}),
    initedAt: 0,
    updatedAt: 0,
    pristine: types.optional(types.frozen(), {}),
    pristineRaw: types.optional(types.frozen(), {}),
    upStreamData: types.optional(types.frozen(), {}),
    action: types.optional(types.frozen(), undefined),
    dialogSchema: types.frozen(),
    dialogOpen: false,
    dialogData: types.optional(types.frozen(), undefined),
    drawerSchema: types.frozen(),
    drawerOpen: false,
    drawerData: types.optional(types.frozen(), undefined)
})
    .views(function (self) { return ({
    getValueByName: function (name, canAccessSuper) {
        if (canAccessSuper === void 0) { canAccessSuper = true; }
        return getVariable(self.data, name, canAccessSuper);
    },
    getPristineValueByName: function (name) {
        return getVariable(self.pristine, name, false);
    },
    get pristineDiff() {
        var data = {};
        Object.keys(self.pristine).forEach(function (key) {
            if (self.pristine[key] !== self.pristineRaw[key]) {
                data[key] = self.pristine[key];
            }
        });
        return data;
    }
}); })
    .actions(function (self) {
    var dialogCallbacks = new SimpleMap();
    var dialogScoped = null;
    var drawerScoped = null;
    var top = null;
    return {
        setTopStore: function (value) {
            top = value;
        },
        initData: function (data, skipSetPristine, changeReason) {
            if (data === void 0) { data = {}; }
            if (skipSetPristine === void 0) { skipSetPristine = false; }
            self.initedAt = Date.now();
            if (self.data.__tag) {
                data = injectObjectChain(data, self.data.__tag);
            }
            if (!skipSetPristine) {
                self.pristine = data;
                self.pristineRaw = data;
            }
            changeReason &&
                Object.isExtensible(data) &&
                !data.__changeReason &&
                Object.defineProperty(data, '__changeReason', {
                    value: changeReason,
                    enumerable: false,
                    configurable: false,
                    writable: false
                });
            self.data = data;
            self.upStreamData = data;
        },
        // 临时更新全局变量
        temporaryUpdateGlobalVars: function (globalVar) {
            var chain = extractObjectChain(self.data).filter(function (item) { return !item.hasOwnProperty('__isTempGlobalLayer'); });
            var idx = findLastIndex(chain, function (item) {
                return item.hasOwnProperty('global') || item.hasOwnProperty('globalState');
            });
            if (idx !== -1) {
                chain.splice(idx + 1, 0, __assign(__assign({}, globalVar), { __isTempGlobalLayer: true }));
            }
            self.data = createObjectFromChain(chain);
        },
        // 撤销临时更新全局变量
        unDoTemporaryUpdateGlobalVars: function () {
            var chain = extractObjectChain(self.data).filter(function (item) { return !item.hasOwnProperty('__isTempGlobalLayer'); });
            self.data = createObjectFromChain(chain);
        },
        reset: function () {
            self.data = self.pristine;
        },
        updateData: function (data, tag, replace, concatFields, changeReason) {
            if (data === void 0) { data = {}; }
            if (concatFields) {
                data = concatData(data, self.data, concatFields);
            }
            var prev = self.data;
            var newData;
            if (tag) {
                var proto = createObject(self.data.__super || null, __assign(__assign({}, tag), { __tag: tag }));
                newData = createObject(proto, __assign(__assign({}, (replace ? {} : self.data)), data));
            }
            else {
                newData = extendObject(self.data, data, !replace);
            }
            Object.defineProperty(newData, '__prev', {
                value: __assign({}, prev),
                enumerable: false,
                configurable: false,
                writable: false
            });
            changeReason &&
                Object.isExtensible(newData) &&
                !newData.__changeReason &&
                Object.defineProperty(newData, '__changeReason', {
                    value: changeReason,
                    enumerable: false,
                    configurable: false,
                    writable: false
                });
            self.data = newData;
        },
        changeValue: function (name, value, changePristine, force, otherModifier, changeReason) {
            if (!name) {
                return;
            }
            var origin = getVariable(self.data, name, false);
            if (value === origin && !force) {
                return;
            }
            var prev = self.data;
            var data = cloneObject(self.data);
            if (prev.hasOwnProperty('__prev')) {
                // 基于之前的 __prev 改
                var prevData = cloneObject(prev.__prev);
                setVariable(prevData, name, origin);
                Object.defineProperty(data, '__prev', {
                    value: prevData,
                    enumerable: false,
                    configurable: false,
                    writable: false
                });
            }
            else {
                Object.defineProperty(data, '__prev', {
                    value: __assign({}, prev),
                    enumerable: false,
                    configurable: false,
                    writable: false
                });
            }
            if (value === undefined) {
                deleteVariable(data, name);
            }
            else {
                setVariable(data, name, value);
            }
            otherModifier === null || otherModifier === void 0 ? void 0 : otherModifier(data);
            if (changePristine) {
                var pristine = cloneObject(self.pristine);
                setVariable(pristine, name, value);
                otherModifier === null || otherModifier === void 0 ? void 0 : otherModifier(pristine);
                self.pristine = pristine;
            }
            if (!data.__pristine) {
                Object.defineProperty(data, '__pristine', {
                    value: self.pristine,
                    enumerable: false,
                    configurable: false,
                    writable: false
                });
            }
            changeReason &&
                Object.isExtensible(data) &&
                !data.__changeReason &&
                Object.defineProperty(data, '__changeReason', {
                    value: changeReason,
                    enumerable: false,
                    configurable: false,
                    writable: false
                });
            self.data = data;
        },
        setCurrentAction: function (action, resolveDefinitions) {
            // 处理 $ref
            resolveDefinitions &&
                ['dialog', 'drawer'].forEach(function (key) {
                    var _a;
                    var _b;
                    if ((_b = action[key]) === null || _b === void 0 ? void 0 : _b.$ref) {
                        action = __assign(__assign({}, action), (_a = {}, _a[key] = __assign(__assign({}, resolveDefinitions(action[key].$ref)), action[key]), _a));
                    }
                });
            self.action = action;
        },
        openDialog: function (ctx, additonal, callback, scoped) {
            var _a, _b;
            var chain = extractObjectChain(ctx);
            chain.length === 1 && chain.unshift(self.data);
            if (additonal) {
                chain.splice(chain.length - 1, 0, additonal);
            }
            var data = createObjectFromChain(chain);
            var mappingData = (_a = self.action.data) !== null && _a !== void 0 ? _a : (_b = self.action.dialog) === null || _b === void 0 ? void 0 : _b.data;
            if (mappingData) {
                self.dialogData = createObjectFromChain([
                    top === null || top === void 0 ? void 0 : top.context,
                    dataMapping(mappingData, data)
                ]);
                var clonedAction = __assign(__assign({}, self.action), { dialog: __assign({}, self.action.dialog) });
                delete clonedAction.dialog.data;
                self.action = clonedAction;
            }
            else {
                self.dialogData = data;
            }
            self.dialogSchema = self.action.dialog;
            self.dialogOpen = true;
            callback && dialogCallbacks.set(self.dialogData, callback);
            dialogScoped = scoped || null;
        },
        closeDialog: function (confirmed, data) {
            var callback = dialogCallbacks.get(self.dialogData);
            // 不要过早的清空，否则内部组件提前销毁，会出现 store 异常读取问题
            // self.dialogSchema = null;
            self.dialogOpen = false;
            dialogScoped = null;
            if (callback) {
                dialogCallbacks.delete(self.dialogData);
                setTimeout(function () { return callback(confirmed, data); }, 200);
            }
        },
        openDrawer: function (ctx, additonal, callback, scoped) {
            var _a;
            var chain = extractObjectChain(ctx);
            chain.length === 1 && chain.unshift(self.data);
            if (additonal) {
                chain.splice(chain.length - 1, 0, additonal);
            }
            var data = createObjectFromChain(chain);
            var mappingData = (_a = self.action.data) !== null && _a !== void 0 ? _a : self.action.drawer.data;
            if (mappingData) {
                self.drawerData = createObjectFromChain([
                    top === null || top === void 0 ? void 0 : top.context,
                    dataMapping(mappingData, data)
                ]);
                var clonedAction = __assign(__assign({}, self.action), { drawer: __assign({}, self.action.drawer) });
                delete clonedAction.drawer.data;
                self.action = clonedAction;
            }
            else {
                self.drawerData = data;
            }
            self.drawerSchema = self.action.drawer;
            self.drawerOpen = true;
            if (callback) {
                dialogCallbacks.set(self.drawerData, callback);
            }
            drawerScoped = scoped || null;
        },
        closeDrawer: function (confirmed, data) {
            var callback = dialogCallbacks.get(self.drawerData);
            // 不要过早的清空，否则内部组件提前销毁，会出现 store 异常读取问题
            // self.drawerSchema = null;
            self.drawerOpen = false;
            drawerScoped = null;
            if (callback) {
                dialogCallbacks.delete(self.drawerData);
                setTimeout(function () { return callback(confirmed, data); }, 200);
            }
        },
        getDialogScoped: function () {
            return dialogScoped;
        },
        getDrawerScoped: function () {
            return drawerScoped;
        }
    };
});
// export type SIRendererStore = typeof iRendererStore.SnapshotType;

export { iRendererStore };
