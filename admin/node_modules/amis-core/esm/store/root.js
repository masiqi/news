/**
 * amis-core v6.13.0
 * Copyright 2018-2025 fex
 */

import { __assign, __generator, __rest, __values, __awaiter, __read } from 'tslib';
import { types, flow, isAlive, addDisposer } from 'mobx-state-tree';
import { parseQuery, isObjectShallowModified } from '../utils/helper.js';
import { ServiceStore } from './service.js';
import 'amis-formula';
import 'moment';
import { extractObjectChain, createObjectFromChain, cloneObject } from '../utils/object.js';
import '../utils/memoryParse.js';
import '@rc-component/mini-decimal';
import isPlainObject from 'lodash/isPlainObject';
import '../utils/filter.js';
import '../utils/api.js';
import 'file-saver';
import '../utils/browser.js';
import '../utils/ColorScale.js';
import 'react';
import 'lodash/chunk';
import '../utils/DataSchema.js';
import '../utils/DataScope.js';
import '../utils/debug.js';
import 'react-dom';
import '../utils/errors.js';
import '../utils/tpl.js';
import 'lodash/isObject';
import 'lodash/isString';
import 'lodash/isBoolean';
import '../utils/image.js';
import 'lodash/isEqual';
import '../actions/Action.js';
import debounce from 'lodash/debounce';
import '../utils/resize-sensor.js';
import 'react-overlays/useRootClose';
import '../utils/SimpleMap.js';
import 'lodash/mapValues';
import 'lodash/camelCase';
import 'lodash/cloneDeep';
import 'lodash/map';
import 'lodash/isEmpty';
import 'lodash/kebabCase';
import 'uncontrollable';
import 'hoist-non-react-statics';
import '../utils/validations.js';
import '../utils/resolveCondition.js';
import { reaction } from 'mobx';
import '../utils/Animation.js';
import { createGlobalVarState, buildGlobalVariable } from '../globalVar.js';

var RootStore = ServiceStore.named('RootStore')
    .props({
    runtimeError: types.frozen(),
    runtimeErrorStack: types.frozen(),
    query: types.frozen(),
    ready: false,
    // 临时变更，等 react 完成一轮渲染后，将临时变更切成正式变更
    // 主要是为了让可能需要重新渲染的部分组件可以实现 this.props.data 和 prevProps.data 不一致
    // 因为很多组件内部会 diff this.props.data 和 prevProps.data 来决定是否更新的逻辑
    globalVarTempStates: types.optional(types.map(types.frozen()), {}),
    // 正式变更
    globalVarStates: types.optional(types.map(types.frozen()), {})
})
    .volatile(function (self) {
    return {
        context: {},
        legacyGlobalTempContext: {},
        globalVars: [],
        globalData: {
            global: {},
            globalState: {}
        }
    };
})
    .views(function (self) { return ({
    get nextGlobalData() {
        var globalData = {};
        var globalState = {};
        var chain = extractObjectChain(self.data);
        var touched = false;
        var saved = true;
        var errors = {};
        var initialized = true;
        self.globalVarTempStates.forEach(function (state, key) {
            globalData[key] = state.value;
            touched = touched || state.touched;
            if (!state.saved) {
                saved = false;
            }
            if (state.errorMessages.length) {
                errors[key] = state.errorMessages;
            }
            if (!state.initialized) {
                initialized = false;
            }
        });
        globalState = {
            fields: self.globalVarTempStates.toJSON(),
            initialized: initialized,
            touched: touched,
            saved: saved,
            errors: errors,
            valid: !Object.keys(errors).length
        };
        chain.unshift({
            global: globalData,
            globalState: globalState
        });
        chain.unshift(self.legacyGlobalTempContext);
        chain.unshift(self.context);
        return createObjectFromChain(chain);
    },
    get downStream() {
        var result = self.data;
        if (self.context || self.query) {
            var chain = extractObjectChain(result);
            // 数据链中添加 global 和 globalState
            // 对应的是全局变量的值和全局变量的状态
            var globalData_1 = {};
            var touched_1 = false;
            var saved_1 = true;
            var errors_1 = {};
            var initialized_1 = true;
            self.globalVarStates.forEach(function (state, key) {
                globalData_1[key] = state.value;
                touched_1 = touched_1 || state.touched;
                if (!state.saved) {
                    saved_1 = false;
                }
                if (state.errorMessages.length) {
                    errors_1[key] = state.errorMessages;
                }
                if (!state.initialized) {
                    initialized_1 = false;
                }
            });
            // 保存全局变量的值和状态
            Object.assign(self.globalData.global, globalData_1);
            Object.assign(self.globalData.globalState, {
                fields: self.globalVarStates.toJSON(),
                initialized: initialized_1,
                touched: touched_1,
                saved: saved_1,
                errors: errors_1,
                valid: !Object.keys(errors_1).length
            });
            // self.globalData 一直都是那个对象，这样组件里面始终拿到的都是最新的
            chain.unshift(self.globalData);
            chain.unshift(self.context);
            self.query &&
                chain.splice(chain.length - 1, 0, __assign(__assign({}, self.query), { __query: self.query }));
            result = createObjectFromChain(chain);
        }
        return result;
    }
}); })
    .actions(function (self) {
    function updateState(key, state) {
        return self.updateGlobalVarState(key, state);
    }
    var init = flow(function init(fn) {
        var ret, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 3, 4, 5]);
                    ret = fn();
                    if (!(ret === null || ret === void 0 ? void 0 : ret.then)) return [3 /*break*/, 2];
                    return [4 /*yield*/, ret];
                case 1:
                    _a.sent();
                    _a.label = 2;
                case 2: return [3 /*break*/, 5];
                case 3:
                    e_1 = _a.sent();
                    self.runtimeError = e_1.message;
                    self.runtimeErrorStack = e_1.stack;
                    return [3 /*break*/, 5];
                case 4:
                    self.ready = true;
                    return [7 /*endfinally*/];
                case 5: return [2 /*return*/];
            }
        });
    });
    /**
     * 比较新旧变量列表的差异
     * @param vars 新的变量列表
     * @param originVars 原始变量列表
     * @returns 返回新增、更新和删除的变量列表
     */
    function diffVariables(vars, originVars) {
        var e_2, _a;
        var removeVars = originVars.concat();
        var updateVars = [];
        var newVars = [];
        var _loop_1 = function (varItem) {
            var idx = removeVars.findIndex(function (item) { return item.key === varItem.key; });
            if (~idx) {
                var _b = __read(removeVars.splice(idx, 1), 1), origin_1 = _b[0];
                if (origin_1.id !== varItem.id) {
                    updateVars.push(varItem);
                }
            }
            else {
                newVars.push(varItem);
            }
        };
        try {
            for (var vars_1 = __values(vars), vars_1_1 = vars_1.next(); !vars_1_1.done; vars_1_1 = vars_1.next()) {
                var varItem = vars_1_1.value;
                _loop_1(varItem);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (vars_1_1 && !vars_1_1.done && (_a = vars_1.return)) _a.call(vars_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return {
            newVars: newVars,
            updateVars: updateVars,
            removeVars: removeVars
        };
    }
    /**
     * 初始化单个全局变量
     */
    function initGlobalVarData(item, context, getter) {
        return __awaiter(this, void 0, void 0, function () {
            var value, state;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        value = item.defaultValue;
                        if (!getter) return [3 /*break*/, 2];
                        return [4 /*yield*/, getGlobalVarData(item, context, getter)];
                    case 1:
                        _a.sent();
                        state = self.globalVarTempStates.get(item.key);
                        updateState(item.key, {
                            initialized: true,
                            pristine: state.value
                        });
                        return [3 /*break*/, 3];
                    case 2:
                        updateState(item.key, {
                            value: value,
                            pristine: value,
                            initialized: item.bulkGetter ? false : true
                        });
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    }
    /**
     * 批量初始化全局变量
     */
    function getGlobalVarData(item, context, getter) {
        return __awaiter(this, void 0, void 0, function () {
            var value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, , 2, 3]);
                        updateState(item.key, {
                            busy: true
                        });
                        return [4 /*yield*/, getter(item, context)];
                    case 1:
                        value = _a.sent();
                        updateState(item.key, {
                            value: value
                        });
                        return [3 /*break*/, 3];
                    case 2:
                        updateState(item.key, {
                            busy: false
                        });
                        return [7 /*endfinally*/];
                    case 3: return [2 /*return*/];
                }
            });
        });
    }
    /**
     * 批量初始化全局变量
     */
    function bulkGetGlobalVarData(variables, context, getter) {
        return __awaiter(this, void 0, void 0, function () {
            var data, _loop_2, key;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, , 2, 3]);
                        variables.forEach(function (item) {
                            updateState(item.key, {
                                busy: true
                            });
                        });
                        return [4 /*yield*/, getter.call(null, __assign(__assign({}, context), { variables: variables }))];
                    case 1:
                        data = _a.sent();
                        if (!isPlainObject(data)) {
                            return [2 /*return*/];
                        }
                        _loop_2 = function (key) {
                            // 返回非定义部分的数据不处理
                            if (!variables.some(function (item) { return item.key === key; })) {
                                return "continue";
                            }
                            var state = self.globalVarTempStates.get(key);
                            if (state) {
                                updateState(key, {
                                    value: data[key],
                                    pristine: data[key],
                                    initialized: true
                                });
                            }
                        };
                        for (key in data) {
                            _loop_2(key);
                        }
                        return [3 /*break*/, 3];
                    case 2:
                        variables.forEach(function (item) {
                            updateState(item.key, {
                                busy: false
                            });
                        });
                        return [7 /*endfinally*/];
                    case 3: return [2 /*return*/];
                }
            });
        });
    }
    /**
     * 初始化全局变量
     */
    function initializeGlobalVars(newVars, updateVars) {
        return __awaiter(this, void 0, void 0, function () {
            var variables, context, globalVars, bulkGetters, itemsNotInitialized, _loop_3, globalVars_1, globalVars_1_1, item;
            var e_3, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        variables = newVars.concat(updateVars);
                        context = __assign(__assign({}, self.context), { variables: variables });
                        globalVars = variables.map(function (item) {
                            return buildGlobalVariable(item, context);
                        });
                        bulkGetters = [];
                        itemsNotInitialized = [];
                        _loop_3 = function (item) {
                            var state = self.globalVarTempStates.get(item.key);
                            if (state === null || state === void 0 ? void 0 : state.initialized) {
                                return "continue";
                            }
                            itemsNotInitialized.push(item);
                            if (item.bulkGetter) {
                                var getter = bulkGetters.find(function (a) { return a.fn === item.bulkGetter; });
                                if (!getter) {
                                    getter = {
                                        fn: item.bulkGetter,
                                        variables: []
                                    };
                                    bulkGetters.push(getter);
                                }
                                getter.variables.push(item);
                            }
                        };
                        try {
                            for (globalVars_1 = __values(globalVars), globalVars_1_1 = globalVars_1.next(); !globalVars_1_1.done; globalVars_1_1 = globalVars_1.next()) {
                                item = globalVars_1_1.value;
                                _loop_3(item);
                            }
                        }
                        catch (e_3_1) { e_3 = { error: e_3_1 }; }
                        finally {
                            try {
                                if (globalVars_1_1 && !globalVars_1_1.done && (_a = globalVars_1.return)) _a.call(globalVars_1);
                            }
                            finally { if (e_3) throw e_3.error; }
                        }
                        // 先单个初始化
                        return [4 /*yield*/, Promise.all(itemsNotInitialized.map(function (item) {
                                return initGlobalVarData(item, context, item.getter);
                            }))];
                    case 1:
                        // 先单个初始化
                        _b.sent();
                        // 再批量初始化
                        return [4 /*yield*/, Promise.all(bulkGetters.map(function (_a) {
                                var fn = _a.fn, variables = _a.variables;
                                return bulkGetGlobalVarData(variables, context, fn);
                            }))];
                    case 2:
                        // 再批量初始化
                        _b.sent();
                        return [2 /*return*/, globalVars];
                }
            });
        });
    }
    // 设置全局变量,返回一个Promise
    var setGlobalVars = flow(function setGlobalVars(vars) {
        var _a, newVars, updateVars, removeVars, globalVars;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = diffVariables(vars || [], self.globalVars), newVars = _a.newVars, updateVars = _a.updateVars, removeVars = _a.removeVars;
                    return [4 /*yield*/, initializeGlobalVars(newVars, updateVars)];
                case 1:
                    globalVars = _b.sent();
                    if (!isAlive(self)) {
                        return [2 /*return*/];
                    }
                    self.globalVars = globalVars;
                    removeVars.forEach(function (item) {
                        self.globalVarTempStates.delete(item.key);
                    });
                    syncGlobalVarStates();
                    return [2 /*return*/];
            }
        });
    });
    // 更新全局变量的值
    var updateGlobalVarValue = function (key, value) {
        return modifyGlobalVarValue(key, { op: 'set', value: value });
    };
    // 如果对应变量是个对象，那么可以通过这个扩充变量的值
    var modifyGlobalVarValue = function (key, options) {
        var state = self.globalVarTempStates.get(key);
        if (!state) {
            return;
        }
        var value = state.value;
        switch (options.op) {
            case 'set':
                value = options.value;
                break;
        }
        updateState(key, {
            value: value,
            touched: true
        });
        lazySaveGlobalVarValues();
    };
    /**
     * 保存单个全局变量的值
     */
    function saveGlobalVarData(item, value, context, setter) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, , 2, 3]);
                        updateState(item.key, {
                            busy: true
                        });
                        return [4 /*yield*/, setter(item, value, context)];
                    case 1:
                        _a.sent();
                        updateState(item.key, {
                            saved: true
                        });
                        return [3 /*break*/, 3];
                    case 2:
                        updateState(item.key, {
                            busy: false
                        });
                        return [7 /*endfinally*/];
                    case 3: return [2 /*return*/];
                }
            });
        });
    }
    /**
     * 批量保存全局变量
     */
    function bulkSaveGlobalVarData(variables, values, context, setter) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, , 2, 3]);
                        variables.forEach(function (item) {
                            updateState(item.key, {
                                busy: true
                            });
                        });
                        return [4 /*yield*/, setter(values, __assign(__assign({}, context), { variables: variables }))];
                    case 1:
                        _a.sent();
                        variables.forEach(function (item) {
                            updateState(item.key, {
                                saved: true
                            });
                        });
                        return [3 /*break*/, 3];
                    case 2:
                        variables.forEach(function (item) {
                            updateState(item.key, {
                                busy: false
                            });
                        });
                        return [7 /*endfinally*/];
                    case 3: return [2 /*return*/];
                }
            });
        });
    }
    /**
     * 保存全局变量的值
     */
    function saveGlobalVarValues(key) {
        return __awaiter(this, void 0, void 0, function () {
            var context, setters, bulkSetters, values, _loop_4, _a, _b, varItem;
            var e_4, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        context = __assign(__assign({}, self.context), { variables: self.globalVars });
                        setters = [];
                        bulkSetters = [];
                        values = {};
                        _loop_4 = function (varItem) {
                            var state = self.globalVarTempStates.get(varItem.key);
                            if (!(state === null || state === void 0 ? void 0 : state.touched)) {
                                return "continue";
                            }
                            else if (key && key !== varItem.key) {
                                return "continue";
                            }
                            else if (!key && varItem.autoSave === false) {
                                return "continue";
                            }
                            values[varItem.key] = state.value;
                            if (varItem.setter) {
                                setters.push({
                                    fn: varItem.setter,
                                    item: varItem,
                                    value: state.value
                                });
                            }
                            if (varItem.bulkSetter) {
                                var setter = bulkSetters.find(function (a) { return a.fn === varItem.bulkSetter; });
                                if (!setter) {
                                    setter = {
                                        fn: varItem.bulkSetter,
                                        variables: [],
                                        values: {}
                                    };
                                    bulkSetters.push(setter);
                                }
                                setter.variables.push(varItem);
                                setter.values[varItem.key] = state.value;
                            }
                        };
                        try {
                            for (_a = __values(self.globalVars), _b = _a.next(); !_b.done; _b = _a.next()) {
                                varItem = _b.value;
                                _loop_4(varItem);
                            }
                        }
                        catch (e_4_1) { e_4 = { error: e_4_1 }; }
                        finally {
                            try {
                                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                            }
                            finally { if (e_4) throw e_4.error; }
                        }
                        return [4 /*yield*/, Promise.all(setters
                                .map(function (_a) {
                                var fn = _a.fn, item = _a.item, value = _a.value;
                                return saveGlobalVarData(item, value, context, fn);
                            })
                                .concat(bulkSetters.map(function (_a) {
                                var variables = _a.variables, values = _a.values, fn = _a.fn;
                                return bulkSaveGlobalVarData(variables, values, context, fn);
                            })))];
                    case 1:
                        _d.sent();
                        return [2 /*return*/];
                }
            });
        });
    }
    // 延迟保存全局变量的值
    var lazySaveGlobalVarValues = debounce(saveGlobalVarValues, 250, {
        trailing: true,
        leading: false
    });
    function syncGlobalVarStates() {
        self.globalVarStates.clear();
        self.globalVarTempStates.forEach(function (state, key) {
            self.globalVarStates.set(key, __assign({}, state));
        });
    }
    function syncLegacyGlobalVarStates() {
        if (self.legacyGlobalTempContext.__page !== self.context.__page ||
            self.legacyGlobalTempContext.appVariables !== self.context.appVariables) {
            Object.assign(self.context, self.legacyGlobalTempContext);
            self.data = cloneObject(self.data);
        }
    }
    var pendingCount = 0;
    var callbacks = [];
    function addSyncGlobalVarStatePendingTask(fn, callback) {
        pendingCount++;
        callback && callbacks.push(callback);
        fn(function () {
            pendingCount--;
            if (pendingCount === 0) {
                callbacks.forEach(function (callback) { return callback(); });
                callbacks = [];
                if (isAlive(self)) {
                    self.syncGlobalVarStates();
                    self.syncLegacyGlobalVarStates();
                }
            }
        });
    }
    function observeSet(obj, callback) {
        if (!obj || obj.__observed) {
            // 如果已经被观察过了，就不需要再观察了
            return obj;
        }
        var timer = 0;
        return new Proxy(__assign({}, obj), {
            get: function (target, prop) {
                if (prop === '__observed') {
                    return true;
                }
                return Reflect.get(target, prop);
            },
            set: function (target, prop, value) {
                Reflect.set(target, prop, value);
                cancelAnimationFrame(timer);
                timer = requestAnimationFrame(function () { return callback(target); });
                console.warn("Don't modify the context directly.");
                return true;
            }
        });
    }
    return {
        updateContextBySetter: function (context) {
            this.updateContext(context);
            self.data = cloneObject(self.data);
        },
        updateContext: function (context, isInit) {
            // 因为 context 不是受控属性，直接共用引用好了
            // 否则还会触发孩子节点的重新渲染
            if (isInit === void 0) { isInit = false; }
            var _a = context || {}, __page = _a.__page, appVariables = _a.appVariables, rest = __rest(_a, ["__page", "appVariables"]);
            // 对历史用法做兼容
            if (__page || appVariables) {
                // 有部分用户直接在自定义动作脚本里面修改 __page 或者 appVariables 变量
                // 奇怪的是之前的实现方式这种修改是会更新变更的
                // 所以这里用 Proxy 来解决不更新的问题
                __page = __page
                    ? observeSet(__page, function (__page) {
                        return self.updateContextBySetter(__assign(__assign({}, self.context), { __page: __page }));
                    })
                    : __page;
                appVariables = appVariables
                    ? observeSet(appVariables, function (appVariables) {
                        return self.updateContextBySetter(__assign(__assign({}, self.context), { appVariables: appVariables }));
                    })
                    : appVariables;
                if (isInit) {
                    self.context.__page = __page;
                    self.context.appVariables = appVariables;
                }
                self.legacyGlobalTempContext.__page = __page;
                self.legacyGlobalTempContext.appVariables = appVariables;
            }
            Object.assign(self.context, rest);
        },
        updateGlobalVarState: function (key, state) {
            var origin = self.globalVarTempStates.get(key);
            var newState = __assign(__assign({}, (origin || createGlobalVarState())), state);
            self.globalVarTempStates.set(key, newState);
        },
        setGlobalVars: setGlobalVars,
        updateGlobalVarValue: updateGlobalVarValue,
        modifyGlobalVarValue: modifyGlobalVarValue,
        saveGlobalVarValues: lazySaveGlobalVarValues,
        setRuntimeError: function (error, errorStack) {
            self.runtimeError = error;
            self.runtimeErrorStack = errorStack;
        },
        updateLocation: function (location, parseFn) {
            var query = parseFn ? parseFn(location) : parseQuery(location);
            if (isObjectShallowModified(query, self.query, false)) {
                self.query = query;
            }
        },
        init: init,
        syncGlobalVarStates: syncGlobalVarStates,
        syncLegacyGlobalVarStates: syncLegacyGlobalVarStates,
        addSyncGlobalVarStatePendingTask: addSyncGlobalVarStatePendingTask,
        afterCreate: function () {
            addDisposer(self, reaction(function () { return self.nextGlobalData; }, function () {
                return self.addSyncGlobalVarStatePendingTask(function (callback) {
                    return requestAnimationFrame(callback);
                });
            }));
        },
        afterDestroy: function () {
            lazySaveGlobalVarValues.flush();
        }
    };
});

export { RootStore };
