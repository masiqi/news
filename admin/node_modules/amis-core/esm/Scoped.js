/**
 * amis-core v6.13.0
 * Copyright 2018-2025 fex
 */

import { __values, __assign, __awaiter, __generator, __extends, __rest, __decorate, __metadata } from 'tslib';
import React from 'react';
import find from 'lodash/find';
import values from 'lodash/values';
import hoistNonReactStatic from 'hoist-non-react-statics';
import { registerFunction } from 'amis-formula';
import 'moment';
import { createObject } from './utils/object.js';
import { memoParse } from './utils/tokenize.js';
import { isPureVariable } from './utils/isPureVariable.js';
import '@rc-component/mini-decimal';
import { getVariable } from './utils/getVariable.js';
import './utils/memoryParse.js';
import { dataMapping } from './utils/dataMapping.js';
import './utils/filter.js';
import { findTree, eachTree, qsparse, qsstringify, parseQuery, autobind } from './utils/helper.js';
import './utils/api.js';
import 'file-saver';
import './utils/browser.js';
import './utils/ColorScale.js';
import 'lodash/chunk';
import './utils/DataSchema.js';
import './utils/DataScope.js';
import './utils/debug.js';
import 'react-dom';
import './utils/errors.js';
import { filter } from './utils/tpl.js';
import 'lodash/isPlainObject';
import 'lodash/isObject';
import 'lodash/isString';
import 'lodash/isBoolean';
import './utils/image.js';
import 'lodash/isEqual';
import { createRendererEvent } from './utils/renderer-event.js';
import './utils/resize-sensor.js';
import 'react-overlays/useRootClose';
import './utils/SimpleMap.js';
import 'lodash/mapValues';
import 'lodash/camelCase';
import 'lodash/cloneDeep';
import 'lodash/map';
import 'lodash/isEmpty';
import 'lodash/kebabCase';
import 'uncontrollable';
import './utils/validations.js';
import './utils/resolveCondition.js';
import 'mobx';
import './utils/Animation.js';
import './actions/LoopAction.js';
import './actions/BreakAction.js';
import './actions/ContinueAction.js';
import './actions/SwitchAction.js';
import './actions/ParallelAction.js';
import './actions/CustomAction.js';
import './actions/BroadcastAction.js';
import './actions/CmptAction.js';
import './actions/StatusAction.js';
import './actions/AjaxAction.js';
import './actions/CopyAction.js';
import './actions/DialogAction.js';
import './actions/DrawerAction.js';
import './actions/EmailAction.js';
import './actions/EventAction.js';
import './actions/LinkAction.js';
import './actions/ToastAction.js';
import './actions/WaitAction.js';
import './actions/PageAction.js';
import './actions/PrintAction.js';
import { runActions } from './actions/Action.js';

/**
 * @file 用来创建一个域，在这个域里面会把里面的运行时实例注册进来，方便组件之间的通信。
 * @author fex
 */
/**
 * target 里面可能包含 ?xxx=xxx，这种情况下，需要把 ?xxx=xxx 保留下来，然后对前面的部分进行 filter
 * 因为后面会对 query 部分做不一样的处理。会保留原始的值。而不是会转成字符串。
 * @param target
 * @param data
 * @returns
 */
function filterTarget(target, data) {
    var idx = target.indexOf('?');
    if (~idx) {
        return filter(target.slice(0, idx), data) + target.slice(idx);
    }
    return filter(target, data, '| raw');
}
/**
 * 分割目标，如果里面有表达式，不要跟表达式里面的逗号冲突。
 * @param target
 * @returns
 */
function splitTarget(target) {
    try {
        var ast = memoParse(target);
        var pos_1 = [];
        ast.body.forEach(function (item) {
            // 不要处理表达式里面的东西。
            if (item.type === 'raw') {
                var parts = item.value.split(',');
                if (parts.length > 1) {
                    parts.pop();
                    var start_1 = item.start.index;
                    parts.forEach(function (part) {
                        pos_1.push(start_1 + part.length);
                        start_1 += part.length + 1;
                    });
                }
            }
        });
        if (pos_1.length) {
            var parts = [];
            pos_1.reduceRight(function (arr, index) {
                var _a;
                arr.unshift((_a = target.slice(index + 1)) === null || _a === void 0 ? void 0 : _a.trim());
                target = target.slice(0, index);
                return arr;
            }, parts);
            parts.unshift(target);
            return parts;
        }
    }
    catch (e) { }
    return [target];
}
var rootScopedContext = createScopedTools('');
var ScopedContext = React.createContext(rootScopedContext);
function createScopedTools(path, parent, env, rendererType) {
    var components = [];
    var self = {
        rendererType: rendererType,
        component: undefined,
        parent: parent,
        registerComponent: function (component) {
            // 不要把自己注册在自己的 Scoped 上，自己的 Scoped 是给子节点们注册的。
            if (component.props.$path === path && parent) {
                self.component = component;
                return parent.registerComponent(component);
            }
            if (!~components.indexOf(component)) {
                components.push(component);
            }
        },
        unRegisterComponent: function (component) {
            // 自己本身实际上注册在父级 Scoped 上。
            if (component.props.$path === path && parent) {
                // 如果是自己，尝试把自己从父级 Scoped 上移除，否则在某些场景下会导致父级的 children 一直增长。
                var idx_1 = parent.children.indexOf(self);
                ~idx_1 && parent.children.splice(idx_1, 1);
                return parent.unRegisterComponent(component);
            }
            var idx = components.indexOf(component);
            if (~idx) {
                components.splice(idx, 1);
            }
        },
        getComponentByName: function (name) {
            if (~name.indexOf('.')) {
                var paths = name.split('.');
                var len_1 = paths.length;
                return paths.reduce(function (scope, name, idx) {
                    if (scope && scope.getComponentByName) {
                        var result = scope.getComponentByName(name);
                        return result && idx < len_1 - 1 ? result.context : result;
                    }
                    return null;
                }, this);
            }
            var resolved = find(components, function (component) {
                return filter(component.props.name, component.props.data) === name ||
                    component.props.id === name;
            });
            return resolved || (parent && parent.getComponentByName(name));
        },
        getComponentByIdUnderCurrentScope: function (id, ignoreScope) {
            var component = undefined;
            findTree([this], function (item) {
                return item !== ignoreScope &&
                    item.getComponents().find(function (cmpt) {
                        if (filter(cmpt.props.id, cmpt.props.data) === id) {
                            component = cmpt;
                            return true;
                        }
                        return false;
                    });
            });
            return component;
        },
        getComponentById: function (id) {
            var root = this;
            var ignoreScope = undefined;
            // 找到顶端scoped
            while (root) {
                // 优先从当前scope查找
                // 直接跑到顶层查找，对于有历史标签一次渲染多个页面的情况，会有问题
                var component = root.getComponentByIdUnderCurrentScope(id, ignoreScope);
                if (component) {
                    return component;
                }
                if (!root.parent || root.parent === rootScopedContext) {
                    break;
                }
                ignoreScope = root;
                root = root.parent;
            }
            return undefined;
        },
        /**
         * 基于绑定的变量名称查找组件
         * 支持形如${xxx}的格式
         *
         * @param session store的session, 默认为全局的
         * @param path 变量路径, 包含命名空间
         */
        getComponentsByRefPath: function (session, path) {
            if (!path || typeof path !== 'string') {
                return [];
            }
            var cmptMaps = {};
            var root = this;
            while (root.parent) {
                root = root.parent;
            }
            eachTree([root], function (item) {
                var e_1, _a, e_2, _b;
                var _c, _d, _e, _f, _g, _h;
                var scopedCmptList = item.getComponents() || [];
                if (Array.isArray(scopedCmptList)) {
                    try {
                        for (var scopedCmptList_1 = __values(scopedCmptList), scopedCmptList_1_1 = scopedCmptList_1.next(); !scopedCmptList_1_1.done; scopedCmptList_1_1 = scopedCmptList_1.next()) {
                            var cmpt = scopedCmptList_1_1.value;
                            var pathKey = (_d = (_c = cmpt === null || cmpt === void 0 ? void 0 : cmpt.props) === null || _c === void 0 ? void 0 : _c.$path) !== null && _d !== void 0 ? _d : 'unknown';
                            var schema = (_f = (_e = cmpt === null || cmpt === void 0 ? void 0 : cmpt.props) === null || _e === void 0 ? void 0 : _e.$schema) !== null && _f !== void 0 ? _f : {};
                            var cmptSession = (_h = (_g = cmpt === null || cmpt === void 0 ? void 0 : cmpt.props.env) === null || _g === void 0 ? void 0 : _g.session) !== null && _h !== void 0 ? _h : 'global';
                            /** 仅查找当前session的组件 */
                            if (cmptMaps[pathKey] || session !== cmptSession) {
                                continue;
                            }
                            /** 非Scoped组件, 查找其所属的父容器 */
                            if ((cmpt === null || cmpt === void 0 ? void 0 : cmpt.setData) && typeof cmpt.setData === 'function') {
                                cmptMaps[pathKey] = cmpt;
                                continue;
                            }
                            try {
                                /** 查找Scoped组件中的引用 */
                                for (var _j = (e_2 = void 0, __values(Object.keys(schema))), _k = _j.next(); !_k.done; _k = _j.next()) {
                                    var key = _k.value;
                                    var expression = schema[key];
                                    if (typeof expression === 'string' &&
                                        isPureVariable(expression)) {
                                        /** 考虑到数据映射函数的情况，将宿主变量提取出来 */
                                        var host = expression
                                            .substring(2, expression.length - 1)
                                            .split('|')[0];
                                        if (host && host === path) {
                                            cmptMaps[pathKey] = cmpt;
                                            break;
                                        }
                                    }
                                }
                            }
                            catch (e_2_1) { e_2 = { error: e_2_1 }; }
                            finally {
                                try {
                                    if (_k && !_k.done && (_b = _j.return)) _b.call(_j);
                                }
                                finally { if (e_2) throw e_2.error; }
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (scopedCmptList_1_1 && !scopedCmptList_1_1.done && (_a = scopedCmptList_1.return)) _a.call(scopedCmptList_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
            });
            return values(cmptMaps);
        },
        getComponents: function () {
            return components.concat();
        },
        reload: function (target, ctx) {
            var scoped = this;
            var targets = typeof target === 'string' ? splitTarget(target) : target;
            targets.forEach(function (name) {
                var idx2 = name.indexOf('?');
                var query = null;
                if (~idx2) {
                    var queryObj = qsparse(name
                        .substring(idx2 + 1)
                        .replace(/\$\{(.*?)\}/, function (_, match) { return '${' + encodeURIComponent(match) + '}'; }));
                    query = dataMapping(queryObj, ctx);
                    name = name.substring(0, idx2);
                }
                var idx = name.indexOf('.');
                var subPath = '';
                if (~idx) {
                    subPath = name.substring(1 + idx);
                    name = name.substring(0, idx);
                }
                if (name === 'window') {
                    if (query) {
                        var link = location.pathname + '?' + qsstringify(query);
                        env ? env.updateLocation(link, true) : location.replace(link);
                    }
                    else {
                        location.reload();
                    }
                }
                else {
                    var component = scoped.getComponentByName(name) || scoped.getComponentById(name);
                    component &&
                        component.reload &&
                        component.reload(subPath, query, ctx);
                }
            });
        },
        send: function (receive, values) {
            var scoped = this;
            var receives = typeof receive === 'string' ? splitTarget(receive) : receive;
            // todo 没找到做提示！
            receives.forEach(function (name) {
                var askIdx = name.indexOf('?');
                if (~askIdx) {
                    var query = name.substring(askIdx + 1);
                    var queryObj = qsparse(query.replace(/\$\{(.*?)\}/, function (_, match) { return '${' + encodeURIComponent(match) + '}'; }));
                    name = name.substring(0, askIdx);
                    values = dataMapping(queryObj, values);
                }
                var idx = name.indexOf('.');
                var subPath = '';
                if (~idx) {
                    subPath = name.substring(1 + idx);
                    name = name.substring(0, idx);
                }
                var component = scoped.getComponentByName(name);
                if (component && component.receive) {
                    component.receive(values, subPath);
                }
                else if (name === 'window' && env && env.updateLocation) {
                    var query = __assign(__assign({}, parseQuery(location)), values);
                    var link = location.pathname + '?' + qsstringify(query);
                    env.updateLocation(link, true);
                }
            });
        },
        /**
         * 主要是用来关闭指定弹框的
         *
         * @param target 目标 name
         */
        close: function (target) {
            var scoped = this;
            if (typeof target === 'string') {
                // 过滤已经关掉的，当用户 close 配置多个弹框 name 时会出现这种情况
                splitTarget(target)
                    .map(function (name) { return scoped.getComponentByName(name); })
                    .filter(function (component) { return component && component.props.show; })
                    .forEach(closeDialog);
            }
        },
        /**
         * 关闭指定id的弹窗
         * @param id
         */
        closeById: function (id) {
            var scoped = this;
            var component = scoped.getComponentById(id);
            if (component && component.props.show) {
                closeDialog(component);
            }
        },
        doAction: function (actions, ctx) {
            return __awaiter(this, void 0, void 0, function () {
                var renderer, rendererEvent;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            renderer = this.getComponents()[0];
                            rendererEvent = createRendererEvent('embed', {
                                env: env,
                                nativeEvent: undefined,
                                data: createObject(renderer.props.data, ctx),
                                scoped: this
                            });
                            return [4 /*yield*/, runActions(actions, renderer, rendererEvent)];
                        case 1:
                            _a.sent();
                            if (rendererEvent.prevented) {
                                return [2 /*return*/];
                            }
                            return [2 /*return*/];
                    }
                });
            });
        }
    };
    registerFunction('GETRENDERERDATA', function (componentId, path, scoped) {
        var _a;
        if (scoped === void 0) { scoped = self; }
        var component = scoped.getComponentById(componentId);
        var data = (_a = component === null || component === void 0 ? void 0 : component.getData) === null || _a === void 0 ? void 0 : _a.call(component);
        if (path) {
            var variable = getVariable(data, path);
            return variable;
        }
        return data;
    });
    registerFunction('GETRENDERERPROP', function (componentId, path, scoped) {
        if (scoped === void 0) { scoped = self; }
        var component = scoped.getComponentById(componentId);
        var props = component === null || component === void 0 ? void 0 : component.props;
        if (path) {
            var variable = getVariable(props, path);
            return variable;
        }
        return props;
    });
    if (!parent) {
        return self;
    }
    !parent.children && (parent.children = []);
    // 把孩子带上
    parent.children.push(self);
    return self;
}
function closeDialog(component) {
    component.context
        .getComponents()
        .filter(function (item) {
        return item &&
            (item.props.type === 'dialog' || item.props.type === 'drawer') &&
            item.props.show;
    })
        .forEach(closeDialog);
    component.props.onClose && component.props.onClose();
}
function HocScoped(ComposedComponent, rendererType) {
    var ScopedComponent = /** @class */ (function (_super) {
        __extends(ScopedComponent, _super);
        function ScopedComponent(props, context) {
            var _this = _super.call(this, props) || this;
            _this.scoped = createScopedTools(_this.props.$path, context, _this.props.env, rendererType);
            var scopeRef = props.scopeRef;
            scopeRef && scopeRef(_this.scoped);
            return _this;
        }
        ScopedComponent.prototype.getWrappedInstance = function () {
            return this.ref;
        };
        ScopedComponent.prototype.childRef = function (ref) {
            while (ref && ref.getWrappedInstance) {
                ref = ref.getWrappedInstance();
            }
            this.ref = ref;
        };
        ScopedComponent.prototype.componentWillUnmount = function () {
            var scopeRef = this.props.scopeRef;
            scopeRef && scopeRef(null);
            delete this.scoped;
        };
        ScopedComponent.prototype.render = function () {
            var _a = this.props; _a.scopeRef; var rest = __rest(_a, ["scopeRef"]);
            return (React.createElement(ScopedContext.Provider, { value: this.scoped },
                React.createElement(ComposedComponent, __assign({}, rest /* todo */, { ref: this.childRef }))));
        };
        ScopedComponent.displayName = "Scoped(".concat(ComposedComponent.displayName || ComposedComponent.name, ")");
        ScopedComponent.contextType = ScopedContext;
        ScopedComponent.ComposedComponent = ComposedComponent;
        __decorate([
            autobind,
            __metadata("design:type", Function),
            __metadata("design:paramtypes", [Object]),
            __metadata("design:returntype", void 0)
        ], ScopedComponent.prototype, "childRef", null);
        return ScopedComponent;
    }(React.Component));
    hoistNonReactStatic(ScopedComponent, ComposedComponent);
    return ScopedComponent;
}

export { HocScoped, ScopedContext, HocScoped as default, filterTarget, splitTarget };
