/**
 * amis-core v6.13.0
 * Copyright 2018-2025 fex
 */

import { __rest, __assign } from 'tslib';
import { stores, defaultOptions } from './factory.js';
export { Renderer, addSchemaFilter, clearStoresCache, extendDefaultEnv, filterSchema, getGlobalOptions, getRendererByName, getRenderers, loadAllAsyncRenderers, loadAsyncRenderer, loadAsyncRenderersByType, registerRenderer, resolveRenderer, setGlobalOptions, unRegisterRenderer, updateEnv } from './factory.js';
import './polyfills.js';
import './renderers/builtin.js';
import './renderers/register.js';
export { register, testResolveVariableAndFilter } from './utils/tpl-builtin.js';
import { wrapFetcher } from './utils/api.js';
export { addApiRequestAdaptor, addApiResponseAdaptor, addApiResponseAdator, buildApi, callStrFunction, clearApiCache, getApiCache, isApiOutdated, isApiOutdatedWithData, isEffectiveApi, isSameApi, isValidApi, jsFetcher, jsonpFetcher, normalizeApi, normalizeApiResponseData, removeApiRequestAdaptor, removeApiResponseAdaptor, responseAdaptor, setApiCache, shouldBlockedBySendOnApi, str2AsyncFunction, str2function, wrapAdaptor, wrapFetcher } from './utils/api.js';
export { attachmentAdpator } from './utils/attachmentAdpator.js';
export { autobindMethod, bind } from './utils/autobind.js';
export { chromeVersion, isSafari } from './utils/browser.js';
export { ColorScale } from './utils/ColorScale.js';
export { columnsSplit } from './utils/columnsSplit.js';
export { concatData } from './utils/concatData.js';
export { dataMapping, resolveMapping, resolveMappingObject } from './utils/dataMapping.js';
export { DataSchema } from './utils/DataSchema.js';
export { DATASCHEMA_TYPE_MAP, DataScope } from './utils/DataScope.js';
export { filterDate, normalizeDate, parseDuration, relativeValueRe } from './utils/date.js';
import { enableDebug, disableDebug } from './utils/debug.js';
export { DebugWrapper, JsonView, debug, disableDebug, enableDebug, safeStringify, traceProps, warning } from './utils/debug.js';
export { calculateHeight, calculatePosition, getContainer, getStyleNumber, ownerDocument, renderTextByKeyword } from './utils/dom.js';
export { ServerError } from './utils/errors.js';
export { escapeHtml } from './utils/escapeHtml.js';
export { filterClassNameObject, getExprProperties, hasExprPropertiesChanged } from './utils/filter-schema.js';
import './utils/filter.js';
export { formatDuration } from './utils/formatDuration.js';
export { FormulaExec, formulaExec, isExpression, isNeedFormula, registerFormulaExec, replaceExpression } from './utils/formula.js';
export { getVariable } from './utils/getVariable.js';
export { collectVariables } from './utils/grammar.js';
export { handleAction } from './utils/handleAction.js';
import { promisify } from './utils/helper.js';
import * as helper from './utils/helper.js';
export { helper as utils };
export { JSONTraverse, JSONValueMap, SkipOperation, TEST_ID_KEY, TestIdBuilder, ValidateError, __uri, anyChanged, applyFilters, autobind, buildTrackExpression, bulkBindFunctions, camel, chainEvents, chainFunctions, changedEffect, convertArrayValueToMoment, countTree, detectPropValueChanged, difference, differenceFromAll, eachTree, evalTrackExpression, everyTree, filterTree, findIndex, findObjectsWithKey, findTree, findTreeAll, findTreeIndex, flattenTree, flattenTreeWithLeafNodes, formateCheckThemeCss, formateId, getLevelFromClassName, getPropValue, getRange, getScrollParent, getScrollbarWidth, getTree, getTreeAncestors, getTreeDepth, getTreeParent, getWidthRate, guid, hasAbility, hasFile, hasOwnPropertyInPath, hasVisibleExpression, hashCode, immutableExtends, importLazyComponent, injectPropsToObject, isArrayChildrenModified, isBreakpoint, isClickOnInput, isDisabled, isEmpty, isMobile, isMobileDevice, isNumeric, isObjectShallowModified, isSuperDataModified, isUnfolded, isVisible, lcFirst, loadScript, loadStyle, makeColumnClassBuild, makeHorizontalDeeper, mapObject, mapTree, noop, normalizeNodePath, object2formData, omitControls, padArr, parsePrimitiveQueryString, parseQuery, pickEventsProps, preventDefault, promisify, qsparse, qsstringify, range, removeHTMLTag, repeatCount, replaceUrlParams, rmUndefined, someTree, sortArray, spliceTree, supportsMjs, syncDataFromSuper, ucFirst, until, uuid, uuidv4, visibilityFilter } from './utils/helper.js';
export { highlight } from './utils/highlight.js';
export { generateIcon, getCustomVendor, registerCustomVendor } from './utils/icon.js';
export { getImageDimensions, toDataURL } from './utils/image.js';
export { isPureVariable } from './utils/isPureVariable.js';
export { JSONSchme2AMisSchema } from './utils/json-schema-2-amis-schema.js';
export { keyToPath } from './utils/keyToPath.js';
export { labelToString } from './utils/labelToString.js';
export { loopTooMuch } from './utils/loopTooMuch.js';
export { makeSorter } from './utils/makeSorter.js';
export { normalizeLink } from './utils/normalizeLink.js';
export { normalizeOptions } from './utils/normalizeOptions.js';
export { cloneObject, createObject, createObjectFromChain, deleteVariable, extendObject, extractObjectChain, injectObjectChain, isObject, pickValues, setVariable } from './utils/object.js';
export { offset } from './utils/offset.js';
export { offsetParent } from './utils/offsetParent.js';
export { getOptionValue, getOptionValueBindField, matchOptionValue, optionValueCompare } from './utils/optionValueCompare.js';
export { position } from './utils/position.js';
export { prettyBytes } from './utils/prettyBytes.js';
export { bindEvent, bindGlobalEvent, bindGlobalEventForRenderer, createRendererEvent, dispatchEvent, dispatchGlobalEvent, dispatchGlobalEventForRenderer, getMatchedEventTargets, getRendererEventListeners, resolveEventData } from './utils/renderer-event.js';
import { replaceText } from './utils/replaceText.js';
export { replaceText } from './utils/replaceText.js';
export { appearSensor, getComputedStyle, resizeSensor, resizeSensorV2 } from './utils/resize-sensor.js';
export { resolveVariable } from './utils/resolveVariable.js';
export { resolveVariableAndFilter } from './utils/resolveVariableAndFilter.js';
export { resolveVariableAndFilterForAsync, setFormulaEvalErrorHandler } from './utils/resolveVariableAndFilterForAsync.js';
export { RootClose } from './utils/RootClose.js';
export { scrollPosition } from './utils/scrollPosition.js';
export { SimpleMap } from './utils/SimpleMap.js';
export { string2regExp } from './utils/string2regExp.js';
export { buildStyle, mergeStyle, normalizeStyle } from './utils/style.js';
export { memoParse, tokenize } from './utils/tokenize.js';
export { asyncFilter, evalExpression, evalExpressionWithConditionBuilder, evalExpressionWithConditionBuilderAsync, evalJS, filter, registerTplEnginer, setCustomEvalExpression, setCustomEvalJs } from './utils/tpl.js';
export { uncontrollable } from './utils/uncontrollable.js';
export { addRule, str2rules, validate, validateMessages, validateObject, validations } from './utils/validations.js';
export { toNumber } from './utils/toNumber.js';
export { decodeEntity } from './utils/decodeEntity.js';
export { addStyle, findOrCreateStyle, formatCustomStyle, formatInputThemeCss, formatStyle, getValueByPath, inheritValueMap, insertCustomStyle, insertEditCustomStyle, insertStyle, removeCustomStyle, setThemeClassName, valueMap as styleMap, valueMap } from './utils/style-helper.js';
export { getConditionComputers, registerConditionComputer, resolveCondition, resolveConditionAsync, setConditionComputeErrorHandler } from './utils/resolveCondition.js';
export { arraySlice } from './utils/arraySlice.js';
export { isIntegerInRange, numberFormatter, numberReverter, safeAdd, safeSub } from './utils/math.js';
export { default as animation } from './utils/Animation.js';
export { createAnimationStyle } from './utils/animations.js';
import { RendererStore } from './store/index.js';
export { RegisterStore, RendererStore, registerStore } from './store/index.js';
export { buildGlobalVariable, createGlobalVarState, isGlobalVarExpression, observeGlobalVars, registerGlobalVariableHandler } from './globalVar.js';
import './globalVarClientHandler.js';
import './globalVarDefaultValueHandler.js';
import { getEnv } from 'mobx-state-tree';
import { getDefaultLocale, makeTranslator } from './locale.js';
export { extendLocale, getDefaultLocale, format as localeFormatter, localeable, makeTranslator, register as registerLocale, removeLocaleData, setDefaultLocale } from './locale.js';
export { HocScoped as Scoped, ScopedContext, filterTarget, splitTarget } from './Scoped.js';
import { getClassPrefix, getTheme } from './theme.js';
export { classnames, getClassPrefix, getTheme, makeClassnames, setDefaultTheme, theme, themeable } from './theme.js';
import './actions/LoopAction.js';
import './actions/BreakAction.js';
import './actions/ContinueAction.js';
import './actions/SwitchAction.js';
import './actions/ParallelAction.js';
import './actions/CustomAction.js';
import './actions/BroadcastAction.js';
import './actions/CmptAction.js';
import './actions/StatusAction.js';
import './actions/AjaxAction.js';
import './actions/CopyAction.js';
import './actions/DialogAction.js';
import './actions/DrawerAction.js';
import './actions/EmailAction.js';
import './actions/EventAction.js';
import './actions/LinkAction.js';
import './actions/ToastAction.js';
import './actions/WaitAction.js';
import './actions/PageAction.js';
import './actions/PrintAction.js';
export { LoopStatus, getActionByType, getTargetComponent, registerAction, registerActionMappingIgnoreKey, registerActionMappingIgnoreMap, registerComponentActionMappingIgnoreKey, registerComponentActionMappingIgnoreMap, runAction, runActions } from './actions/Action.js';
export { FormItem, FormItemWrap, getFormItemByName, registerFormItem } from './renderers/Item.js';
export { OptionsControl, OptionsControlBase, registerOptionsControl } from './renderers/Options.js';
import ScopedRootRenderer from './Root.js';
export { addRootWrapper } from './Root.js';
import { envOverwrite } from './envOverwrite.js';
export { envOverwrite } from './envOverwrite.js';
import { EnvContext } from './env.js';
export { EnvContext } from './env.js';
import React from 'react';
export { AsyncEvaluator, Evaluator, evaluate, evaluateForAsync, extendsFilters, filters, getFilters, lexer, parse, registerFilter, registerFunction } from 'amis-formula';
export { default as LazyComponent } from './components/LazyComponent.js';
export { default as Overlay } from './components/Overlay.js';
export { default as PopOver } from './components/PopOver.js';
export { default as ErrorBoundary } from './components/ErrorBoundary.js';
export { FormRenderer } from './renderers/Form.js';
export { RENDERER_TRANSMISSION_OMIT_PROPS, SchemaRenderer } from './SchemaRenderer.js';
export { default as CustomStyle } from './components/CustomStyle.js';
export { StatusScoped } from './StatusScoped.js';
export { default as styleManager } from './StyleManager.js';
export { stripNumber } from './utils/stripNumber.js';
export { iRendererStore } from './store/iRenderer.js';
export { ServiceStore } from './store/service.js';
export { FormStore } from './store/form.js';
export { ComboStore } from './store/combo.js';
export { CRUDStore } from './store/crud.js';
export { TableStore } from './store/table.js';
export { TableStore2 } from './store/table2.js';
export { ListStore } from './store/list.js';
export { ModalStore } from './store/modal.js';
export { FormItemStore } from './store/formItem.js';
export { PaginationStore } from './store/pagination.js';
export { AppStore } from './store/app.js';
export { StoreNode } from './store/node.js';

/** @license amis v@version
 *
 * Copyright Baidu
 *
 * This source code is licensed under the Apache license found in the
 * LICENSE file in the root directory of this source tree.
 */
var classPrefix = getClassPrefix();
// @ts-ignore
var version = '6.13.0';
window.amisVersionInfo = {
    version: '6.13.0',
    buildTime: '2025-08-12T03:18:10.080Z'
};
function render(schema, _a, options, pathPrefix) {
    if (_a === void 0) { _a = {}; }
    var key = _a.key, props = __rest(_a, ["key"]);
    if (options === void 0) { options = {}; }
    if (pathPrefix === void 0) { pathPrefix = ''; }
    return (React.createElement(AMISRenderer, __assign({}, props, { key: key, schema: schema, pathPrefix: pathPrefix, options: options })));
}
function AMISRenderer(_a) {
    var schema = _a.schema, options = _a.options, pathPrefix = _a.pathPrefix, props = __rest(_a, ["schema", "options", "pathPrefix"]);
    var locale = props.locale || getDefaultLocale();
    // 兼容 locale 的不同写法
    locale =
        locale === 'en'
            ? 'en-US'
            : locale === 'zh' || locale === 'cn'
                ? 'zh-CN'
                : locale.replace('_', '-');
    var translate = React.useCallback(function () {
        var fn = props.translate || makeTranslator(locale);
        return fn.apply(null, arguments);
    }, [locale, props.translate]);
    var store = React.useMemo(function () {
        var store = stores[options.session || 'global'];
        if (!store) {
            options = __assign(__assign(__assign({}, defaultOptions), options), { fetcher: options.fetcher
                    ? wrapFetcher(options.fetcher, options.tracker)
                    : defaultOptions.fetcher, confirm: promisify(options.confirm || defaultOptions.confirm || window.confirm), locale: locale, translate: translate });
            store = RendererStore.create({}, options);
            stores[options.session || 'global'] = store;
        }
        else {
            // 更新 env
            var env_1 = getEnv(store);
            Object.assign(env_1, __assign(__assign({}, options), { fetcher: options.fetcher
                    ? wrapFetcher(options.fetcher, options.tracker)
                    : env_1.fetcher, confirm: options.confirm ? promisify(options.confirm) : env_1.confirm, locale: locale, translate: translate }));
        }
        window.amisStore = store; // 为了方便 debug.
        return store;
    }, Object.keys(options).concat(Object.values(options)).concat(locale));
    var env = getEnv(store);
    var theme = props.theme || options.theme || 'cxd';
    if (theme === 'default') {
        theme = 'cxd';
    }
    env.theme = getTheme(theme);
    React.useEffect(function () {
        env.enableAMISDebug ? enableDebug() : disableDebug();
        return function () { return env.enableAMISDebug || disableDebug(); };
    }, [env.enableAMISDebug]);
    if (props.locale !== undefined) {
        env.translate = translate;
        env.locale = locale;
    }
    // 默认将开启移动端原生 UI
    if (options.useMobileUI !== false) {
        props.mobileUI = env.isMobile();
    }
    // 根据环境覆盖 schema，这个要在最前面做，不然就无法覆盖 validations
    schema = React.useMemo(function () {
        schema = envOverwrite(schema, locale, env.isMobile() ? 'mobile' : 'pc');
        // todo 和 envOverwrite 一起处理，减少循环次数
        schema = replaceText(schema, options.replaceText, env.replaceTextIgnoreKeys);
        return schema;
    }, [schema, locale, options.replaceText]);
    return (React.createElement(EnvContext.Provider, { value: env },
        React.createElement(ScopedRootRenderer, __assign({}, props, { schema: schema, pathPrefix: pathPrefix, rootStore: store, env: env, theme: theme, locale: locale, translate: translate }))));
}

export { classPrefix, render, version };
