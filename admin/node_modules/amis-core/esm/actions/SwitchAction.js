/**
 * amis-core v6.13.0
 * Copyright 2018-2025 fex
 */

import { __awaiter, __generator, __values } from 'tslib';
import { evalExpressionWithConditionBuilderAsync } from '../utils/tpl.js';
import { registerAction, runActions } from './Action.js';

/**
 * 排他动作
 */
var SwitchAction = /** @class */ (function () {
    function SwitchAction() {
    }
    SwitchAction.prototype.run = function (action, renderer, event, mergeData) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, branch, isPass, e_1_1;
            var e_1, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 6, 7, 8]);
                        _a = __values(action.children || []), _b = _a.next();
                        _d.label = 1;
                    case 1:
                        if (!!_b.done) return [3 /*break*/, 5];
                        branch = _b.value;
                        if (!branch.expression) {
                            return [3 /*break*/, 4];
                        }
                        return [4 /*yield*/, evalExpressionWithConditionBuilderAsync(branch.expression, mergeData)];
                    case 2:
                        isPass = _d.sent();
                        if (!isPass) return [3 /*break*/, 4];
                        return [4 /*yield*/, runActions(branch, renderer, event)];
                    case 3:
                        _d.sent();
                        // 去掉runAllMatch，这里只做排他，多个可以直接通过expression
                        return [3 /*break*/, 5];
                    case 4:
                        _b = _a.next();
                        return [3 /*break*/, 1];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_1_1 = _d.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    return SwitchAction;
}());
registerAction('switch', new SwitchAction());

export { SwitchAction };
