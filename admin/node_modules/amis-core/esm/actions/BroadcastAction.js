/**
 * amis-core v6.13.0
 * Copyright 2018-2025 fex
 */

import { __awaiter, __generator } from 'tslib';
import '../utils/helper.js';
import { dispatchGlobalEventForRenderer } from '../utils/renderer-event.js';
import { registerAction } from './Action.js';
import { createObject } from '../utils/object.js';

/**
 * broadcast
 *
 * @export
 * @class BroadcastAction
 * @implements {Action}
 */
var BroadcastAction = /** @class */ (function () {
    function BroadcastAction() {
    }
    BroadcastAction.prototype.run = function (action, renderer, event) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var eventName;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (!((_a = action.args) === null || _a === void 0 ? void 0 : _a.eventName) && !action.eventName) {
                            console.error('eventName 未定义，请定义事件名称');
                            return [2 /*return*/];
                        }
                        // 作为一个新的事件，需要把广播动作的args参数追加到事件数据中
                        event.setData(createObject(event.data, (_b = action.data) !== null && _b !== void 0 ? _b : {}));
                        eventName = ((_c = action.args) === null || _c === void 0 ? void 0 : _c.eventName) || action.eventName;
                        return [4 /*yield*/, dispatchGlobalEventForRenderer(eventName, renderer, event.context.scoped, action.data, event)];
                    case 1: 
                    // 直接触发对应的动作
                    return [2 /*return*/, _d.sent()];
                }
            });
        });
    };
    return BroadcastAction;
}());
registerAction('broadcast', new BroadcastAction());

export { BroadcastAction };
