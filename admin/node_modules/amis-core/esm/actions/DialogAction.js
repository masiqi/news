/**
 * amis-core v6.13.0
 * Copyright 2018-2025 fex
 */

import { __awaiter, __generator, __assign } from 'tslib';
import 'amis-formula';
import 'moment';
import { extendObject } from '../utils/object.js';
import '../utils/memoryParse.js';
import '@rc-component/mini-decimal';
import 'lodash/isPlainObject';
import '../utils/filter.js';
import '../utils/api.js';
import 'file-saver';
import '../utils/browser.js';
import '../utils/ColorScale.js';
import 'react';
import 'lodash/chunk';
import '../utils/DataSchema.js';
import '../utils/DataScope.js';
import '../utils/debug.js';
import 'react-dom';
import '../utils/helper.js';
import '../utils/errors.js';
import { filter } from '../utils/tpl.js';
import 'lodash/isObject';
import 'lodash/isString';
import 'lodash/isBoolean';
import '../utils/image.js';
import 'lodash/isEqual';
import { registerAction } from './Action.js';
import 'lodash/debounce';
import '../utils/resize-sensor.js';
import 'react-overlays/useRootClose';
import '../utils/SimpleMap.js';
import 'lodash/mapValues';
import 'lodash/camelCase';
import 'lodash/cloneDeep';
import 'lodash/map';
import 'lodash/isEmpty';
import 'lodash/kebabCase';
import 'uncontrollable';
import 'hoist-non-react-statics';
import '../utils/validations.js';
import '../utils/resolveCondition.js';
import 'mobx';
import '../utils/Animation.js';

/**
 * 打开弹窗动作
 *
 * @export
 * @class DialogAction
 * @implements {Action}
 */
var DialogAction = /** @class */ (function () {
    function DialogAction() {
    }
    DialogAction.prototype.run = function (action, renderer, event) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var ret, _c, confirmed, value;
            var _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        // 防止editor preview模式下执行
                        if (action.$$id !== undefined) {
                            return [2 /*return*/];
                        }
                        ret = renderer.handleAction
                            ? renderer.handleAction(event, {
                                actionType: 'dialog',
                                dialog: action.dialog,
                                reload: 'none',
                                data: action.rawData
                            }, action.data)
                            : (_b = (_a = renderer.props).onAction) === null || _b === void 0 ? void 0 : _b.call(_a, event, {
                                actionType: 'dialog',
                                dialog: action.dialog,
                                reload: 'none',
                                data: action.rawData
                            }, action.data);
                        event.pendingPromise.push(ret);
                        if (!action.waitForAction) return [3 /*break*/, 2];
                        return [4 /*yield*/, ret];
                    case 1:
                        _c = _e.sent(), confirmed = _c.confirmed, value = _c.value;
                        event.setData(extendObject(event.data, (_d = {},
                            _d[action.outputVar || 'dialogResponse'] = {
                                confirmed: confirmed,
                                value: value
                            },
                            _d)));
                        _e.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    return DialogAction;
}());
/**
 * 关闭弹窗动作
 *
 * @export
 * @class CloseDialogAction
 * @implements {Action}
 */
var CloseDialogAction = /** @class */ (function () {
    function CloseDialogAction() {
    }
    CloseDialogAction.prototype.run = function (action, renderer, event) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_c) {
                // todo 支持 waitForAction，等待弹窗关闭后再执行后续动作
                if (action.componentId) {
                    // 关闭指定弹窗
                    event.context.scoped.closeById(action.componentId);
                }
                else {
                    // 关闭当前弹窗
                    (_b = (_a = renderer.props).onAction) === null || _b === void 0 ? void 0 : _b.call(_a, event, __assign(__assign({}, action), { actionType: 'close' }), action.data);
                }
                return [2 /*return*/];
            });
        });
    };
    return CloseDialogAction;
}());
/**
 * alert提示动作
 */
var AlertAction = /** @class */ (function () {
    function AlertAction() {
    }
    AlertAction.prototype.run = function (action, renderer, event) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_l) {
                (_b = (_a = event.context.env).alert) === null || _b === void 0 ? void 0 : _b.call(_a, (_d = filter((_c = action.dialog) === null || _c === void 0 ? void 0 : _c.msg, event.data)) !== null && _d !== void 0 ? _d : (_e = action.args) === null || _e === void 0 ? void 0 : _e.msg, (_g = filter((_f = action.dialog) === null || _f === void 0 ? void 0 : _f.title, event.data)) !== null && _g !== void 0 ? _g : (_h = action.args) === null || _h === void 0 ? void 0 : _h.title, (_k = filter((_j = action.dialog) === null || _j === void 0 ? void 0 : _j.className, event.data)) !== null && _k !== void 0 ? _k : '');
                return [2 /*return*/];
            });
        });
    };
    return AlertAction;
}());
/**
 * confirm确认提示动作
 */
var ConfirmAction = /** @class */ (function () {
    function ConfirmAction() {
    }
    ConfirmAction.prototype.run = function (action, renderer, event) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
        return __awaiter(this, void 0, void 0, function () {
            var modal, type, confirmed_1, confirmed;
            return __generator(this, function (_v) {
                switch (_v.label) {
                    case 0:
                        modal = (_a = action.dialog) !== null && _a !== void 0 ? _a : action.args;
                        if (modal.$ref && renderer.props.resolveDefinitions) {
                            modal = __assign(__assign({}, renderer.props.resolveDefinitions(modal.$ref)), modal);
                        }
                        type = modal === null || modal === void 0 ? void 0 : modal.type;
                        if (!!type) return [3 /*break*/, 2];
                        return [4 /*yield*/, ((_c = (_b = event.context.env).confirm) === null || _c === void 0 ? void 0 : _c.call(_b, filter(modal === null || modal === void 0 ? void 0 : modal.msg, event.data) || ((_d = action.args) === null || _d === void 0 ? void 0 : _d.msg), filter((_e = action.dialog) === null || _e === void 0 ? void 0 : _e.title, event.data) || ((_f = action.args) === null || _f === void 0 ? void 0 : _f.title), {
                                closeOnEsc: filter((_g = action.dialog) === null || _g === void 0 ? void 0 : _g.closeOnEsc, event.data) ||
                                    ((_h = action.args) === null || _h === void 0 ? void 0 : _h.closeOnEsc),
                                size: filter((_j = action.dialog) === null || _j === void 0 ? void 0 : _j.size, event.data) || ((_k = action.args) === null || _k === void 0 ? void 0 : _k.size),
                                confirmText: filter((_l = action.dialog) === null || _l === void 0 ? void 0 : _l.confirmText, event.data) ||
                                    ((_m = action.args) === null || _m === void 0 ? void 0 : _m.confirmText),
                                cancelText: filter((_o = action.dialog) === null || _o === void 0 ? void 0 : _o.cancelText, event.data) ||
                                    ((_p = action.args) === null || _p === void 0 ? void 0 : _p.cancelText),
                                confirmBtnLevel: filter((_q = action.dialog) === null || _q === void 0 ? void 0 : _q.confirmBtnLevel, event.data) ||
                                    ((_r = action.args) === null || _r === void 0 ? void 0 : _r.confirmBtnLevel),
                                cancelBtnLevel: filter((_s = action.dialog) === null || _s === void 0 ? void 0 : _s.cancelBtnLevel, event.data) ||
                                    ((_t = action.args) === null || _t === void 0 ? void 0 : _t.cancelBtnLevel),
                                className: filter((_u = action.dialog) === null || _u === void 0 ? void 0 : _u.className, event.data) || ''
                            }))];
                    case 1:
                        confirmed_1 = _v.sent();
                        return [2 /*return*/, confirmed_1];
                    case 2: return [4 /*yield*/, new Promise(function (resolve, reject) {
                            var _a, _b;
                            renderer.handleAction
                                ? renderer.handleAction(event, {
                                    actionType: 'dialog',
                                    dialog: modal,
                                    data: action.rawData,
                                    reload: 'none',
                                    callback: function (result) { return resolve(result); }
                                }, action.data)
                                : (_b = (_a = renderer.props).onAction) === null || _b === void 0 ? void 0 : _b.call(_a, event, {
                                    actionType: 'dialog',
                                    dialog: modal,
                                    data: action.rawData,
                                    reload: 'none',
                                    callback: function (result) { return resolve(result); }
                                }, action.data);
                        })];
                    case 3:
                        confirmed = _v.sent();
                        return [2 /*return*/, confirmed];
                }
            });
        });
    };
    return ConfirmAction;
}());
registerAction('dialog', new DialogAction());
registerAction('closeDialog', new CloseDialogAction());
registerAction('alert', new AlertAction());
registerAction('confirmDialog', new ConfirmAction());

export { AlertAction, CloseDialogAction, ConfirmAction, DialogAction };
