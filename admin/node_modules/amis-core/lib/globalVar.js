/**
 * amis-core v6.13.0
 * Copyright 2018-2025 fex
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var formula = require('./utils/formula.js');
var mobx = require('mobx');
var resolveVariableAndFilter = require('./utils/resolveVariableAndFilter.js');
var isPlainObject = require('lodash/isPlainObject');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var isPlainObject__default = /*#__PURE__*/_interopDefaultLegacy(isPlainObject);

/**
 * 全局变量
 *
 * 用于实现跨组件、跨页面的数据共享，支持持久化。
 */
var handlers = [];
/**
 * 注册全局变量处理器
 * @param handler
 */
function registerGlobalVariableHandler(handler) {
    handlers.push(handler);
}
/**
 * 通过处理器构建全局变量细节对象，用于后续的初始化、校验、存储等操作
 * @param variable
 * @param context
 * @returns
 */
function buildGlobalVariable(variable, context) {
    var postHandlers = [];
    var result = handlers.reduce(function (item, handler) {
        var result = handler(item, context);
        if (typeof result === 'function') {
            postHandlers.push(result);
        }
        return (result !== null && result !== void 0 ? result : item);
    }, variable);
    result = postHandlers.reduce(function (item, handler) { var _a; return (_a = handler(item, context)) !== null && _a !== void 0 ? _a : item; }, result);
    return result;
}
/**
 * 构建变量初始状态
 * @returns
 */
function createGlobalVarState() {
    return {
        value: undefined,
        pristine: undefined,
        initialized: false,
        valid: true,
        errorMessages: [],
        touched: false,
        saved: false
    };
}
// 前两个是历史遗留，后两个是新的
var globalVarFields = ['__page.', 'appVariables.', 'global.', 'globalState.'];
function isGlobalVarExpression(value) {
    return (typeof value === 'string' &&
        formula.isExpression(value) &&
        globalVarFields.some(function (k) { return value.includes(k); }));
}
/**
 * 监控组件的全局变量
 * @param schema
 * @param topStore
 * @param callback
 * @returns
 */
function observeGlobalVars(schema, topStore, callback) {
    var expressions = [];
    Object.keys(schema).forEach(function (key) {
        var value = schema[key];
        if (isGlobalVarExpression(value)) {
            expressions.push({
                key: key,
                value: value
            });
        }
        else if (isPlainObject__default["default"](value) && !value.type) {
            // 最多支持两层，多了可能就会有性能问题了
            // 再多一层主要是为了支持某些 api 配置的是对象形式
            Object.keys(value).forEach(function (k) {
                if (isGlobalVarExpression(value[k])) {
                    expressions.push({
                        key: "".concat(key, ".").concat(k),
                        value: value[k]
                    });
                }
            });
        }
        else if ([
            'items',
            'body',
            'buttons',
            'header',
            'columns',
            'tabs',
            'footer',
            'actions',
            'toolbar'
        ].includes(key)) {
            var items = Array.isArray(value) ? value : [value];
            items.forEach(function (item) {
                if (isGlobalVarExpression(item === null || item === void 0 ? void 0 : item.visibleOn)) {
                    expressions.push({
                        key: "".concat(key, ".x.visibleOn"),
                        value: item.visibleOn
                    });
                }
                else if (isGlobalVarExpression(item === null || item === void 0 ? void 0 : item.hiddenOn)) {
                    expressions.push({
                        key: "".concat(key, ".x.hiddenOn"),
                        value: item.hiddenOn
                    });
                }
            });
        }
    });
    if (!expressions.length) {
        return function () { };
    }
    var unReaction = mobx.reaction(function () {
        return expressions
            .map(function (exp) {
            return "".concat(exp.key, ":").concat(resolveVariableAndFilter.resolveVariableAndFilter(exp.value, topStore.nextGlobalData, '| json' // 如果用了复杂对象，要靠这个来比较
            ));
        })
            .join(',');
    }, callback);
    return unReaction;
}

exports.buildGlobalVariable = buildGlobalVariable;
exports.createGlobalVarState = createGlobalVarState;
exports.isGlobalVarExpression = isGlobalVarExpression;
exports.observeGlobalVars = observeGlobalVars;
exports.registerGlobalVariableHandler = registerGlobalVariableHandler;
