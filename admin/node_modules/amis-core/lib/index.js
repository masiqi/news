/**
 * amis-core v6.13.0
 * Copyright 2018-2025 fex
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var factory = require('./factory.js');
require('./polyfills.js');
require('./renderers/builtin.js');
require('./renderers/register.js');
var tplBuiltin = require('./utils/tpl-builtin.js');
var api = require('./utils/api.js');
var attachmentAdpator = require('./utils/attachmentAdpator.js');
var autobind = require('./utils/autobind.js');
var browser = require('./utils/browser.js');
var ColorScale = require('./utils/ColorScale.js');
var columnsSplit = require('./utils/columnsSplit.js');
var concatData = require('./utils/concatData.js');
var dataMapping = require('./utils/dataMapping.js');
var DataSchema = require('./utils/DataSchema.js');
var DataScope = require('./utils/DataScope.js');
var date = require('./utils/date.js');
var debug = require('./utils/debug.js');
var dom = require('./utils/dom.js');
var errors = require('./utils/errors.js');
var escapeHtml = require('./utils/escapeHtml.js');
var filterSchema = require('./utils/filter-schema.js');
require('./utils/filter.js');
var formatDuration = require('./utils/formatDuration.js');
var formula = require('./utils/formula.js');
var getVariable = require('./utils/getVariable.js');
var grammar = require('./utils/grammar.js');
var handleAction = require('./utils/handleAction.js');
var helper = require('./utils/helper.js');
var highlight = require('./utils/highlight.js');
var icon = require('./utils/icon.js');
var image = require('./utils/image.js');
var isPureVariable = require('./utils/isPureVariable.js');
var jsonSchema2AmisSchema = require('./utils/json-schema-2-amis-schema.js');
var keyToPath = require('./utils/keyToPath.js');
var labelToString = require('./utils/labelToString.js');
var loopTooMuch = require('./utils/loopTooMuch.js');
var makeSorter = require('./utils/makeSorter.js');
var normalizeLink = require('./utils/normalizeLink.js');
var normalizeOptions = require('./utils/normalizeOptions.js');
var object = require('./utils/object.js');
var offset = require('./utils/offset.js');
var offsetParent = require('./utils/offsetParent.js');
var optionValueCompare = require('./utils/optionValueCompare.js');
var position = require('./utils/position.js');
var prettyBytes = require('./utils/prettyBytes.js');
var rendererEvent = require('./utils/renderer-event.js');
var replaceText = require('./utils/replaceText.js');
var resizeSensor = require('./utils/resize-sensor.js');
var resolveVariable = require('./utils/resolveVariable.js');
var resolveVariableAndFilter = require('./utils/resolveVariableAndFilter.js');
var resolveVariableAndFilterForAsync = require('./utils/resolveVariableAndFilterForAsync.js');
var RootClose = require('./utils/RootClose.js');
var scrollPosition = require('./utils/scrollPosition.js');
var SimpleMap = require('./utils/SimpleMap.js');
var string2regExp = require('./utils/string2regExp.js');
var style = require('./utils/style.js');
var tokenize = require('./utils/tokenize.js');
var tpl = require('./utils/tpl.js');
var uncontrollable = require('./utils/uncontrollable.js');
var validations = require('./utils/validations.js');
var toNumber = require('./utils/toNumber.js');
var decodeEntity = require('./utils/decodeEntity.js');
var styleHelper = require('./utils/style-helper.js');
var resolveCondition = require('./utils/resolveCondition.js');
var arraySlice = require('./utils/arraySlice.js');
var math = require('./utils/math.js');
var Animation = require('./utils/Animation.js');
var animations = require('./utils/animations.js');
var index = require('./store/index.js');
var globalVar = require('./globalVar.js');
require('./globalVarClientHandler.js');
require('./globalVarDefaultValueHandler.js');
var mobxStateTree = require('mobx-state-tree');
var locale = require('./locale.js');
var Scoped = require('./Scoped.js');
var theme = require('./theme.js');
require('./actions/LoopAction.js');
require('./actions/BreakAction.js');
require('./actions/ContinueAction.js');
require('./actions/SwitchAction.js');
require('./actions/ParallelAction.js');
require('./actions/CustomAction.js');
require('./actions/BroadcastAction.js');
require('./actions/CmptAction.js');
require('./actions/StatusAction.js');
require('./actions/AjaxAction.js');
require('./actions/CopyAction.js');
require('./actions/DialogAction.js');
require('./actions/DrawerAction.js');
require('./actions/EmailAction.js');
require('./actions/EventAction.js');
require('./actions/LinkAction.js');
require('./actions/ToastAction.js');
require('./actions/WaitAction.js');
require('./actions/PageAction.js');
require('./actions/PrintAction.js');
var Action = require('./actions/Action.js');
var Item = require('./renderers/Item.js');
var Options = require('./renderers/Options.js');
var Root = require('./Root.js');
var envOverwrite = require('./envOverwrite.js');
var env = require('./env.js');
var React = require('react');
var amisFormula = require('amis-formula');
var LazyComponent = require('./components/LazyComponent.js');
var Overlay = require('./components/Overlay.js');
var PopOver = require('./components/PopOver.js');
var ErrorBoundary = require('./components/ErrorBoundary.js');
var Form = require('./renderers/Form.js');
var SchemaRenderer = require('./SchemaRenderer.js');
var CustomStyle = require('./components/CustomStyle.js');
var StatusScoped = require('./StatusScoped.js');
var StyleManager = require('./StyleManager.js');
var stripNumber = require('./utils/stripNumber.js');
var iRenderer = require('./store/iRenderer.js');
var service = require('./store/service.js');
var form = require('./store/form.js');
var combo = require('./store/combo.js');
var crud = require('./store/crud.js');
var table = require('./store/table.js');
var table2 = require('./store/table2.js');
var list = require('./store/list.js');
var modal = require('./store/modal.js');
var formItem = require('./store/formItem.js');
var pagination = require('./store/pagination.js');
var app = require('./store/app.js');
var node = require('./store/node.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var __react_jsx__ = require('react');
var _J$X_ = (__react_jsx__["default"] || __react_jsx__).createElement;
(__react_jsx__["default"] || __react_jsx__).Fragment;
var classPrefix = theme.getClassPrefix();
// @ts-ignore
var version = '6.13.0';
window.amisVersionInfo = {
    version: '6.13.0',
    buildTime: '2025-08-12T03:18:05.313Z'
};
function render(schema, _a, options, pathPrefix) {
    if (_a === void 0) { _a = {}; }
    var key = _a.key, props = tslib.__rest(_a, ["key"]);
    if (options === void 0) { options = {}; }
    if (pathPrefix === void 0) { pathPrefix = ''; }
    return (_J$X_(AMISRenderer, tslib.__assign({}, props, { key: key, schema: schema, pathPrefix: pathPrefix, options: options })));
}
function AMISRenderer(_a) {
    var schema = _a.schema, options = _a.options, pathPrefix = _a.pathPrefix, props = tslib.__rest(_a, ["schema", "options", "pathPrefix"]);
    var locale$1 = props.locale || locale.getDefaultLocale();
    // 兼容 locale 的不同写法
    locale$1 =
        locale$1 === 'en'
            ? 'en-US'
            : locale$1 === 'zh' || locale$1 === 'cn'
                ? 'zh-CN'
                : locale$1.replace('_', '-');
    var translate = React__default["default"].useCallback(function () {
        var fn = props.translate || locale.makeTranslator(locale$1);
        return fn.apply(null, arguments);
    }, [locale$1, props.translate]);
    var store = React__default["default"].useMemo(function () {
        var store = factory.stores[options.session || 'global'];
        if (!store) {
            options = tslib.__assign(tslib.__assign(tslib.__assign({}, factory.defaultOptions), options), { fetcher: options.fetcher
                    ? api.wrapFetcher(options.fetcher, options.tracker)
                    : factory.defaultOptions.fetcher, confirm: helper.promisify(options.confirm || factory.defaultOptions.confirm || window.confirm), locale: locale$1, translate: translate });
            store = index.RendererStore.create({}, options);
            factory.stores[options.session || 'global'] = store;
        }
        else {
            // 更新 env
            var env_1 = mobxStateTree.getEnv(store);
            Object.assign(env_1, tslib.__assign(tslib.__assign({}, options), { fetcher: options.fetcher
                    ? api.wrapFetcher(options.fetcher, options.tracker)
                    : env_1.fetcher, confirm: options.confirm ? helper.promisify(options.confirm) : env_1.confirm, locale: locale$1, translate: translate }));
        }
        window.amisStore = store; // 为了方便 debug.
        return store;
    }, Object.keys(options).concat(Object.values(options)).concat(locale$1));
    var env$1 = mobxStateTree.getEnv(store);
    var theme$1 = props.theme || options.theme || 'cxd';
    if (theme$1 === 'default') {
        theme$1 = 'cxd';
    }
    env$1.theme = theme.getTheme(theme$1);
    React__default["default"].useEffect(function () {
        env$1.enableAMISDebug ? debug.enableDebug() : debug.disableDebug();
        return function () { return env$1.enableAMISDebug || debug.disableDebug(); };
    }, [env$1.enableAMISDebug]);
    if (props.locale !== undefined) {
        env$1.translate = translate;
        env$1.locale = locale$1;
    }
    // 默认将开启移动端原生 UI
    if (options.useMobileUI !== false) {
        props.mobileUI = env$1.isMobile();
    }
    // 根据环境覆盖 schema，这个要在最前面做，不然就无法覆盖 validations
    schema = React__default["default"].useMemo(function () {
        schema = envOverwrite.envOverwrite(schema, locale$1, env$1.isMobile() ? 'mobile' : 'pc');
        // todo 和 envOverwrite 一起处理，减少循环次数
        schema = replaceText.replaceText(schema, options.replaceText, env$1.replaceTextIgnoreKeys);
        return schema;
    }, [schema, locale$1, options.replaceText]);
    return (_J$X_(env.EnvContext.Provider, { value: env$1 },
        _J$X_(Root["default"], tslib.__assign({}, props, { schema: schema, pathPrefix: pathPrefix, rootStore: store, env: env$1, theme: theme$1, locale: locale$1, translate: translate }))));
}

exports.Renderer = factory.Renderer;
exports.addSchemaFilter = factory.addSchemaFilter;
exports.clearStoresCache = factory.clearStoresCache;
exports.extendDefaultEnv = factory.extendDefaultEnv;
exports.filterSchema = factory.filterSchema;
exports.getGlobalOptions = factory.getGlobalOptions;
exports.getRendererByName = factory.getRendererByName;
exports.getRenderers = factory.getRenderers;
exports.loadAllAsyncRenderers = factory.loadAllAsyncRenderers;
exports.loadAsyncRenderer = factory.loadAsyncRenderer;
exports.loadAsyncRenderersByType = factory.loadAsyncRenderersByType;
exports.registerRenderer = factory.registerRenderer;
exports.resolveRenderer = factory.resolveRenderer;
exports.setGlobalOptions = factory.setGlobalOptions;
exports.unRegisterRenderer = factory.unRegisterRenderer;
exports.updateEnv = factory.updateEnv;
exports.register = tplBuiltin.register;
exports.testResolveVariableAndFilter = tplBuiltin.testResolveVariableAndFilter;
exports.addApiRequestAdaptor = api.addApiRequestAdaptor;
exports.addApiResponseAdaptor = api.addApiResponseAdaptor;
exports.addApiResponseAdator = api.addApiResponseAdator;
exports.buildApi = api.buildApi;
exports.callStrFunction = api.callStrFunction;
exports.clearApiCache = api.clearApiCache;
exports.getApiCache = api.getApiCache;
exports.isApiOutdated = api.isApiOutdated;
exports.isApiOutdatedWithData = api.isApiOutdatedWithData;
exports.isEffectiveApi = api.isEffectiveApi;
exports.isSameApi = api.isSameApi;
exports.isValidApi = api.isValidApi;
exports.jsFetcher = api.jsFetcher;
exports.jsonpFetcher = api.jsonpFetcher;
exports.normalizeApi = api.normalizeApi;
exports.normalizeApiResponseData = api.normalizeApiResponseData;
exports.removeApiRequestAdaptor = api.removeApiRequestAdaptor;
exports.removeApiResponseAdaptor = api.removeApiResponseAdaptor;
exports.responseAdaptor = api.responseAdaptor;
exports.setApiCache = api.setApiCache;
exports.shouldBlockedBySendOnApi = api.shouldBlockedBySendOnApi;
exports.str2AsyncFunction = api.str2AsyncFunction;
exports.str2function = api.str2function;
exports.wrapAdaptor = api.wrapAdaptor;
exports.wrapFetcher = api.wrapFetcher;
exports.attachmentAdpator = attachmentAdpator.attachmentAdpator;
exports.autobindMethod = autobind.autobindMethod;
exports.bind = autobind.bind;
exports.chromeVersion = browser.chromeVersion;
exports.isSafari = browser.isSafari;
exports.ColorScale = ColorScale.ColorScale;
exports.columnsSplit = columnsSplit.columnsSplit;
exports.concatData = concatData.concatData;
exports.dataMapping = dataMapping.dataMapping;
exports.resolveMapping = dataMapping.resolveMapping;
exports.resolveMappingObject = dataMapping.resolveMappingObject;
exports.DataSchema = DataSchema.DataSchema;
exports.DATASCHEMA_TYPE_MAP = DataScope.DATASCHEMA_TYPE_MAP;
exports.DataScope = DataScope.DataScope;
exports.filterDate = date.filterDate;
exports.normalizeDate = date.normalizeDate;
exports.parseDuration = date.parseDuration;
exports.relativeValueRe = date.relativeValueRe;
exports.DebugWrapper = debug.DebugWrapper;
exports.JsonView = debug.JsonView;
exports.debug = debug.debug;
exports.disableDebug = debug.disableDebug;
exports.enableDebug = debug.enableDebug;
exports.safeStringify = debug.safeStringify;
exports.traceProps = debug.traceProps;
exports.warning = debug.warning;
exports.calculateHeight = dom.calculateHeight;
exports.calculatePosition = dom.calculatePosition;
exports.getContainer = dom.getContainer;
exports.getStyleNumber = dom.getStyleNumber;
exports.ownerDocument = dom.ownerDocument;
exports.renderTextByKeyword = dom.renderTextByKeyword;
exports.ServerError = errors.ServerError;
exports.escapeHtml = escapeHtml.escapeHtml;
exports.filterClassNameObject = filterSchema.filterClassNameObject;
exports.getExprProperties = filterSchema.getExprProperties;
exports.hasExprPropertiesChanged = filterSchema.hasExprPropertiesChanged;
exports.formatDuration = formatDuration.formatDuration;
exports.FormulaExec = formula.FormulaExec;
exports.formulaExec = formula.formulaExec;
exports.isExpression = formula.isExpression;
exports.isNeedFormula = formula.isNeedFormula;
exports.registerFormulaExec = formula.registerFormulaExec;
exports.replaceExpression = formula.replaceExpression;
exports.getVariable = getVariable.getVariable;
exports.collectVariables = grammar.collectVariables;
exports.handleAction = handleAction.handleAction;
exports.JSONTraverse = helper.JSONTraverse;
exports.JSONValueMap = helper.JSONValueMap;
exports.SkipOperation = helper.SkipOperation;
exports.TEST_ID_KEY = helper.TEST_ID_KEY;
exports.TestIdBuilder = helper.TestIdBuilder;
exports.ValidateError = helper.ValidateError;
exports.__uri = helper.__uri;
exports.anyChanged = helper.anyChanged;
exports.applyFilters = helper.applyFilters;
exports.autobind = helper.autobind;
exports.buildTrackExpression = helper.buildTrackExpression;
exports.bulkBindFunctions = helper.bulkBindFunctions;
exports.camel = helper.camel;
exports.chainEvents = helper.chainEvents;
exports.chainFunctions = helper.chainFunctions;
exports.changedEffect = helper.changedEffect;
exports.convertArrayValueToMoment = helper.convertArrayValueToMoment;
exports.countTree = helper.countTree;
exports.detectPropValueChanged = helper.detectPropValueChanged;
exports.difference = helper.difference;
exports.differenceFromAll = helper.differenceFromAll;
exports.eachTree = helper.eachTree;
exports.evalTrackExpression = helper.evalTrackExpression;
exports.everyTree = helper.everyTree;
exports.filterTree = helper.filterTree;
exports.findIndex = helper.findIndex;
exports.findObjectsWithKey = helper.findObjectsWithKey;
exports.findTree = helper.findTree;
exports.findTreeAll = helper.findTreeAll;
exports.findTreeIndex = helper.findTreeIndex;
exports.flattenTree = helper.flattenTree;
exports.flattenTreeWithLeafNodes = helper.flattenTreeWithLeafNodes;
exports.formateCheckThemeCss = helper.formateCheckThemeCss;
exports.formateId = helper.formateId;
exports.getLevelFromClassName = helper.getLevelFromClassName;
exports.getPropValue = helper.getPropValue;
exports.getRange = helper.getRange;
exports.getScrollParent = helper.getScrollParent;
exports.getScrollbarWidth = helper.getScrollbarWidth;
exports.getTree = helper.getTree;
exports.getTreeAncestors = helper.getTreeAncestors;
exports.getTreeDepth = helper.getTreeDepth;
exports.getTreeParent = helper.getTreeParent;
exports.getWidthRate = helper.getWidthRate;
exports.guid = helper.guid;
exports.hasAbility = helper.hasAbility;
exports.hasFile = helper.hasFile;
exports.hasOwnPropertyInPath = helper.hasOwnPropertyInPath;
exports.hasVisibleExpression = helper.hasVisibleExpression;
exports.hashCode = helper.hashCode;
exports.immutableExtends = helper.immutableExtends;
exports.importLazyComponent = helper.importLazyComponent;
exports.injectPropsToObject = helper.injectPropsToObject;
exports.isArrayChildrenModified = helper.isArrayChildrenModified;
exports.isBreakpoint = helper.isBreakpoint;
exports.isClickOnInput = helper.isClickOnInput;
exports.isDisabled = helper.isDisabled;
exports.isEmpty = helper.isEmpty;
exports.isMobile = helper.isMobile;
exports.isMobileDevice = helper.isMobileDevice;
exports.isNumeric = helper.isNumeric;
exports.isObjectShallowModified = helper.isObjectShallowModified;
exports.isSuperDataModified = helper.isSuperDataModified;
exports.isUnfolded = helper.isUnfolded;
exports.isVisible = helper.isVisible;
exports.lcFirst = helper.lcFirst;
exports.loadScript = helper.loadScript;
exports.loadStyle = helper.loadStyle;
exports.makeColumnClassBuild = helper.makeColumnClassBuild;
exports.makeHorizontalDeeper = helper.makeHorizontalDeeper;
exports.mapObject = helper.mapObject;
exports.mapTree = helper.mapTree;
exports.noop = helper.noop;
exports.normalizeNodePath = helper.normalizeNodePath;
exports.object2formData = helper.object2formData;
exports.omitControls = helper.omitControls;
exports.padArr = helper.padArr;
exports.parsePrimitiveQueryString = helper.parsePrimitiveQueryString;
exports.parseQuery = helper.parseQuery;
exports.pickEventsProps = helper.pickEventsProps;
exports.preventDefault = helper.preventDefault;
exports.promisify = helper.promisify;
exports.qsparse = helper.qsparse;
exports.qsstringify = helper.qsstringify;
exports.range = helper.range;
exports.removeHTMLTag = helper.removeHTMLTag;
exports.repeatCount = helper.repeatCount;
exports.replaceUrlParams = helper.replaceUrlParams;
exports.rmUndefined = helper.rmUndefined;
exports.someTree = helper.someTree;
exports.sortArray = helper.sortArray;
exports.spliceTree = helper.spliceTree;
exports.supportsMjs = helper.supportsMjs;
exports.syncDataFromSuper = helper.syncDataFromSuper;
exports.ucFirst = helper.ucFirst;
exports.until = helper.until;
exports.utils = helper;
exports.uuid = helper.uuid;
exports.uuidv4 = helper.uuidv4;
exports.visibilityFilter = helper.visibilityFilter;
exports.highlight = highlight.highlight;
exports.generateIcon = icon.generateIcon;
exports.getCustomVendor = icon.getCustomVendor;
exports.registerCustomVendor = icon.registerCustomVendor;
exports.getImageDimensions = image.getImageDimensions;
exports.toDataURL = image.toDataURL;
exports.isPureVariable = isPureVariable.isPureVariable;
exports.JSONSchme2AMisSchema = jsonSchema2AmisSchema.JSONSchme2AMisSchema;
exports.keyToPath = keyToPath.keyToPath;
exports.labelToString = labelToString.labelToString;
exports.loopTooMuch = loopTooMuch.loopTooMuch;
exports.makeSorter = makeSorter.makeSorter;
exports.normalizeLink = normalizeLink.normalizeLink;
exports.normalizeOptions = normalizeOptions.normalizeOptions;
exports.cloneObject = object.cloneObject;
exports.createObject = object.createObject;
exports.createObjectFromChain = object.createObjectFromChain;
exports.deleteVariable = object.deleteVariable;
exports.extendObject = object.extendObject;
exports.extractObjectChain = object.extractObjectChain;
exports.injectObjectChain = object.injectObjectChain;
exports.isObject = object.isObject;
exports.pickValues = object.pickValues;
exports.setVariable = object.setVariable;
exports.offset = offset.offset;
exports.offsetParent = offsetParent.offsetParent;
exports.getOptionValue = optionValueCompare.getOptionValue;
exports.getOptionValueBindField = optionValueCompare.getOptionValueBindField;
exports.matchOptionValue = optionValueCompare.matchOptionValue;
exports.optionValueCompare = optionValueCompare.optionValueCompare;
exports.position = position.position;
exports.prettyBytes = prettyBytes.prettyBytes;
exports.bindEvent = rendererEvent.bindEvent;
exports.bindGlobalEvent = rendererEvent.bindGlobalEvent;
exports.bindGlobalEventForRenderer = rendererEvent.bindGlobalEventForRenderer;
exports.createRendererEvent = rendererEvent.createRendererEvent;
exports.dispatchEvent = rendererEvent.dispatchEvent;
exports.dispatchGlobalEvent = rendererEvent.dispatchGlobalEvent;
exports.dispatchGlobalEventForRenderer = rendererEvent.dispatchGlobalEventForRenderer;
exports.getMatchedEventTargets = rendererEvent.getMatchedEventTargets;
exports.getRendererEventListeners = rendererEvent.getRendererEventListeners;
exports.resolveEventData = rendererEvent.resolveEventData;
exports.replaceText = replaceText.replaceText;
exports.appearSensor = resizeSensor.appearSensor;
exports.getComputedStyle = resizeSensor.getComputedStyle;
exports.resizeSensor = resizeSensor.resizeSensor;
exports.resizeSensorV2 = resizeSensor.resizeSensorV2;
exports.resolveVariable = resolveVariable.resolveVariable;
exports.resolveVariableAndFilter = resolveVariableAndFilter.resolveVariableAndFilter;
exports.resolveVariableAndFilterForAsync = resolveVariableAndFilterForAsync.resolveVariableAndFilterForAsync;
exports.setFormulaEvalErrorHandler = resolveVariableAndFilterForAsync.setFormulaEvalErrorHandler;
exports.RootClose = RootClose.RootClose;
exports.scrollPosition = scrollPosition.scrollPosition;
exports.SimpleMap = SimpleMap.SimpleMap;
exports.string2regExp = string2regExp.string2regExp;
exports.buildStyle = style.buildStyle;
exports.mergeStyle = style.mergeStyle;
exports.normalizeStyle = style.normalizeStyle;
exports.memoParse = tokenize.memoParse;
exports.tokenize = tokenize.tokenize;
exports.asyncFilter = tpl.asyncFilter;
exports.evalExpression = tpl.evalExpression;
exports.evalExpressionWithConditionBuilder = tpl.evalExpressionWithConditionBuilder;
exports.evalExpressionWithConditionBuilderAsync = tpl.evalExpressionWithConditionBuilderAsync;
exports.evalJS = tpl.evalJS;
exports.filter = tpl.filter;
exports.registerTplEnginer = tpl.registerTplEnginer;
exports.setCustomEvalExpression = tpl.setCustomEvalExpression;
exports.setCustomEvalJs = tpl.setCustomEvalJs;
exports.uncontrollable = uncontrollable.uncontrollable;
exports.addRule = validations.addRule;
exports.str2rules = validations.str2rules;
exports.validate = validations.validate;
exports.validateMessages = validations.validateMessages;
exports.validateObject = validations.validateObject;
exports.validations = validations.validations;
exports.toNumber = toNumber.toNumber;
exports.decodeEntity = decodeEntity.decodeEntity;
exports.addStyle = styleHelper.addStyle;
exports.findOrCreateStyle = styleHelper.findOrCreateStyle;
exports.formatCustomStyle = styleHelper.formatCustomStyle;
exports.formatInputThemeCss = styleHelper.formatInputThemeCss;
exports.formatStyle = styleHelper.formatStyle;
exports.getValueByPath = styleHelper.getValueByPath;
exports.inheritValueMap = styleHelper.inheritValueMap;
exports.insertCustomStyle = styleHelper.insertCustomStyle;
exports.insertEditCustomStyle = styleHelper.insertEditCustomStyle;
exports.insertStyle = styleHelper.insertStyle;
exports.removeCustomStyle = styleHelper.removeCustomStyle;
exports.setThemeClassName = styleHelper.setThemeClassName;
exports.styleMap = styleHelper.valueMap;
exports.valueMap = styleHelper.valueMap;
exports.getConditionComputers = resolveCondition.getConditionComputers;
exports.registerConditionComputer = resolveCondition.registerConditionComputer;
exports.resolveCondition = resolveCondition.resolveCondition;
exports.resolveConditionAsync = resolveCondition.resolveConditionAsync;
exports.setConditionComputeErrorHandler = resolveCondition.setConditionComputeErrorHandler;
exports.arraySlice = arraySlice.arraySlice;
exports.isIntegerInRange = math.isIntegerInRange;
exports.numberFormatter = math.numberFormatter;
exports.numberReverter = math.numberReverter;
exports.safeAdd = math.safeAdd;
exports.safeSub = math.safeSub;
exports.animation = Animation["default"];
exports.createAnimationStyle = animations.createAnimationStyle;
exports.RegisterStore = index.RegisterStore;
exports.RendererStore = index.RendererStore;
exports.registerStore = index.registerStore;
exports.buildGlobalVariable = globalVar.buildGlobalVariable;
exports.createGlobalVarState = globalVar.createGlobalVarState;
exports.isGlobalVarExpression = globalVar.isGlobalVarExpression;
exports.observeGlobalVars = globalVar.observeGlobalVars;
exports.registerGlobalVariableHandler = globalVar.registerGlobalVariableHandler;
exports.extendLocale = locale.extendLocale;
exports.getDefaultLocale = locale.getDefaultLocale;
exports.localeFormatter = locale.format;
exports.localeable = locale.localeable;
exports.makeTranslator = locale.makeTranslator;
exports.registerLocale = locale.register;
exports.removeLocaleData = locale.removeLocaleData;
exports.setDefaultLocale = locale.setDefaultLocale;
exports.Scoped = Scoped.HocScoped;
exports.ScopedContext = Scoped.ScopedContext;
exports.filterTarget = Scoped.filterTarget;
exports.splitTarget = Scoped.splitTarget;
exports.classnames = theme.classnames;
exports.getClassPrefix = theme.getClassPrefix;
exports.getTheme = theme.getTheme;
exports.makeClassnames = theme.makeClassnames;
exports.setDefaultTheme = theme.setDefaultTheme;
exports.theme = theme.theme;
exports.themeable = theme.themeable;
Object.defineProperty(exports, 'LoopStatus', {
    enumerable: true,
    get: function () { return Action.LoopStatus; }
});
exports.getActionByType = Action.getActionByType;
exports.getTargetComponent = Action.getTargetComponent;
exports.registerAction = Action.registerAction;
exports.registerActionMappingIgnoreKey = Action.registerActionMappingIgnoreKey;
exports.registerActionMappingIgnoreMap = Action.registerActionMappingIgnoreMap;
exports.registerComponentActionMappingIgnoreKey = Action.registerComponentActionMappingIgnoreKey;
exports.registerComponentActionMappingIgnoreMap = Action.registerComponentActionMappingIgnoreMap;
exports.runAction = Action.runAction;
exports.runActions = Action.runActions;
exports.FormItem = Item.FormItem;
exports.FormItemWrap = Item.FormItemWrap;
exports.getFormItemByName = Item.getFormItemByName;
exports.registerFormItem = Item.registerFormItem;
exports.OptionsControl = Options.OptionsControl;
exports.OptionsControlBase = Options.OptionsControlBase;
exports.registerOptionsControl = Options.registerOptionsControl;
exports.addRootWrapper = Root.addRootWrapper;
exports.envOverwrite = envOverwrite.envOverwrite;
exports.EnvContext = env.EnvContext;
Object.defineProperty(exports, 'AsyncEvaluator', {
    enumerable: true,
    get: function () { return amisFormula.AsyncEvaluator; }
});
Object.defineProperty(exports, 'Evaluator', {
    enumerable: true,
    get: function () { return amisFormula.Evaluator; }
});
Object.defineProperty(exports, 'evaluate', {
    enumerable: true,
    get: function () { return amisFormula.evaluate; }
});
Object.defineProperty(exports, 'evaluateForAsync', {
    enumerable: true,
    get: function () { return amisFormula.evaluateForAsync; }
});
Object.defineProperty(exports, 'extendsFilters', {
    enumerable: true,
    get: function () { return amisFormula.extendsFilters; }
});
Object.defineProperty(exports, 'filters', {
    enumerable: true,
    get: function () { return amisFormula.filters; }
});
Object.defineProperty(exports, 'getFilters', {
    enumerable: true,
    get: function () { return amisFormula.getFilters; }
});
Object.defineProperty(exports, 'lexer', {
    enumerable: true,
    get: function () { return amisFormula.lexer; }
});
Object.defineProperty(exports, 'parse', {
    enumerable: true,
    get: function () { return amisFormula.parse; }
});
Object.defineProperty(exports, 'registerFilter', {
    enumerable: true,
    get: function () { return amisFormula.registerFilter; }
});
Object.defineProperty(exports, 'registerFunction', {
    enumerable: true,
    get: function () { return amisFormula.registerFunction; }
});
exports.LazyComponent = LazyComponent["default"];
exports.Overlay = Overlay["default"];
exports.PopOver = PopOver["default"];
exports.ErrorBoundary = ErrorBoundary["default"];
exports.FormRenderer = Form.FormRenderer;
exports.RENDERER_TRANSMISSION_OMIT_PROPS = SchemaRenderer.RENDERER_TRANSMISSION_OMIT_PROPS;
exports.SchemaRenderer = SchemaRenderer.SchemaRenderer;
exports.CustomStyle = CustomStyle["default"];
exports.StatusScoped = StatusScoped.StatusScoped;
exports.styleManager = StyleManager["default"];
exports.stripNumber = stripNumber.stripNumber;
exports.iRendererStore = iRenderer.iRendererStore;
exports.ServiceStore = service.ServiceStore;
exports.FormStore = form.FormStore;
exports.ComboStore = combo.ComboStore;
exports.CRUDStore = crud.CRUDStore;
exports.TableStore = table.TableStore;
exports.TableStore2 = table2.TableStore2;
exports.ListStore = list.ListStore;
exports.ModalStore = modal.ModalStore;
exports.FormItemStore = formItem.FormItemStore;
exports.PaginationStore = pagination.PaginationStore;
exports.AppStore = app.AppStore;
exports.StoreNode = node.StoreNode;
exports.classPrefix = classPrefix;
exports.render = render;
exports.version = version;
