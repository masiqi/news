/**
 * amis-core v6.13.0
 * Copyright 2018-2025 fex
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var mobxStateTree = require('mobx-state-tree');
var isEqualWith = require('lodash/isEqualWith');
var uniqWith = require('lodash/uniqWith');
var form = require('./form.js');
var validations = require('../utils/validations.js');
var combo = require('./combo.js');
var tpl = require('../utils/tpl.js');
require('amis-formula');
require('moment');
var object = require('../utils/object.js');
var resolveVariableAndFilter = require('../utils/resolveVariableAndFilter.js');
require('../utils/memoryParse.js');
require('@rc-component/mini-decimal');
var dataMapping = require('../utils/dataMapping.js');
require('../utils/filter.js');
var api = require('../utils/api.js');
var findIndex = require('lodash/findIndex');
var helper = require('../utils/helper.js');
var find = require('lodash/find');
var isEqual = require('lodash/isEqual');
var isPlainObject = require('lodash/isPlainObject');
var SimpleMap = require('../utils/SimpleMap.js');
var node = require('./node.js');
var manager = require('./manager.js');
var normalizeOptions = require('../utils/normalizeOptions.js');
var optionValueCompare = require('../utils/optionValueCompare.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var isEqualWith__default = /*#__PURE__*/_interopDefaultLegacy(isEqualWith);
var uniqWith__default = /*#__PURE__*/_interopDefaultLegacy(uniqWith);
var findIndex__default = /*#__PURE__*/_interopDefaultLegacy(findIndex);
var find__default = /*#__PURE__*/_interopDefaultLegacy(find);
var isEqual__default = /*#__PURE__*/_interopDefaultLegacy(isEqual);
var isPlainObject__default = /*#__PURE__*/_interopDefaultLegacy(isPlainObject);

var ErrorDetail = mobxStateTree.types.model('ErrorDetail', {
    msg: '',
    tag: '',
    rule: ''
});
// 用于缓存 getSelectedOptions 的计算结果
// onChange 时很容易连续重复触发 getSelectedOptions （约4次）
// 在大数据量时，可有效提高效率
var getSelectedOptionsCache = {
    value: null,
    nodeValueArray: null,
    res: null
};
var FormItemStore = node.StoreNode.named('FormItemStore')
    .props({
    isFocused: false,
    isControlled: false,
    type: '',
    label: '',
    unique: false,
    loading: false,
    required: false,
    /** Schema默认值是否为表达式格式 */
    isValueSchemaExp: mobxStateTree.types.optional(mobxStateTree.types.boolean, false),
    tmpValue: mobxStateTree.types.frozen(),
    emitedValue: mobxStateTree.types.frozen(),
    changeMotivation: 'input',
    rules: mobxStateTree.types.optional(mobxStateTree.types.frozen(), {}),
    messages: mobxStateTree.types.optional(mobxStateTree.types.frozen(), {}),
    errorData: mobxStateTree.types.optional(mobxStateTree.types.array(ErrorDetail), []),
    name: mobxStateTree.types.string,
    extraName: '',
    itemId: '',
    unsetValueOnInvisible: false,
    itemsRef: mobxStateTree.types.optional(mobxStateTree.types.array(mobxStateTree.types.string), []),
    inited: false,
    validated: false,
    validatedAt: 0,
    validating: false,
    multiple: false,
    delimiter: ',',
    valueField: 'value',
    labelField: 'label',
    joinValues: true,
    extractValue: false,
    options: mobxStateTree.types.optional(mobxStateTree.types.frozen(), []),
    optionsRaw: mobxStateTree.types.optional(mobxStateTree.types.frozen(), []),
    expressionsInOptions: false,
    selectFirst: false,
    autoFill: mobxStateTree.types.frozen(),
    clearValueOnHidden: false,
    validateApi: mobxStateTree.types.optional(mobxStateTree.types.frozen(), ''),
    selectedOptions: mobxStateTree.types.optional(mobxStateTree.types.frozen(), []),
    filteredOptions: mobxStateTree.types.optional(mobxStateTree.types.frozen(), []),
    dialogSchema: mobxStateTree.types.frozen(),
    dialogOpen: false,
    dialogData: mobxStateTree.types.frozen(),
    resetValue: mobxStateTree.types.optional(mobxStateTree.types.frozen(), ''),
    validateOnChange: false,
    /** 当前表单项所属的InputGroup父元素, 用于收集InputGroup的子元素 */
    inputGroupControl: mobxStateTree.types.optional(mobxStateTree.types.frozen(), {}),
    colIndex: mobxStateTree.types.frozen(),
    rowIndex: mobxStateTree.types.frozen(),
    /** Transfer组件分页模式 */
    pagination: mobxStateTree.types.optional(mobxStateTree.types.frozen(), {
        enable: false,
        /** 当前页数 */
        page: 1,
        /** 每页显示条数 */
        perPage: 10,
        /** 总条数 */
        total: 0
    }),
    accumulatedOptions: mobxStateTree.types.optional(mobxStateTree.types.frozen(), []),
    popOverOpen: false,
    popOverData: mobxStateTree.types.frozen(),
    popOverSchema: mobxStateTree.types.frozen()
})
    .views(function (self) {
    function getForm() {
        var form$1 = self.parentStore;
        return (form$1 === null || form$1 === void 0 ? void 0 : form$1.storeType) === form.FormStore.name ? form$1 : undefined;
    }
    function getValue() {
        var _a;
        return (_a = getForm()) === null || _a === void 0 ? void 0 : _a.getValueByName(self.name);
    }
    function getLastOptionValue() {
        if (self.selectedOptions.length) {
            return self.selectedOptions[self.selectedOptions.length - 1].value;
        }
        return '';
    }
    function getErrors() {
        return self.errorData.map(function (item) { return item.msg; });
    }
    return {
        get subFormItems() {
            return self.itemsRef.map(function (item) { return manager.getStoreById(item); });
        },
        get form() {
            return getForm();
        },
        get value() {
            return getValue();
        },
        get prinstine() {
            var _a;
            return (_a = getForm()) === null || _a === void 0 ? void 0 : _a.getPristineValueByName(self.name);
        },
        get errors() {
            return getErrors();
        },
        get valid() {
            var errors = getErrors();
            return !!(!errors || !errors.length);
        },
        get errClassNames() {
            return self.errorData
                .map(function (item) { return item.rule; })
                .filter(function (item, index, arr) { return item && arr.indexOf(item) === index; })
                .map(function (item) { return "has-error--".concat(item); })
                .join(' ');
        },
        get lastSelectValue() {
            return getLastOptionValue();
        },
        /** 数据源接口数据是否开启分页 */
        get enableSourcePagination() {
            return !!self.pagination.enable;
        },
        /** 数据源接口开启分页时当前页码 */
        get sourcePageNum() {
            var _a;
            return (_a = self.pagination.page) !== null && _a !== void 0 ? _a : 1;
        },
        /** 数据源接口开启分页时每页显示条数 */
        get sourcePerPageNum() {
            var _a;
            return (_a = self.pagination.perPage) !== null && _a !== void 0 ? _a : 10;
        },
        /** 数据源接口开启分页时数据总条数 */
        get sourceTotalNum() {
            var _a;
            return (_a = self.pagination.total) !== null && _a !== void 0 ? _a : 0;
        },
        getSelectedOptions: function (value, nodeValueArray) {
            if (value === void 0) { value = self.tmpValue; }
            // 查看是否命中缓存
            if (value != null &&
                nodeValueArray != null &&
                isEqual__default["default"](value, getSelectedOptionsCache.value) &&
                isEqual__default["default"](nodeValueArray, getSelectedOptionsCache.nodeValueArray) &&
                getSelectedOptionsCache.res) {
                return getSelectedOptionsCache.res;
            }
            if (typeof value === 'undefined') {
                return [];
            }
            var filteredOptions = self.filteredOptions;
            var labelField = self.labelField, extractValue = self.extractValue, multiple = self.multiple, delimiter = self.delimiter;
            var valueField = self.valueField || 'value';
            var valueArray = nodeValueArray
                ? nodeValueArray
                : Array.isArray(value)
                    ? value
                    : // 单选时不应该分割
                        typeof value === 'string' && multiple
                            ? // picker的value有可能value: "1, 2"，所以需要去掉一下空格
                                value.split(delimiter || ',').map(function (v) { return v.trim(); })
                            : [value];
            var selected = valueArray.map(function (item) {
                return item && item.hasOwnProperty(valueField) ? item[valueField] : item;
            });
            var selectedOptions = [];
            selected.forEach(function (item, index) {
                var _a, _b;
                var matched = helper.findTree(filteredOptions, optionValueCompare.optionValueCompare(item, valueField), {
                    resolve: optionValueCompare.getOptionValueBindField(valueField),
                    value: optionValueCompare.getOptionValue(item, valueField)
                });
                if (matched) {
                    selectedOptions.push(matched);
                    return;
                }
                var unMatched = (valueArray && valueArray[index]) || item;
                var hasValue = unMatched || unMatched === 0;
                if (hasValue &&
                    (typeof unMatched === 'string' || typeof unMatched === 'number')) {
                    unMatched = (_a = {},
                        _a[valueField || 'value'] = item,
                        _a[labelField || 'label'] = item,
                        _a.__unmatched = true,
                        _a);
                    // 某些特殊情况，如select的autocomplete时
                    // 关键字没匹配到的项会被隐藏，不在filteredOptions中，导致匹配不到
                    // 此时需要从原始数据中查找，避免label丢失
                    var origin_1 = self.selectedOptions
                        ? find__default["default"](self.selectedOptions, optionValueCompare.optionValueCompare(item, valueField))
                        : null;
                    if (origin_1) {
                        unMatched[labelField] = origin_1[labelField];
                    }
                }
                else if (hasValue && extractValue) {
                    unMatched = (_b = {},
                        _b[valueField || 'value'] = item,
                        _b[labelField || 'label'] = 'UnKnown',
                        _b.__unmatched = true,
                        _b);
                }
                hasValue && selectedOptions.push(unMatched);
            });
            if (selectedOptions.length) {
                getSelectedOptionsCache.value = value;
                getSelectedOptionsCache.nodeValueArray = nodeValueArray;
                getSelectedOptionsCache.res = selectedOptions;
            }
            return selectedOptions;
        },
        splitExtraValue: function (value) {
            var delimiter = self.delimiter || ',';
            var values = value === ''
                ? ['', '']
                : Array.isArray(value)
                    ? value
                    : typeof value === 'string'
                        ? value.split(delimiter || ',').map(function (v) { return v.trim(); })
                        : [];
            return values;
        },
        getMergedData: function (data) {
            var result = object.cloneObject(data);
            object.setVariable(result, self.name, self.tmpValue);
            object.setVariable(result, '__value', self.tmpValue);
            object.setVariable(result, '__name', self.name);
            return result;
        }
    };
})
    .actions(function (self) {
    self.form;
    var dialogCallbacks = new SimpleMap.SimpleMap();
    var loadAutoUpdateCancel = null;
    var initHooks = [];
    function config(_a) {
        var name = _a.name, extraName = _a.extraName, required = _a.required, unique = _a.unique; _a.value; var isValueSchemaExp = _a.isValueSchemaExp, rules = _a.rules, messages = _a.messages, delimiter = _a.delimiter, multiple = _a.multiple, valueField = _a.valueField, labelField = _a.labelField, joinValues = _a.joinValues, extractValue = _a.extractValue, type = _a.type, id = _a.id, selectFirst = _a.selectFirst, autoFill = _a.autoFill, clearValueOnHidden = _a.clearValueOnHidden, validateApi = _a.validateApi, maxLength = _a.maxLength, minLength = _a.minLength, validateOnChange = _a.validateOnChange, label = _a.label, inputGroupControl = _a.inputGroupControl, pagination = _a.pagination;
        if (typeof rules === 'string') {
            rules = validations.str2rules(rules);
        }
        typeof name !== 'undefined' && (self.name = name);
        typeof extraName !== 'undefined' && (self.extraName = extraName);
        typeof type !== 'undefined' && (self.type = type);
        typeof id !== 'undefined' && (self.itemId = id);
        typeof messages !== 'undefined' && (self.messages = messages);
        typeof required !== 'undefined' && (self.required = !!required);
        typeof unique !== 'undefined' && (self.unique = !!unique);
        typeof multiple !== 'undefined' && (self.multiple = !!multiple);
        typeof selectFirst !== 'undefined' && (self.selectFirst = !!selectFirst);
        typeof autoFill !== 'undefined' && (self.autoFill = autoFill);
        typeof joinValues !== 'undefined' && (self.joinValues = !!joinValues);
        typeof extractValue !== 'undefined' &&
            (self.extractValue = !!extractValue);
        typeof delimiter !== 'undefined' &&
            (self.delimiter = delimiter || ',');
        typeof valueField !== 'undefined' &&
            (self.valueField = valueField || 'value');
        typeof labelField !== 'undefined' &&
            (self.labelField = labelField || 'label');
        typeof clearValueOnHidden !== 'undefined' &&
            (self.clearValueOnHidden = !!clearValueOnHidden);
        typeof validateApi !== 'undefined' && (self.validateApi = validateApi);
        typeof validateOnChange !== 'undefined' &&
            (self.validateOnChange = !!validateOnChange);
        typeof label === 'string' && (self.label = label);
        self.isValueSchemaExp = !!isValueSchemaExp;
        object.isObject(inputGroupControl) &&
            (inputGroupControl === null || inputGroupControl === void 0 ? void 0 : inputGroupControl.name) != null &&
            (self.inputGroupControl = inputGroupControl);
        if (pagination && object.isObject(pagination) && !!pagination.enable) {
            self.pagination = {
                enable: true,
                page: pagination.page ? pagination.page || 1 : 1,
                perPage: pagination.perPage ? pagination.perPage || 10 : 10,
                total: 0
            };
        }
        if (typeof rules !== 'undefined' ||
            typeof required !== 'undefined' ||
            typeof minLength === 'number' ||
            typeof maxLength === 'number') {
            rules = tslib.__assign(tslib.__assign({}, (rules !== null && rules !== void 0 ? rules : self.rules)), { isRequired: self.required || (rules === null || rules === void 0 ? void 0 : rules.isRequired) });
            // todo 这个弄个配置由渲染器自己来决定
            // 暂时先这样
            if (~['input-text', 'textarea'].indexOf(self.type)) {
                if (typeof minLength === 'number') {
                    rules.minLength = minLength;
                }
                if (typeof maxLength === 'number') {
                    rules.maxLength = maxLength;
                }
            }
            if (helper.isObjectShallowModified(rules, self.rules)) {
                self.rules = rules;
                clearError('builtin');
                self.validated = false;
            }
        }
    }
    function focus() {
        self.isFocused = true;
    }
    function blur() {
        self.isFocused = false;
    }
    var validateCancel = null;
    var validate = mobxStateTree.flow(function validate(data, hook, customRules) {
        var json, err_1, combo, group;
        var _a;
        var _b, _c, _d, _e, _f;
        return tslib.__generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    if (self.validating && !api.isEffectiveApi(self.validateApi, data)) {
                        return [2 /*return*/, self.valid];
                    }
                    self.validating = true;
                    clearError();
                    if (!hook) return [3 /*break*/, 2];
                    return [4 /*yield*/, hook()];
                case 1:
                    _g.sent();
                    _g.label = 2;
                case 2:
                    addError(validations.validate(self.tmpValue, data, customRules ? validations.str2rules(customRules) : self.rules, self.messages, self.__));
                    if (!(!self.errors.length && api.isEffectiveApi(self.validateApi, data))) return [3 /*break*/, 6];
                    if (validateCancel) {
                        validateCancel();
                        validateCancel = null;
                    }
                    _g.label = 3;
                case 3:
                    _g.trys.push([3, 5, , 6]);
                    return [4 /*yield*/, mobxStateTree.getEnv(self).fetcher(self.validateApi, 
                        /** 如果配置validateApi，需要将用户最新输入同步到数据域内 */
                        object.createObject(data, (_a = {}, _a[self.name] = self.tmpValue, _a)), {
                            cancelExecutor: function (executor) {
                                return (validateCancel = executor);
                            }
                        })];
                case 4:
                    json = _g.sent();
                    validateCancel = null;
                    if (!json.ok && json.status === 422 && json.errors) {
                        addError(String((_d = (_c = (_b = self.validateApi) === null || _b === void 0 ? void 0 : _b.messages) === null || _c === void 0 ? void 0 : _c.failed) !== null && _d !== void 0 ? _d : (json.errors || json.msg || "\u8868\u5355\u9879\u300C".concat(self.name, "\u300D\u6821\u9A8C\u5931\u8D25"))));
                    }
                    return [3 /*break*/, 6];
                case 5:
                    err_1 = _g.sent();
                    addError(String(err_1));
                    return [3 /*break*/, 6];
                case 6:
                    self.validated = true;
                    if (self.unique && ((_f = (_e = self.form) === null || _e === void 0 ? void 0 : _e.parentStore) === null || _f === void 0 ? void 0 : _f.storeType) === 'ComboStore') {
                        combo = self.form.parentStore;
                        group = combo.uniques.get(self.name);
                        if (group.items.some(function (item) {
                            return item !== self &&
                                self.tmpValue !== undefined &&
                                self.tmpValue !== '' &&
                                item.value === self.tmpValue;
                        })) {
                            addError(self.__('Form.unique'));
                        }
                    }
                    self.validating = false;
                    self.validatedAt = Date.now();
                    return [2 /*return*/, self.valid];
            }
        });
    });
    function setError(msg, tag) {
        if (tag === void 0) { tag = 'builtin'; }
        clearError();
        addError(msg, tag);
    }
    function addError(msg, tag) {
        if (tag === void 0) { tag = 'builtin'; }
        var msgs = Array.isArray(msg) ? msg : [msg];
        msgs.forEach(function (item) {
            return self.errorData.push({
                msg: typeof item === 'string' ? item : item.msg,
                rule: typeof item !== 'string' ? item.rule : undefined,
                tag: tag
            });
        });
    }
    function clearError(tag) {
        if (tag) {
            var filtered = self.errorData.filter(function (item) { return item.tag !== tag; });
            self.errorData.replace(filtered);
        }
        else {
            self.errorData.clear();
        }
    }
    function getFirstAvaibleOption(options) {
        var e_1, _a;
        if (!Array.isArray(options)) {
            return;
        }
        try {
            for (var options_1 = tslib.__values(options), options_1_1 = options_1.next(); !options_1_1.done; options_1_1 = options_1.next()) {
                var option = options_1_1.value;
                if (Array.isArray(option.children) && option.children.length) {
                    var childFirst = getFirstAvaibleOption(option.children);
                    if (childFirst !== undefined) {
                        return childFirst;
                    }
                }
                else if (option[self.valueField || 'value'] != null &&
                    !option.disabled) {
                    return option;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (options_1_1 && !options_1_1.done && (_a = options_1.return)) _a.call(options_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    function setPagination(params) {
        var _a = params || {}, page = _a.page, perPage = _a.perPage, total = _a.total;
        if (self.enableSourcePagination) {
            self.pagination = tslib.__assign(tslib.__assign(tslib.__assign(tslib.__assign({}, self.pagination), (page != null && typeof page === 'number' ? { page: page } : {})), (perPage != null && typeof perPage === 'number' ? { perPage: perPage } : {})), (total != null && typeof total === 'number' ? { total: total } : {}));
        }
    }
    function setOptions(options, onChange, data) {
        if (!Array.isArray(options)) {
            return;
        }
        options = helper.filterTree(options, function (item) { return item; });
        var originOptions = self.options.concat();
        self.options = options;
        /** 开启分页后当前选项内容需要累加 */
        self.accumulatedOptions = self.enableSourcePagination
            ? uniqWith__default["default"](tslib.__spreadArray(tslib.__spreadArray([], tslib.__read(originOptions), false), tslib.__read(options), false), function (lhs, rhs) {
                var _a, _b;
                return lhs[(_a = self.valueField) !== null && _a !== void 0 ? _a : 'value'] ===
                    rhs[(_b = self.valueField) !== null && _b !== void 0 ? _b : 'value'];
            })
            : options;
        syncOptions(originOptions, data);
        var selectedOptions;
        if (onChange &&
            self.selectFirst &&
            self.filteredOptions.length &&
            (selectedOptions = self.getSelectedOptions(self.value)) &&
            !selectedOptions.filter(function (item) { return !item.__unmatched; }).length) {
            var fistOption = getFirstAvaibleOption(self.filteredOptions);
            if (!fistOption) {
                return;
            }
            var list = [fistOption].map(function (item) {
                if (self.extractValue || self.joinValues) {
                    return item[self.valueField || 'value'];
                }
                return item;
            });
            var value = self.joinValues && self.multiple
                ? list.join(self.delimiter)
                : self.multiple
                    ? list
                    : list[0];
            onChange(value);
        }
    }
    var loadCancel = null;
    var fetchOptions = mobxStateTree.flow(function getInitData(api$1, data, config, setErrorFlag) {
        var json, result, apiObject, msg, e_2, env;
        var _a, _b, _c, _d, _e;
        return tslib.__generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    _f.trys.push([0, 2, , 3]);
                    if (loadCancel) {
                        loadCancel();
                        loadCancel = null;
                        self.loading = false;
                    }
                    if (!(config === null || config === void 0 ? void 0 : config.silent)) {
                        self.loading = true;
                    }
                    return [4 /*yield*/, mobxStateTree.getEnv(self).fetcher(api$1, data, tslib.__assign({ autoAppend: false, cancelExecutor: function (executor) { return (loadCancel = executor); } }, config))];
                case 1:
                    json = _f.sent();
                    loadCancel = null;
                    result = null;
                    if (!json.ok) {
                        apiObject = api.buildApi(api$1, data);
                        setErrorFlag !== false &&
                            setError(self.__('Form.loadOptionsFailed', {
                                reason: (_c = (_b = (_a = apiObject.messages) === null || _a === void 0 ? void 0 : _a.failed) !== null && _b !== void 0 ? _b : json.msg) !== null && _c !== void 0 ? _c : (config && config.errorMessage)
                            }));
                        msg = json.msg;
                        // 如果没有 msg，就提示 status 信息
                        if (!msg) {
                            msg = "status: ".concat(json.status);
                        }
                        !(api$1 === null || api$1 === void 0 ? void 0 : api$1.silent) &&
                            mobxStateTree.getEnv(self).notify('error', (_e = (_d = apiObject.messages) === null || _d === void 0 ? void 0 : _d.failed) !== null && _e !== void 0 ? _e : (self.errors.join('') || "".concat(apiObject.url, ": ").concat(msg)), json.msgTimeout !== undefined
                                ? {
                                    closeButton: true,
                                    timeout: json.msgTimeout
                                }
                                : undefined);
                    }
                    else {
                        result = json;
                    }
                    self.loading = false;
                    return [2 /*return*/, result];
                case 2:
                    e_2 = _f.sent();
                    env = mobxStateTree.getEnv(self);
                    if (!mobxStateTree.isAlive(self) || self.disposed) {
                        return [2 /*return*/];
                    }
                    self.loading = false;
                    if (env.isCancel(e_2)) {
                        return [2 /*return*/];
                    }
                    console.error(e_2);
                    !(api$1 === null || api$1 === void 0 ? void 0 : api$1.silent) && env.notify('error', e_2.message);
                    return [2 /*return*/];
                case 3: return [2 /*return*/];
            }
        });
    });
    var loadOptions = mobxStateTree.flow(function getInitData(api, data, config, clearValue, onChange, setErrorFlag) {
        var json, options;
        var _a, _b, _c, _d, _e, _f, _g;
        return tslib.__generator(this, function (_h) {
            switch (_h.label) {
                case 0: return [4 /*yield*/, fetchOptions(api, data, config, setErrorFlag)];
                case 1:
                    json = _h.sent();
                    if (!json) {
                        return [2 /*return*/, null];
                    }
                    clearError();
                    self.validated = false; // 拉完数据应该需要再校验一下
                    options = ((_a = json.data) === null || _a === void 0 ? void 0 : _a.options) ||
                        ((_b = json.data) === null || _b === void 0 ? void 0 : _b.items) ||
                        ((_c = json.data) === null || _c === void 0 ? void 0 : _c.rows) ||
                        json.data ||
                        [];
                    options = normalizeOptions.normalizeOptions(options, undefined, self.valueField);
                    if (self.enableSourcePagination) {
                        self.pagination = tslib.__assign(tslib.__assign({}, self.pagination), { page: parseInt((_d = json.data) === null || _d === void 0 ? void 0 : _d.page, 10) || 1, total: parseInt((_f = (_e = json.data) === null || _e === void 0 ? void 0 : _e.total) !== null && _f !== void 0 ? _f : (_g = json.data) === null || _g === void 0 ? void 0 : _g.count, 10) || 0 });
                    }
                    if ((config === null || config === void 0 ? void 0 : config.extendsOptions) && self.selectedOptions.length > 0) {
                        self.selectedOptions.forEach(function (item) {
                            var exited = helper.findTree(options, optionValueCompare.optionValueCompare(item, self.valueField || 'value'), {
                                resolve: optionValueCompare.getOptionValueBindField(self.valueField),
                                value: optionValueCompare.getOptionValue(item, self.valueField)
                            });
                            if (!exited) {
                                options.push(item);
                            }
                        });
                    }
                    setOptions(options, onChange, data);
                    if (json.data && typeof json.data.value !== 'undefined') {
                        onChange && onChange(json.data.value, false, true);
                    }
                    else if (clearValue && !self.selectFirst) {
                        self.selectedOptions.some(function (item) { return item.__unmatched; }) &&
                            onChange &&
                            onChange(self.joinValues === false && self.multiple ? [] : '', false, true);
                    }
                    return [2 /*return*/, json];
            }
        });
    });
    /**
     * 从数据域加载选项数据源，注意这里默认source变量解析后是全量的数据源
     */
    function loadOptionsFromDataScope(source, ctx, onChange, clearValue) {
        var options = resolveVariableAndFilter.resolveVariableAndFilter(source, ctx, '| raw');
        if (!Array.isArray(options)) {
            return [];
        }
        options = normalizeOptions.normalizeOptions(options, undefined, self.valueField);
        if (self.enableSourcePagination) {
            self.pagination = tslib.__assign(tslib.__assign(tslib.__assign(tslib.__assign({}, self.pagination), ((ctx === null || ctx === void 0 ? void 0 : ctx.page) ? { page: ctx === null || ctx === void 0 ? void 0 : ctx.page } : {})), ((ctx === null || ctx === void 0 ? void 0 : ctx.perPage) ? { perPage: ctx === null || ctx === void 0 ? void 0 : ctx.perPage } : {})), { total: options.length });
            options = options.slice((self.pagination.page - 1) * self.pagination.perPage, self.pagination.page * self.pagination.perPage);
        }
        setOptions(options, onChange, ctx);
        // source从数据域获取，同时发生变化时，需要清空当前表单项
        if (clearValue && !self.selectFirst) {
            self.selectedOptions.some(function (item) { return item.__unmatched; }) &&
                onChange &&
                onChange('', false, true);
        }
        return options;
    }
    var loadAutoUpdateData = mobxStateTree.flow(function getAutoUpdateData(api, data, silent) {
        var json, result;
        var _a, _b;
        if (silent === void 0) { silent = true; }
        return tslib.__generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    if (loadAutoUpdateCancel) {
                        loadAutoUpdateCancel();
                        loadAutoUpdateCancel = null;
                    }
                    return [4 /*yield*/, mobxStateTree.getEnv(self).fetcher(api, data, {
                            cancelExecutor: function (executor) {
                                return (loadAutoUpdateCancel = executor);
                            }
                        })];
                case 1:
                    json = _c.sent();
                    loadAutoUpdateCancel = null;
                    if (!json) {
                        return [2 /*return*/];
                    }
                    result = ((_a = json.data) === null || _a === void 0 ? void 0 : _a.items) || ((_b = json.data) === null || _b === void 0 ? void 0 : _b.rows);
                    // 只处理仅有一个结果的数据
                    if ((result === null || result === void 0 ? void 0 : result.length) === 1) {
                        return [2 /*return*/, result[0]];
                    }
                    else if (isPlainObject__default["default"](json.data)) {
                        return [2 /*return*/, json.data];
                    }
                    !silent &&
                        !(api === null || api === void 0 ? void 0 : api.silent) &&
                        mobxStateTree.getEnv(self).notify('info', self.__('FormItem.autoFillLoadFailed'));
                    return [2 /*return*/];
            }
        });
    });
    var tryDeferLoadLeftOptions = mobxStateTree.flow(function (option, leftOptions, api, data, config) {
        var indexes, leftIndexes, topOption, json, options, newLeftOptions, children_1;
        var _a;
        return tslib.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!Array.isArray(leftOptions)) {
                        return [2 /*return*/];
                    }
                    indexes = helper.findTreeIndex(self.options, function (item) { return item.leftOptions === leftOptions; });
                    leftIndexes = helper.findTreeIndex(leftOptions, function (item) { return item === option; });
                    topOption = helper.findTree(self.options, function (item) { return item.leftOptions === leftOptions; });
                    if (!indexes || !leftIndexes || !topOption) {
                        return [2 /*return*/];
                    }
                    setOptions(helper.spliceTree(self.options, indexes, 1, tslib.__assign(tslib.__assign({}, topOption), { loading: true, leftOptions: helper.spliceTree(topOption.leftOptions, leftIndexes, 1, tslib.__assign(tslib.__assign({}, option), { loading: true })) })), undefined, data);
                    return [4 /*yield*/, fetchOptions(api, data, tslib.__assign(tslib.__assign({}, config), { silent: true }), false)];
                case 1:
                    json = _b.sent();
                    if (!json) {
                        setOptions(helper.spliceTree(self.options, indexes, 1, tslib.__assign(tslib.__assign({}, topOption), { loading: false, error: true, leftOptions: helper.spliceTree(topOption.leftOptions, leftIndexes, 1, tslib.__assign(tslib.__assign({}, option), { loading: false, error: true })) })), undefined, data);
                        return [2 /*return*/];
                    }
                    options = ((_a = json.data) === null || _a === void 0 ? void 0 : _a.options) ||
                        json.data.items ||
                        json.data.rows ||
                        json.data ||
                        [];
                    newLeftOptions = helper.spliceTree(topOption.leftOptions, leftIndexes, 1, tslib.__assign(tslib.__assign({}, option), { loading: false, loaded: true, children: options }));
                    setOptions(helper.spliceTree(self.options, indexes, 1, tslib.__assign(tslib.__assign({}, topOption), { loading: false, loaded: true, children: options, leftOptions: newLeftOptions })), undefined, data);
                    // 插入新的子节点，用于之后BaseSelection.resolveSelected查找
                    if (Array.isArray(topOption.children)) {
                        children_1 = topOption.children.concat();
                        helper.flattenTree(newLeftOptions).forEach(function (item) {
                            if (!helper.findTree(topOption.children, function (node) { return node.ref === item.value; }, {
                                resolve: function (node) { return node.ref; },
                                value: item.value
                            })) {
                                children_1.push({ ref: item.value, defer: true });
                            }
                        });
                        setOptions(helper.spliceTree(self.options, indexes, 1, tslib.__assign(tslib.__assign({}, topOption), { leftOptions: newLeftOptions, children: children_1 })), undefined, data);
                    }
                    return [2 /*return*/, json];
            }
        });
    });
    var deferLoadLeftOptions = mobxStateTree.flow(function (option, leftOptions, api, data, config) {
        return tslib.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, tryDeferLoadLeftOptions(option, leftOptions, api, data, config)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
    var deferLoadOptions = mobxStateTree.flow(function (option, api, data, config) {
        var labelField, valueField, indexes, leftOptions, json, options;
        var _a, _b;
        return tslib.__generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    labelField = self.labelField || 'label';
                    valueField = self.valueField || 'value';
                    indexes = helper.findTreeIndex(self.options, function (item) {
                        return item === option ||
                            /** tree-select中会对option添加collapsed, visible属性，导致item === option不通过 */
                            isEqualWith__default["default"](item, option, function (source, target) {
                                return (source === null || source === void 0 ? void 0 : source[valueField]) != null &&
                                    (target === null || target === void 0 ? void 0 : target[valueField]) != null &&
                                    (source === null || source === void 0 ? void 0 : source[labelField]) === (target === null || target === void 0 ? void 0 : target[labelField]) &&
                                    (source === null || source === void 0 ? void 0 : source[valueField]) === (target === null || target === void 0 ? void 0 : target[valueField]);
                            });
                    });
                    if (!!indexes) return [3 /*break*/, 2];
                    leftOptions = (_a = self.options[0]) === null || _a === void 0 ? void 0 : _a.leftOptions;
                    return [4 /*yield*/, tryDeferLoadLeftOptions(option, leftOptions, api, data, config)];
                case 1: return [2 /*return*/, _c.sent()];
                case 2:
                    setOptions(helper.spliceTree(self.options, indexes, 1, tslib.__assign(tslib.__assign({}, option), { loading: true })), undefined, data);
                    return [4 /*yield*/, fetchOptions(api, data, tslib.__assign(tslib.__assign({}, config), { silent: true }), false)];
                case 3:
                    json = _c.sent();
                    if (!json) {
                        setOptions(helper.spliceTree(self.options, indexes, 1, tslib.__assign(tslib.__assign({}, option), { loading: false, error: true })), undefined, data);
                        return [2 /*return*/];
                    }
                    options = ((_b = json.data) === null || _b === void 0 ? void 0 : _b.options) ||
                        json.data.items ||
                        json.data.rows ||
                        json.data ||
                        [];
                    setOptions(helper.spliceTree(self.options, indexes, 1, tslib.__assign(tslib.__assign({}, option), { loading: false, loaded: true, children: options })), undefined, data);
                    return [2 /*return*/, json];
            }
        });
    });
    /**
     * 根据当前节点路径展开树形组件父节点
     */
    var expandTreeOptions = mobxStateTree.flow(function getInitData(nodePathArr, api, data, config) {
        var traversedNode, nodePathArr_1, nodePathArr_1_1, nodePath, _loop_1, level, e_3_1;
        var e_3, _a;
        var _b;
        return tslib.__generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    traversedNode = new Map();
                    _c.label = 1;
                case 1:
                    _c.trys.push([1, 8, 9, 10]);
                    nodePathArr_1 = tslib.__values(nodePathArr), nodePathArr_1_1 = nodePathArr_1.next();
                    _c.label = 2;
                case 2:
                    if (!!nodePathArr_1_1.done) return [3 /*break*/, 7];
                    nodePath = nodePathArr_1_1.value;
                    // 根节点已经展开了，不需要加载
                    if (nodePath.length <= 1) {
                        return [3 /*break*/, 6];
                    }
                    _loop_1 = function (level) {
                        var tree, nodeValue, node, indexes, json, childrenOptions;
                        return tslib.__generator(this, function (_d) {
                            switch (_d.label) {
                                case 0:
                                    tree = self.options.concat();
                                    nodeValue = nodePath[level];
                                    if (traversedNode.has(nodeValue)) {
                                        return [2 /*return*/, "continue"];
                                    }
                                    node = helper.findTree(tree, function (item, key, treeLevel) {
                                        return (treeLevel === level + 1 &&
                                            optionValueCompare.optionValueCompare(nodeValue, self.valueField || 'value')(item));
                                    });
                                    // 只处理懒加载节点
                                    if (!node || !node.defer) {
                                        return [2 /*return*/, "continue"];
                                    }
                                    indexes = helper.findTreeIndex(tree, function (item) { return item === node; });
                                    setOptions(helper.spliceTree(tree, indexes, 1, tslib.__assign(tslib.__assign({}, node), { loading: true })), undefined, node);
                                    return [4 /*yield*/, fetchOptions(api, node, tslib.__assign(tslib.__assign({}, config), { silent: true }), false)];
                                case 1:
                                    json = _d.sent();
                                    if (!json) {
                                        setOptions(helper.spliceTree(tree, indexes, 1, tslib.__assign(tslib.__assign({}, node), { loading: false, error: true })), undefined, node);
                                    }
                                    traversedNode.set(nodeValue, true);
                                    childrenOptions = ((_b = json.data) === null || _b === void 0 ? void 0 : _b.options) ||
                                        json.data.items ||
                                        json.data.rows ||
                                        json.data ||
                                        [];
                                    setOptions(helper.spliceTree(tree, indexes, 1, tslib.__assign(tslib.__assign({}, node), { loading: false, loaded: true, children: childrenOptions })), undefined, node);
                                    return [2 /*return*/];
                            }
                        });
                    };
                    level = 0;
                    _c.label = 3;
                case 3:
                    if (!(level < nodePath.length - 1)) return [3 /*break*/, 6];
                    return [5 /*yield**/, _loop_1(level)];
                case 4:
                    _c.sent();
                    _c.label = 5;
                case 5:
                    level++;
                    return [3 /*break*/, 3];
                case 6:
                    nodePathArr_1_1 = nodePathArr_1.next();
                    return [3 /*break*/, 2];
                case 7: return [3 /*break*/, 10];
                case 8:
                    e_3_1 = _c.sent();
                    e_3 = { error: e_3_1 };
                    return [3 /*break*/, 10];
                case 9:
                    try {
                        if (nodePathArr_1_1 && !nodePathArr_1_1.done && (_a = nodePathArr_1.return)) _a.call(nodePathArr_1);
                    }
                    finally { if (e_3) throw e_3.error; }
                    return [7 /*endfinally*/];
                case 10: return [2 /*return*/];
            }
        });
    });
    // @issue 强依赖form，需要改造暂且放过。
    function syncOptions(originOptions, data) {
        var _a;
        if (!self.options.length && typeof self.value === 'undefined') {
            helper.isArrayChildrenModified(self.filteredOptions, []) &&
                (self.filteredOptions = []);
            helper.isArrayChildrenModified(self.selectedOptions, []) &&
                (self.selectedOptions = []);
            return;
        }
        var value = self.tmpValue;
        var valueField = self.valueField || 'value';
        var labelField = self.labelField || 'label';
        var selected = Array.isArray(value)
            ? value.map(function (item) {
                return item && item.hasOwnProperty(valueField) ? item[valueField] : item;
            })
            : typeof value === 'string'
                ? value.split(self.delimiter || ',').map(function (v) { return v.trim(); })
                : value === void 0
                    ? []
                    : [
                        value && value.hasOwnProperty(valueField)
                            ? value[valueField]
                            : value
                    ];
        if (value && value.hasOwnProperty(labelField)) {
            selected[0] = (_a = {},
                _a[labelField] = value[labelField],
                _a[valueField] = value[valueField],
                _a);
        }
        var expressionsInOptions = false;
        var oldFilteredOptions = self.filteredOptions;
        var filteredOptions = self.options
            .filter(function (item) {
            if (!expressionsInOptions &&
                (item.visibleOn || item.hiddenOn || item.disabledOn)) {
                expressionsInOptions = true;
            }
            return item.visibleOn
                ? tpl.evalExpression(item.visibleOn, data) !== false
                : item.hiddenOn
                    ? tpl.evalExpression(item.hiddenOn, data) !== true
                    : item.visible !== false && item.hidden !== true;
        })
            .map(function (item, index) {
            var disabled = tpl.evalExpression(item.disabledOn, data);
            var newItem = item.disabledOn
                ? oldFilteredOptions.length > index &&
                    oldFilteredOptions[index].disabled === disabled
                    ? oldFilteredOptions[index]
                    : tslib.__assign(tslib.__assign({}, item), { disabled: disabled })
                : item;
            return newItem;
        });
        self.expressionsInOptions = expressionsInOptions;
        var flattenedMap = new Map();
        var flattened = [];
        helper.eachTree(filteredOptions, function (item) {
            var value = optionValueCompare.getOptionValue(item, valueField);
            value != null && flattenedMap.set(value, item);
            value != null && flattened.push(item);
        });
        var selectedOptions = [];
        selected.forEach(function (item, index) {
            var _a, _b;
            var value = optionValueCompare.getOptionValue(item, valueField);
            if (flattenedMap.get(value)) {
                selectedOptions.push(flattenedMap.get(value));
                return;
            }
            var idx = findIndex__default["default"](flattened, optionValueCompare.optionValueCompare(item, valueField));
            if (~idx) {
                selectedOptions.push(flattened[idx]);
            }
            else {
                var unMatched = (value && value[index]) || item;
                var hasValue = unMatched || unMatched === 0;
                if (hasValue &&
                    (typeof unMatched === 'string' || typeof unMatched === 'number')) {
                    unMatched = (_a = {},
                        _a[valueField] = item,
                        _a[labelField] = item,
                        _a.__unmatched = true,
                        _a);
                    var orgin = originOptions &&
                        find__default["default"](originOptions, optionValueCompare.optionValueCompare(item, valueField));
                    if (orgin) {
                        unMatched[labelField] = orgin[labelField];
                    }
                }
                else if (hasValue && self.extractValue) {
                    unMatched = (_b = {},
                        _b[valueField] = item,
                        _b[labelField] = 'UnKnown',
                        _b.__unmatched = true,
                        _b);
                }
                hasValue && selectedOptions.push(unMatched);
            }
        });
        var form = self.form;
        var parentStore = form === null || form === void 0 ? void 0 : form.parentStore;
        if ((parentStore === null || parentStore === void 0 ? void 0 : parentStore.storeType) === combo.ComboStore.name) {
            var combo$1 = parentStore;
            var group = combo$1.uniques.get(self.name);
            var options_2 = [];
            group &&
                group.items.forEach(function (item) {
                    if (self !== item) {
                        options_2.push.apply(options_2, tslib.__spreadArray([], tslib.__read(item.selectedOptions.map(function (item) { return item && item[valueField]; })), false));
                    }
                });
            if (filteredOptions.length && options_2.length) {
                filteredOptions = helper.mapTree(filteredOptions, function (item) {
                    if (~options_2.indexOf(item[valueField])) {
                        return tslib.__assign(tslib.__assign({}, item), { disabled: true });
                    }
                    return item;
                });
            }
        }
        helper.isArrayChildrenModified(self.selectedOptions, selectedOptions) &&
            (self.selectedOptions = selectedOptions);
        helper.isArrayChildrenModified(self.filteredOptions, filteredOptions) &&
            (self.filteredOptions = filteredOptions);
    }
    function setLoading(value) {
        self.loading = value;
    }
    var subStore;
    function getSubStore() {
        return subStore;
    }
    function setSubStore(store) {
        subStore = store;
    }
    function reset(keepErrors) {
        if (keepErrors === void 0) { keepErrors = false; }
        self.validated = false;
        if (subStore && subStore.storeType === 'ComboStore') {
            var combo = subStore;
            combo.forms.forEach(function (form) { return form.reset(undefined, false); }); // 仅重置校验状态，不要重置数据
        }
        !keepErrors && clearError();
    }
    function resetValidationStatus(tag) {
        self.validated = false;
        clearError();
    }
    function openDialog(schema, ctx, callback) {
        if (schema.data) {
            self.dialogData = dataMapping.dataMapping(schema.data, ctx);
        }
        else {
            self.dialogData = ctx;
        }
        self.dialogSchema = schema;
        self.dialogOpen = true;
        callback && dialogCallbacks.set(self.dialogData, callback);
    }
    function closeDialog(confirmed, result) {
        var callback = dialogCallbacks.get(self.dialogData);
        self.dialogOpen = false;
        if (callback) {
            dialogCallbacks.delete(self.dialogData);
            setTimeout(function () { return callback(confirmed, result); }, 200);
        }
    }
    function openPopOver(schema, ctx, callback) {
        self.popOverData = ctx || {};
        self.popOverOpen = true;
        self.popOverSchema = schema;
        callback && dialogCallbacks.set(self.popOverData, callback);
    }
    function closePopOver(confirmed, result) {
        var callback = dialogCallbacks.get(self.popOverData);
        self.popOverOpen = false;
        if (callback) {
            dialogCallbacks.delete(self.popOverData);
            setTimeout(function () { return callback(confirmed, result); }, 200);
        }
    }
    function changeTmpValue(value, changeReason // 默认值
    ) {
        // 清除因extraName导致清空时value为空值数组，进而导致必填校验不生效的异常情况
        if (self.extraName && Array.isArray(value)) {
            self.tmpValue = value.filter(function (item) { return item; }).length ? value : '';
        }
        else {
            self.tmpValue = value;
        }
        if (changeReason) {
            self.changeMotivation = changeReason;
        }
    }
    function changeEmitedValue(value) {
        self.emitedValue = value;
    }
    function addSubFormItem(item) {
        self.itemsRef.push(item.id);
    }
    function removeSubFormItem(item) {
        var idx = self.itemsRef.findIndex(function (a) { return a === item.id; });
        if (~idx) {
            self.itemsRef.splice(idx, 1);
        }
    }
    function setIsControlled(value) {
        self.isControlled = !!value;
    }
    var init = mobxStateTree.flow(function init() {
        var hooks, hooks_1, hooks_1_1, hook, e_4_1;
        var e_4, _a;
        return tslib.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    hooks = initHooks.sort(function (a, b) { return (a.__weight || 0) - (b.__weight || 0); });
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, , 10, 11]);
                    _b.label = 2;
                case 2:
                    _b.trys.push([2, 7, 8, 9]);
                    hooks_1 = tslib.__values(hooks), hooks_1_1 = hooks_1.next();
                    _b.label = 3;
                case 3:
                    if (!!hooks_1_1.done) return [3 /*break*/, 6];
                    hook = hooks_1_1.value;
                    return [4 /*yield*/, hook(self)];
                case 4:
                    _b.sent();
                    _b.label = 5;
                case 5:
                    hooks_1_1 = hooks_1.next();
                    return [3 /*break*/, 3];
                case 6: return [3 /*break*/, 9];
                case 7:
                    e_4_1 = _b.sent();
                    e_4 = { error: e_4_1 };
                    return [3 /*break*/, 9];
                case 8:
                    try {
                        if (hooks_1_1 && !hooks_1_1.done && (_a = hooks_1.return)) _a.call(hooks_1);
                    }
                    finally { if (e_4) throw e_4.error; }
                    return [7 /*endfinally*/];
                case 9: return [3 /*break*/, 11];
                case 10:
                    if (mobxStateTree.isAlive(self)) {
                        self.inited = true;
                    }
                    return [7 /*endfinally*/];
                case 11: return [2 /*return*/];
            }
        });
    });
    return {
        focus: focus,
        blur: blur,
        config: config,
        validate: validate,
        setError: setError,
        addError: addError,
        clearError: clearError,
        setPagination: setPagination,
        setOptions: setOptions,
        loadOptions: loadOptions,
        loadOptionsFromDataScope: loadOptionsFromDataScope,
        deferLoadOptions: deferLoadOptions,
        deferLoadLeftOptions: deferLoadLeftOptions,
        expandTreeOptions: expandTreeOptions,
        syncOptions: syncOptions,
        setLoading: setLoading,
        setSubStore: setSubStore,
        getSubStore: getSubStore,
        reset: reset,
        resetValidationStatus: resetValidationStatus,
        openDialog: openDialog,
        closeDialog: closeDialog,
        openPopOver: openPopOver,
        closePopOver: closePopOver,
        changeTmpValue: changeTmpValue,
        changeEmitedValue: changeEmitedValue,
        addSubFormItem: addSubFormItem,
        removeSubFormItem: removeSubFormItem,
        loadAutoUpdateData: loadAutoUpdateData,
        setIsControlled: setIsControlled,
        init: init,
        addInitHook: function (fn, weight) {
            if (weight === void 0) { weight = 0; }
            fn = helper.promisify(fn);
            initHooks.push(fn);
            fn.__weight = weight;
            return function () {
                var idx = initHooks.indexOf(fn);
                ~idx && initHooks.splice(idx, 1);
            };
        },
        beforeDestroy: function () {
            // 销毁
            initHooks.splice(0, initHooks.length);
        }
    };
});

exports.FormItemStore = FormItemStore;
