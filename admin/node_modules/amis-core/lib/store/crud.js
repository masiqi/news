/**
 * amis-core v6.13.0
 * Copyright 2018-2025 fex
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var fileSaver = require('file-saver');
var mobxStateTree = require('mobx-state-tree');
var service = require('./service.js');
var helper = require('../utils/helper.js');
var pick = require('lodash/pick');
require('amis-formula');
require('moment');
var object = require('../utils/object.js');
var resolveVariableAndFilter = require('../utils/resolveVariableAndFilter.js');
require('../utils/memoryParse.js');
require('@rc-component/mini-decimal');
require('lodash/isPlainObject');
require('../utils/filter.js');
var api = require('../utils/api.js');
var tpl = require('../utils/tpl.js');
var table = require('./table.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var pick__default = /*#__PURE__*/_interopDefaultLegacy(pick);

var ServerError = /** @class */ (function (_super) {
    tslib.__extends(ServerError, _super);
    function ServerError(msg, response) {
        var _this = _super.call(this, msg) || this;
        _this.type = 'ServerError';
        Object.setPrototypeOf(_this, ServerError.prototype);
        _this.response = response;
        return _this;
    }
    return ServerError;
}(Error));
var CRUDStore = service.ServiceStore.named('CRUDStore')
    .props({
    pristineQuery: mobxStateTree.types.optional(mobxStateTree.types.frozen(), {}),
    query: mobxStateTree.types.optional(mobxStateTree.types.frozen(), {}),
    prevPage: 1,
    page: 1,
    perPage: 10,
    total: 0,
    mode: 'normal',
    hasNext: false,
    selectedAction: mobxStateTree.types.frozen(),
    columns: mobxStateTree.types.frozen(),
    items: mobxStateTree.types.optional(mobxStateTree.types.array(mobxStateTree.types.frozen()), []),
    selectedItems: mobxStateTree.types.optional(mobxStateTree.types.array(mobxStateTree.types.frozen()), []),
    unSelectedItems: mobxStateTree.types.optional(mobxStateTree.types.array(mobxStateTree.types.frozen()), []),
    filterTogglable: false,
    filterVisible: true,
    hasInnerModalOpen: false
})
    .views(function (self) { return ({
    get lastPage() {
        return Math.max(Math.ceil(self.total / (self.perPage < 1 ? 10 : self.perPage)), 1);
    },
    get filterData() {
        return object.createObject(self.data, tslib.__assign({}, self.query));
    },
    get toolbarData() {
        // 包两层，主要是为了处理以下 case
        // 里面放了个 form，form 提交过来的时候不希望把 items 这些发送过来。
        // 因为会把数据呈现在地址栏上。
        return object.createObject(object.createObject(self.data, this.eventContext), tslib.__assign({}, self.query));
    },
    get mergedData() {
        return object.extendObject(self.data, tslib.__assign(tslib.__assign(tslib.__assign({}, self.query), this.eventContext), self.data));
    },
    get hasModalOpened() {
        return self.dialogOpen || self.drawerOpen || self.hasInnerModalOpen;
    },
    get selectedItemsAsArray() {
        return self.selectedItems.concat();
    },
    get itemsAsArray() {
        return self.items.concat();
    },
    fetchCtxOf: function (data, options) {
        var _a;
        return object.createObject(data, tslib.__assign(tslib.__assign(tslib.__assign({}, self.query), (_a = {}, _a[options.pageField || 'page'] = self.page, _a[options.perPageField || 'perPage'] = self.perPage, _a)), data));
    },
    get eventContext() {
        var context = {
            items: self.items.concat(),
            selectedItems: self.selectedItems.concat(),
            unSelectedItems: self.unSelectedItems.concat(),
            selectedIndexes: self.selectedItems.map(function (item) {
                var _a;
                return ((_a = helper.findTreeIndex(self.items, function (i) { return (item.__pristine || item) === (i.__pristine || i); })) === null || _a === void 0 ? void 0 : _a.join('.')) || '-1';
            })
        };
        return context;
    },
    get offset() {
        return (self.page - 1) * self.perPage;
    }
}); })
    .actions(function (self) {
    var fetchCancel = null;
    function setPristineQuery() {
        self.pristineQuery = self.query;
    }
    function updateQuery(values, updater, pageField, perPageField, replace) {
        if (pageField === void 0) { pageField = 'page'; }
        if (perPageField === void 0) { perPageField = 'perPage'; }
        if (replace === void 0) { replace = false; }
        var originQuery = self.query;
        var query = replace
            ? tslib.__assign({}, values) : tslib.__assign(tslib.__assign({}, originQuery), values);
        /**
         * 非严格模式下也需要严格比较的CASE
         * @reference https://tc39.es/ecma262/#sec-islooselyequal
         */
        var exceptedLooselyRules = [
            [0, ''],
            [false, ''],
            [false, '0'],
            [false, 0],
            [true, 1],
            [true, '1']
        ];
        if (helper.isObjectShallowModified(originQuery, query, function (lhs, rhs) {
            if (exceptedLooselyRules.some(function (rule) { return rule.includes(lhs) && rule.includes(rhs); })) {
                return lhs !== rhs;
            }
            return lhs != rhs;
        })) {
            if (query[pageField || 'page']) {
                self.page = parseInt(query[pageField || 'page'], 10);
            }
            if (query[perPageField || 'perPage']) {
                self.perPage = parseInt(query[perPageField || 'perPage'], 10);
            }
            self.query = query;
            updater && setTimeout(updater.bind(null, "?".concat(helper.qsstringify(query))), 4);
        }
    }
    var fetchInitData = mobxStateTree.flow(function getInitData(api$1, data, options) {
        var startTime, rawItems, matchFunc, items, dir, data_1, ctx, json, elapsedTime, remainingTime_1, result, total, count, page, hasNext, oItems, oRows, columns, rest, items, _a, _b, key, rowsData, data_2, filteredItems, dir, e_1, env;
        var _c, _d, e_2, _e;
        var _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        if (options === void 0) { options = {}; }
        return tslib.__generator(this, function (_r) {
            switch (_r.label) {
                case 0:
                    _r.trys.push([0, 6, , 7]);
                    startTime = Date.now();
                    rawItems = options.source
                        ? resolveVariableAndFilter.resolveVariableAndFilter(options.source, object.createObject(self.mergedData, {
                            items: self.data.itemsRaw,
                            rows: self.data.itemsRaw
                        }), '| raw')
                        : self.items.concat();
                    if (!options.forceReload && options.loadDataOnce && (rawItems === null || rawItems === void 0 ? void 0 : rawItems.length)) {
                        matchFunc = options.matchFunc;
                        items = rawItems;
                        items = helper.applyFilters(items, {
                            query: self.query,
                            columns: options.columns,
                            matchFunc: matchFunc,
                            filterOnAllColumns: options.filterOnAllColumns
                        });
                        if (self.query.orderBy) {
                            dir = /desc/i.test(self.query.orderDir) ? -1 : 1;
                            items = helper.sortArray(items, self.query.orderBy, dir);
                        }
                        data_1 = tslib.__assign(tslib.__assign({}, self.data), (_c = { count: items.length }, _c[options.totalField || 'total'] = items.length, _c.items = items.slice((self.page - 1) * self.perPage, self.page * self.perPage), _c));
                        self.total =
                            parseInt((_f = data_1[options.totalField || 'total']) !== null && _f !== void 0 ? _f : data_1.count, 10) ||
                                0;
                        self.reInitData(data_1);
                        return [2 /*return*/];
                    }
                    if (fetchCancel) {
                        fetchCancel();
                        fetchCancel = null;
                        self.fetching = false;
                    }
                    options.silent || self.markFetching(true);
                    ctx = object.createObject(self.data, tslib.__assign(tslib.__assign(tslib.__assign({}, self.query), data), (_d = {}, _d[options.pageField || 'page'] = self.page, _d[options.perPageField || 'perPage'] = self.perPage, _d)));
                    // 一次性加载不要发送 perPage 属性
                    if (options.loadDataOnce) {
                        delete ctx[options.perPageField || 'perPage'];
                    }
                    return [4 /*yield*/, mobxStateTree.getEnv(self).fetcher(api$1, ctx, tslib.__assign(tslib.__assign({}, options), { cancelExecutor: function (executor) { return (fetchCancel = executor); } }))];
                case 1:
                    json = _r.sent();
                    fetchCancel = null;
                    if (!!json.ok) return [3 /*break*/, 2];
                    self.updateMessage((_k = (_j = (_h = (_g = api$1 === null || api$1 === void 0 ? void 0 : api$1.messages) === null || _g === void 0 ? void 0 : _g.failed) !== null && _h !== void 0 ? _h : json.msg) !== null && _j !== void 0 ? _j : options.errorMessage) !== null && _k !== void 0 ? _k : self.__('CRUD.fetchFailed'), true);
                    !(api$1 === null || api$1 === void 0 ? void 0 : api$1.silent) &&
                        mobxStateTree.getEnv(self).notify('error', json.msg, json.msgTimeout !== undefined
                            ? {
                                closeButton: true,
                                timeout: json.msgTimeout
                            }
                            : undefined);
                    return [3 /*break*/, 5];
                case 2:
                    if (!json.data) {
                        throw new Error(self.__('CRUD.invalidData'));
                    }
                    if (!options.minLoadingTime) return [3 /*break*/, 4];
                    elapsedTime = Date.now() - startTime;
                    remainingTime_1 = options.minLoadingTime - elapsedTime;
                    if (!(remainingTime_1 > 0)) return [3 /*break*/, 4];
                    return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, remainingTime_1); })];
                case 3:
                    _r.sent();
                    _r.label = 4;
                case 4:
                    self.updatedAt = Date.now();
                    result = api.normalizeApiResponseData(json.data);
                    total = result.total, count = result.count, page = result.page, hasNext = result.hasNext, oItems = result.items, oRows = result.rows, columns = result.columns, rest = tslib.__rest(result, ["total", "count", "page", "hasNext", "items", "rows", "columns"]);
                    items = void 0;
                    if (options.source) {
                        items = resolveVariableAndFilter.resolveVariableAndFilter(options.source, object.createObject(self.filterData, result), '| raw');
                    }
                    else {
                        items = result.items || result.rows;
                    }
                    if (!Array.isArray(items)) {
                        try {
                            // 如果不按照 items 格式返回，就拿第一个数组当成 items
                            for (_a = tslib.__values(Object.keys(result)), _b = _a.next(); !_b.done; _b = _a.next()) {
                                key = _b.value;
                                if (result.hasOwnProperty(key) && Array.isArray(result[key])) {
                                    items = result[key];
                                    break;
                                }
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (_b && !_b.done && (_e = _a.return)) _e.call(_a);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                    }
                    else if (items == null) {
                        items = [];
                    }
                    if (!Array.isArray(items)) {
                        throw new Error(self.__('CRUD.invalidArray'));
                    }
                    else {
                        // 确保成员是对象。
                        items.map(function (item) {
                            return typeof item === 'string' ? { text: item } : item;
                        });
                    }
                    rowsData = [];
                    if (options.loadDataMode && Array.isArray(self.data.items)) {
                        if (options.dataAppendTo === 'top') {
                            rowsData = items.concat(self.data.items);
                        }
                        else {
                            rowsData = self.data.items.concat(items);
                        }
                    }
                    else {
                        // 第一次的时候就是直接加载请求的数据
                        rowsData = items;
                    }
                    data_2 = tslib.__assign(tslib.__assign(tslib.__assign({}, (api$1.replaceData ? {} : self.pristine)), { items: rowsData, count: count, total: total }), rest);
                    if (options.loadDataOnce) {
                        /**
                         * 1. 记录原始集合，后续可能基于原始数据做排序查找。
                         * 2. 接口返回中没有 items 和 rows 字段，则直接用查到的数据。
                         */
                        data_2.itemsRaw = oItems || oRows || rowsData.concat();
                        filteredItems = helper.applyFilters(rowsData, {
                            query: self.query,
                            columns: options.columns,
                            filterOnAllColumns: false,
                            matchFunc: options.matchFunc
                        });
                        if (self.query.orderBy) {
                            dir = /desc/i.test(self.query.orderDir) ? -1 : 1;
                            filteredItems = helper.sortArray(filteredItems, self.query.orderBy, dir);
                        }
                        data_2.items = filteredItems.slice((self.page - 1) * self.perPage, self.page * self.perPage);
                        data_2.count = data_2.total = filteredItems.length;
                    }
                    if (Array.isArray(columns)) {
                        self.columns = columns.concat();
                    }
                    else if (rest.isTable2) {
                        self.columns = options.columns;
                    }
                    self.items.replace(rowsData);
                    self.reInitData(data_2, !!api$1.replaceData, api$1.concatDataFields);
                    options.syncResponse2Query !== false &&
                        updateQuery(pick__default["default"](rest, Object.keys(self.query)), undefined, options.pageField || 'page', options.perPageField || 'perPage');
                    self.total =
                        parseInt((_l = data_2[options.totalField || 'total']) !== null && _l !== void 0 ? _l : data_2.count, 10) ||
                            0;
                    typeof page !== 'undefined' && (self.page = parseInt(page, 10));
                    // 分页情况不清楚，只能知道有没有下一页。
                    if (typeof hasNext !== 'undefined') {
                        self.mode = 'simple';
                        self.total = 0;
                        self.hasNext = !!hasNext;
                    }
                    self.updateMessage((_q = (_p = (_o = (_m = api$1.messages) === null || _m === void 0 ? void 0 : _m.success) !== null && _o !== void 0 ? _o : json.msg) !== null && _p !== void 0 ? _p : options.successMessage) !== null && _q !== void 0 ? _q : json.defaultMsg);
                    // 配置了获取成功提示后提示，默认是空不会提示。
                    options &&
                        options.successMessage &&
                        mobxStateTree.getEnv(self).notify('success', self.msg);
                    _r.label = 5;
                case 5:
                    self.markFetching(false);
                    return [2 /*return*/, json];
                case 6:
                    e_1 = _r.sent();
                    env = mobxStateTree.getEnv(self);
                    if (!mobxStateTree.isAlive(self) || self.disposed) {
                        return [2 /*return*/];
                    }
                    self.markFetching(false);
                    if (env.isCancel(e_1)) {
                        return [2 /*return*/];
                    }
                    console.error(e_1);
                    !(api$1 === null || api$1 === void 0 ? void 0 : api$1.silent) && env.notify('error', e_1.message);
                    return [2 /*return*/];
                case 7: return [2 /*return*/];
            }
        });
    });
    function changePage(page, perPage) {
        var pageNum = typeof page !== 'number' ? parseInt(page, 10) : page;
        self.page = isNaN(pageNum) ? 1 : pageNum;
        perPage && changePerPage(perPage);
    }
    function changePerPage(perPage) {
        var perPageNum = typeof perPage !== 'number' ? parseInt(perPage, 10) : perPage;
        self.perPage = isNaN(perPageNum) ? 10 : perPageNum;
    }
    function selectAction(action) {
        self.selectedAction = action;
    }
    var saveRemote = mobxStateTree.flow(function saveRemote(api$1, data, options) {
        var json, e_3;
        var _a, _b, _c, _d, _e, _f, _g, _h;
        if (options === void 0) { options = {}; }
        return tslib.__generator(this, function (_j) {
            switch (_j.label) {
                case 0:
                    _j.trys.push([0, 2, , 3]);
                    options = tslib.__assign({ method: 'post' }, options);
                    self.markSaving(true);
                    return [4 /*yield*/, mobxStateTree.getEnv(self).fetcher(api$1, data, options)];
                case 1:
                    json = _j.sent();
                    self.markSaving(false);
                    if (!helper.isEmpty(json.data) || json.ok) {
                        self.updateData(api.normalizeApiResponseData(json.data), {
                            __saved: Date.now()
                        }, !!api$1 && api$1.replaceData, api$1 === null || api$1 === void 0 ? void 0 : api$1.concatDataFields);
                        self.updatedAt = Date.now();
                    }
                    if (!json.ok) {
                        self.updateMessage((_d = (_c = (_b = (_a = api$1 === null || api$1 === void 0 ? void 0 : api$1.messages) === null || _a === void 0 ? void 0 : _a.failed) !== null && _b !== void 0 ? _b : json.msg) !== null && _c !== void 0 ? _c : options.errorMessage) !== null && _d !== void 0 ? _d : self.__('saveFailed'), true);
                        !(api$1 === null || api$1 === void 0 ? void 0 : api$1.silent) &&
                            mobxStateTree.getEnv(self).notify('error', self.msg, json.msgTimeout !== undefined
                                ? {
                                    closeButton: true,
                                    timeout: json.msgTimeout
                                }
                                : undefined);
                        throw new ServerError(self.msg, json);
                    }
                    else {
                        self.updateMessage((_h = (_g = (_f = (_e = api$1 === null || api$1 === void 0 ? void 0 : api$1.messages) === null || _e === void 0 ? void 0 : _e.success) !== null && _f !== void 0 ? _f : json.msg) !== null && _g !== void 0 ? _g : options.successMessage) !== null && _h !== void 0 ? _h : json.defaultMsg);
                        self.msg &&
                            mobxStateTree.getEnv(self).notify('success', self.msg, json.msgTimeout !== undefined
                                ? {
                                    closeButton: true,
                                    timeout: json.msgTimeout
                                }
                                : undefined);
                    }
                    // 补一个空对象是为了区别于被取消的请求
                    // 请求被取消时会返回 undefined
                    return [2 /*return*/, json.data || {}];
                case 2:
                    e_3 = _j.sent();
                    if (!mobxStateTree.isAlive(self) || self.disposed) {
                        return [2 /*return*/];
                    }
                    self.markSaving(false);
                    if (mobxStateTree.getEnv(self).isCancel(e_3)) {
                        return [2 /*return*/];
                    }
                    !(api$1 === null || api$1 === void 0 ? void 0 : api$1.silent) &&
                        e_3.type !== 'ServerError' &&
                        mobxStateTree.getEnv(self).notify('error', e_3.message);
                    throw e_3;
                case 3: return [2 /*return*/];
            }
        });
    });
    var setFilterTogglable = function (togglable, filterVisible) {
        self.filterTogglable = togglable;
        filterVisible !== void 0 && (self.filterVisible = filterVisible);
    };
    var setFilterVisible = function (visible) {
        self.filterVisible = visible;
    };
    var setSelectedItems = function (items) {
        self.selectedItems.replace(items);
    };
    var setUnSelectedItems = function (items) {
        self.unSelectedItems.replace(items);
    };
    var updateSelectData = function (selected, unSelected) {
        self.selectedItems.replace(selected);
        self.unSelectedItems.replace(unSelected);
        // 同步到data中，使filter等部分也能拿到
        self.reInitData({
            selectedItems: selected,
            unSelectedItems: unSelected
        });
    };
    var setInnerModalOpened = function (value) {
        self.hasInnerModalOpen = value;
    };
    var initFromScope = function (scope, source, options) {
        var _a;
        var items = resolveVariableAndFilter.resolveVariableAndFilter(source, scope, '| raw');
        if (!Array.isArray(items) && !self.items.length) {
            return;
        }
        items = helper.applyFilters(Array.isArray(items) ? items : [], {
            query: self.query,
            columns: options.columns,
            matchFunc: options.matchFunc,
            filterOnAllColumns: true
        });
        if (self.query.orderBy) {
            var dir = /desc/i.test(self.query.orderDir) ? -1 : 1;
            items = helper.sortArray(items.concat(), self.query.orderBy, dir);
        }
        var data = tslib.__assign(tslib.__assign({}, self.pristine), { items: items.length > self.perPage
                ? items.slice((self.page - 1) * self.perPage, self.page * self.perPage)
                : items, count: items.length, total: items.length });
        self.total =
            parseInt((_a = data[options.totalField || 'total']) !== null && _a !== void 0 ? _a : data.count, 10) || 0;
        self.items.replace(items);
        self.reInitData(data);
    };
    var exportAsCSV = function (options) {
        if (options === void 0) { options = {}; }
        return tslib.__awaiter(void 0, void 0, void 0, function () {
            var items, filename, pageField, perPageField, env, ctx, res;
            var _a;
            return tslib.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        items = options.loadDataOnce ? self.data.itemsRaw : self.data.items;
                        filename = options.filename
                            ? tpl.filter(options.filename, options.data, '| raw')
                            : 'data';
                        if (!options.api) return [3 /*break*/, 2];
                        pageField = options.pageField || 'page';
                        perPageField = options.perPageField || 'perPage';
                        env = mobxStateTree.getEnv(self);
                        ctx = object.createObject(self.data, tslib.__assign(tslib.__assign(tslib.__assign({}, self.query), options.data), (_a = {}, _a[pageField] = self.page || 1, _a[perPageField] = self.perPage || 10, _a)));
                        return [4 /*yield*/, env.fetcher(options.api, ctx, {
                                autoAppend: true,
                                pageField: pageField,
                                perPageField: perPageField
                            })];
                    case 1:
                        res = _b.sent();
                        if (!res.data) {
                            return [2 /*return*/];
                        }
                        if (Array.isArray(res.data)) {
                            items = res.data;
                        }
                        else {
                            items = res.data.rows || res.data.items;
                        }
                        _b.label = 2;
                    case 2:
                        Promise.resolve().then(function() {return new Promise(function(fullfill) {require(['papaparse', "tslib"], function(mod, tslib) {fullfill(tslib.__importStar(mod))})})}).then(function (papaparse) {
                            var e_4, _a;
                            // 将数据里的对象转成 json 字符串，不然输出的 csv 没法显示
                            var csvData = [];
                            try {
                                for (var items_1 = tslib.__values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
                                    var row = items_1_1.value;
                                    var rowData = {};
                                    for (var key in row) {
                                        var value = row[key];
                                        if (typeof value === 'object') {
                                            rowData[key] = JSON.stringify(value);
                                        }
                                        else {
                                            rowData[key] = value;
                                        }
                                    }
                                    csvData.push(rowData);
                                }
                            }
                            catch (e_4_1) { e_4 = { error: e_4_1 }; }
                            finally {
                                try {
                                    if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);
                                }
                                finally { if (e_4) throw e_4.error; }
                            }
                            var csvText = papaparse.unparse(csvData);
                            if (csvText) {
                                var blob = new Blob(
                                // 加上 BOM 这样 Excel 打开的时候就不会乱码
                                [new Uint8Array([0xef, 0xbb, 0xbf]), csvText], {
                                    type: 'text/plain;charset=utf-8'
                                });
                                fileSaver.saveAs(blob, "".concat(filename, ".csv"));
                            }
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    var getData = function (superData) {
        return object.createObject(superData, tslib.__assign({ total: self.total, page: self.page, perPage: self.perPage }, self.eventContext));
    };
    var updateColumns = function (columns) {
        self.columns = columns;
    };
    var updateTotal = function (total) {
        self.total = total || 0;
    };
    /** 非Picker模式下，重置当前CRUD的所有的已选择项目 */
    var resetSelection = function () {
        var _a, _b, _c, _d;
        // 初始化CRUD记录的已选择项目和未选择项目
        setSelectedItems([]);
        setUnSelectedItems([]);
        var tableStore = (_b = (_a = self === null || self === void 0 ? void 0 : self.children) === null || _a === void 0 ? void 0 : _a.find) === null || _b === void 0 ? void 0 : _b.call(_a, function (s) { return s.storeType === table.TableStore.name; });
        if (tableStore) {
            // 清空Table记录的已选择项目
            (_d = (_c = tableStore).clear) === null || _d === void 0 ? void 0 : _d.call(_c);
        }
    };
    return {
        getData: getData,
        updateSelectData: updateSelectData,
        setPristineQuery: setPristineQuery,
        updateQuery: updateQuery,
        fetchInitData: fetchInitData,
        changePage: changePage,
        changePerPage: changePerPage,
        selectAction: selectAction,
        saveRemote: saveRemote,
        setFilterTogglable: setFilterTogglable,
        setFilterVisible: setFilterVisible,
        setSelectedItems: setSelectedItems,
        setUnSelectedItems: setUnSelectedItems,
        setInnerModalOpened: setInnerModalOpened,
        initFromScope: initFromScope,
        exportAsCSV: exportAsCSV,
        updateColumns: updateColumns,
        updateTotal: updateTotal,
        resetSelection: resetSelection,
        replaceItems: function (items) {
            self.items.replace(items);
        }
    };
});

exports.CRUDStore = CRUDStore;
