/**
 * amis-core v6.13.0
 * Copyright 2018-2025 fex
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var mobxStateTree = require('mobx-state-tree');
var debounce = require('lodash/debounce');
var throttle = require('lodash/throttle');
var toPairs = require('lodash/toPairs');
var pick = require('lodash/pick');
var service = require('./service.js');
var errors = require('../utils/errors.js');
var helper = require('../utils/helper.js');
var isEqual = require('lodash/isEqual');
var flatten = require('lodash/flatten');
var find = require('lodash/find');
var tpl = require('../utils/tpl.js');
require('amis-formula');
require('moment');
var object = require('../utils/object.js');
var isPureVariable = require('../utils/isPureVariable.js');
require('@rc-component/mini-decimal');
var getVariable = require('../utils/getVariable.js');
require('../utils/memoryParse.js');
require('lodash/isPlainObject');
require('../utils/filter.js');
var api = require('../utils/api.js');
var keyToPath = require('../utils/keyToPath.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var debounce__default = /*#__PURE__*/_interopDefaultLegacy(debounce);
var throttle__default = /*#__PURE__*/_interopDefaultLegacy(throttle);
var toPairs__default = /*#__PURE__*/_interopDefaultLegacy(toPairs);
var pick__default = /*#__PURE__*/_interopDefaultLegacy(pick);
var isEqual__default = /*#__PURE__*/_interopDefaultLegacy(isEqual);
var flatten__default = /*#__PURE__*/_interopDefaultLegacy(flatten);
var find__default = /*#__PURE__*/_interopDefaultLegacy(find);

var FormStore = service.ServiceStore.named('FormStore')
    .props({
    inited: false,
    validated: false,
    submited: false,
    submiting: false,
    savedData: mobxStateTree.types.frozen(),
    // items: types.optional(types.array(types.late(() => FormItemStore)), []),
    canAccessSuperData: true,
    persistData: mobxStateTree.types.optional(mobxStateTree.types.union(mobxStateTree.types.string, mobxStateTree.types.boolean), ''),
    restError: mobxStateTree.types.optional(mobxStateTree.types.array(mobxStateTree.types.string), []) // 没有映射到表达项上的 errors
})
    .views(function (self) {
    function getItems() {
        var formItems = [];
        // 查找孩子节点中是 formItem 的表单项
        var pool = self.children.concat();
        while (pool.length) {
            var current = pool.shift();
            if (current.storeType === 'FormItemStore' && !current.isControlled) {
                formItems.push(current);
            }
            else if (!['ComboStore', 'TableStore', 'FormStore'].includes(current.storeType)) {
                pool.push.apply(pool, tslib.__spreadArray([], tslib.__read(current.children), false));
            }
        }
        return formItems;
    }
    return {
        get items() {
            return getItems();
        }
    };
})
    .views(function (self) {
    return {
        get loading() {
            return self.saving || self.fetching;
        },
        /** 获取InputGroup的子元素 */
        get inputGroupItems() {
            var _a, _b;
            var formItems = {};
            var children = self.items.concat();
            while (children.length) {
                var current = children.shift();
                if (current.inputGroupControl && ((_a = current.inputGroupControl) === null || _a === void 0 ? void 0 : _a.name)) {
                    var controlName = (_b = current.inputGroupControl) === null || _b === void 0 ? void 0 : _b.name;
                    if (formItems.hasOwnProperty(controlName)) {
                        formItems[controlName].push(current);
                    }
                    else {
                        formItems[controlName] = [current];
                    }
                }
            }
            return formItems;
        },
        get errors() {
            var errors = {};
            self.items.forEach(function (item) {
                if (!item.valid) {
                    errors[item.name] = Array.isArray(errors[item.name])
                        ? errors[item.name].concat(item.errors)
                        : item.errors.concat();
                }
            });
            return errors;
        },
        getValueByName: function (name, canAccessSuperData) {
            if (canAccessSuperData === void 0) { canAccessSuperData = self.canAccessSuperData; }
            return getVariable.getVariable(self.data, name, canAccessSuperData);
        },
        getPristineValueByName: function (name) {
            return getVariable.getVariable(self.pristine, name);
        },
        getItemById: function (id) {
            return self.items.find(function (item) { return item.itemId === id; });
        },
        getItemByName: function (name) {
            return self.items.find(function (item) { return item.name === name; });
        },
        getItemsByName: function (name) {
            return self.items.filter(function (item) { return item.name === name; });
        },
        get valid() {
            return (self.items.every(function (item) { return item.valid; }) &&
                (!self.restError || !self.restError.length));
        },
        get validating() {
            return self.items.some(function (item) { return item.validating; });
        },
        get isPristine() {
            return isEqual__default["default"](self.pristine, self.data);
        },
        get modified() {
            if (self.savedData) {
                return self.savedData !== self.data;
            }
            return !this.isPristine;
        },
        get persistKey() {
            return "".concat(location.pathname, "/").concat(self.path, "/").concat(typeof self.persistData === 'string'
                ? tpl.filter(self.persistData, self.data)
                : self.persistData);
        }
    };
})
    .actions(function (self) {
    function setValues(values, tag, replace, concatFields, changeReason) {
        self.updateData(values, tag, replace, concatFields, changeReason);
        // 如果数据域中有数据变化，就都reset一下，去掉之前残留的验证消息
        self.items.forEach(function (item) {
            if (item.extraName) {
                var value = [
                    getVariable.getVariable(values, item.name, false),
                    getVariable.getVariable(values, item.extraName, false)
                ];
                if (value.some(function (item) { return item !== undefined; }) &&
                    !isEqual__default["default"](value, item.tmpValue)) {
                    var origin_1 = item.splitExtraValue(item.tmpValue);
                    item.changeTmpValue(value.map(function (item, idx) { return item !== null && item !== void 0 ? item : origin_1[idx]; }), 'dataChanged');
                    item.changeEmitedValue(undefined);
                }
            }
            else {
                var value = getVariable.getVariable(values, item.name, false);
                if (value !== undefined && value !== item.tmpValue) {
                    item.changeTmpValue(value, 'dataChanged');
                    item.changeEmitedValue(undefined);
                }
            }
            item.reset();
            self.inited && item.validateOnChange && item.validate(self.data);
        });
        // 同步 options
        syncOptions();
    }
    function setValueByName(name, value, isPristine, force, changeReason) {
        if (isPristine === void 0) { isPristine = false; }
        if (force === void 0) { force = false; }
        // 没有变化就不跑了。
        var origin = getVariable.getVariable(self.data, name, false);
        var prev = self.data;
        var data = object.cloneObject(self.data);
        if (value !== origin) {
            if (prev.hasOwnProperty('__prev')) {
                // 基于之前的 __prev 改
                var prevData = object.cloneObject(prev.__prev);
                object.setVariable(prevData, name, origin);
                Object.defineProperty(data, '__prev', {
                    value: prevData,
                    enumerable: false,
                    configurable: false,
                    writable: false
                });
            }
            else {
                Object.defineProperty(data, '__prev', {
                    value: tslib.__assign({}, prev),
                    enumerable: false,
                    configurable: false,
                    writable: false
                });
            }
        }
        else if (!force) {
            return;
        }
        object.setVariable(data, name, value);
        if (isPristine) {
            var pristine = object.cloneObject(self.pristine);
            object.setVariable(pristine, name, value);
            self.pristine = pristine;
        }
        if (!data.__pristine) {
            Object.defineProperty(data, '__pristine', {
                value: self.pristine,
                enumerable: false,
                configurable: false,
                writable: false
            });
        }
        changeReason &&
            Object.isExtensible(data) &&
            !data.__changeReason &&
            Object.defineProperty(data, '__changeReason', {
                value: changeReason,
                enumerable: false,
                configurable: false,
                writable: false
            });
        self.data = data;
        // 同步 options
        syncOptions();
    }
    function deleteValueByName(name, changeReason) {
        var prev = self.data;
        var data = object.cloneObject(self.data);
        if (prev.hasOwnProperty('__prev')) {
            // 基于之前的 __prev 改
            var prevData = object.cloneObject(prev.__prev);
            object.setVariable(prevData, name, getVariable.getVariable(prev, name));
            Object.defineProperty(data, '__prev', {
                value: prevData,
                enumerable: false,
                configurable: false,
                writable: false
            });
        }
        else {
            Object.defineProperty(data, '__prev', {
                value: tslib.__assign({}, prev),
                enumerable: false,
                configurable: false,
                writable: false
            });
        }
        object.deleteVariable(data, name);
        changeReason &&
            Object.isExtensible(data) &&
            !data.__changeReason &&
            Object.defineProperty(data, '__changeReason', {
                value: changeReason,
                enumerable: false,
                configurable: false,
                writable: false
            });
        self.data = data;
    }
    function trimValues() {
        var data = helper.mapObject(self.data, function (item) {
            return typeof item === 'string' ? item.trim() : item;
        });
        self.updateData(data);
    }
    var syncOptions = debounce__default["default"](function () { return self.items.forEach(function (item) { return item.syncOptions(undefined, self.data); }); }, 250, {
        trailing: true,
        leading: false
    });
    function setRestError(errors) {
        self.restError.replace(errors);
    }
    function addRestError(msg, name) {
        var names = name
            ? Array.isArray(name)
                ? name.concat()
                : [name]
            : null;
        if (Array.isArray(names)) {
            var errors_1 = {};
            names.forEach(function (name) { return (errors_1[name] = msg); });
            setFormItemErrors(errors_1, 'rules');
        }
        else {
            self.restError.push(msg);
        }
    }
    function clearRestError() {
        setRestError([]);
    }
    var saveRemote = mobxStateTree.flow(function saveRemote(api$1, data, options) {
        var ret, json, ret, e_1, ret, result;
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        if (options === void 0) { options = {}; }
        return tslib.__generator(this, function (_r) {
            switch (_r.label) {
                case 0:
                    clearRestError();
                    _r.label = 1;
                case 1:
                    _r.trys.push([1, 12, , 15]);
                    options = tslib.__assign({ method: 'post' }, options);
                    if (!(options && options.beforeSend)) return [3 /*break*/, 4];
                    ret = options.beforeSend(data);
                    if (!(ret && ret.then)) return [3 /*break*/, 3];
                    return [4 /*yield*/, ret];
                case 2:
                    ret = _r.sent();
                    _r.label = 3;
                case 3:
                    if (ret === false) {
                        return [2 /*return*/];
                    }
                    _r.label = 4;
                case 4:
                    self.markSaving(true);
                    return [4 /*yield*/, mobxStateTree.getEnv(self).fetcher(api$1, data, options)];
                case 5:
                    json = _r.sent();
                    // 失败也同样修改数据，如果有数据的话。
                    if (!helper.isEmpty(json.data) || json.ok) {
                        self.updatedAt = Date.now();
                        setValues(api.normalizeApiResponseData(json.data), json.ok
                            ? {
                                __saved: Date.now()
                            }
                            : undefined, !!api$1.replaceData, api$1.concatDataFields, {
                            type: 'api'
                        });
                    }
                    if (!!json.ok) return [3 /*break*/, 6];
                    if (json.status === 422 && json.errors) {
                        setFormItemErrors(json.errors);
                        self.updateMessage((_d = (_c = (_b = (_a = api$1 === null || api$1 === void 0 ? void 0 : api$1.messages) === null || _a === void 0 ? void 0 : _a.failed) !== null && _b !== void 0 ? _b : json.msg) !== null && _c !== void 0 ? _c : self.__(options && options.errorMessage)) !== null && _d !== void 0 ? _d : self.__('Form.validateFailed'), true);
                    }
                    else {
                        self.updateMessage((_g = (_f = (_e = api$1 === null || api$1 === void 0 ? void 0 : api$1.messages) === null || _e === void 0 ? void 0 : _e.failed) !== null && _f !== void 0 ? _f : json.msg) !== null && _g !== void 0 ? _g : self.__(options && options.errorMessage), true);
                    }
                    throw new errors.ServerError(self.msg, json);
                case 6:
                    updateSavedData();
                    ret = (_h = options === null || options === void 0 ? void 0 : options.onSuccess) === null || _h === void 0 ? void 0 : _h.call(options, json, json.data);
                    if (!(ret === null || ret === void 0 ? void 0 : ret.then)) return [3 /*break*/, 8];
                    return [4 /*yield*/, ret];
                case 7:
                    ret = _r.sent();
                    _r.label = 8;
                case 8:
                    if (!((_j = ret === null || ret === void 0 ? void 0 : ret.cbResult) === null || _j === void 0 ? void 0 : _j.then)) return [3 /*break*/, 10];
                    return [4 /*yield*/, ret.cbResult];
                case 9:
                    _r.sent();
                    _r.label = 10;
                case 10:
                    self.markSaving(false);
                    self.updateMessage((_o = (_m = (_l = (_k = api$1 === null || api$1 === void 0 ? void 0 : api$1.messages) === null || _k === void 0 ? void 0 : _k.success) !== null && _l !== void 0 ? _l : json.msg) !== null && _m !== void 0 ? _m : (options.successMessage === 'saveSuccess'
                        ? json.defaultMsg
                        : self.__(options && options.successMessage))) !== null && _o !== void 0 ? _o : json.defaultMsg);
                    if (!((_p = ret === null || ret === void 0 ? void 0 : ret.dispatcher) === null || _p === void 0 ? void 0 : _p.prevented)) {
                        self.msg &&
                            mobxStateTree.getEnv(self).notify('success', self.msg, json.msgTimeout !== undefined
                                ? {
                                    closeButton: true,
                                    timeout: json.msgTimeout
                                }
                                : undefined);
                    }
                    return [2 /*return*/, json.data];
                case 11: return [3 /*break*/, 15];
                case 12:
                    e_1 = _r.sent();
                    self.markSaving(false);
                    ret = options && options.onFailed && options.onFailed(e_1.response || {});
                    if (!(ret === null || ret === void 0 ? void 0 : ret.then)) return [3 /*break*/, 14];
                    return [4 /*yield*/, ret];
                case 13:
                    ret = _r.sent();
                    _r.label = 14;
                case 14:
                    if (!mobxStateTree.isAlive(self) || self.disposed) {
                        return [2 /*return*/];
                    }
                    if ((_q = ret === null || ret === void 0 ? void 0 : ret.dispatcher) === null || _q === void 0 ? void 0 : _q.prevented) {
                        return [2 /*return*/];
                    }
                    if (!(api$1 === null || api$1 === void 0 ? void 0 : api$1.silent)) {
                        if (e_1.type === 'ServerError') {
                            result = e_1.response;
                            mobxStateTree.getEnv(self).notify('error', e_1.message, result.msgTimeout !== undefined
                                ? {
                                    closeButton: true,
                                    timeout: result.msgTimeout
                                }
                                : undefined);
                        }
                        else {
                            mobxStateTree.getEnv(self).notify('error', e_1.message);
                        }
                    }
                    throw e_1;
                case 15: return [2 /*return*/];
            }
        });
    });
    function setFormItemErrors(errors, tag) {
        if (tag === void 0) { tag = 'remote'; }
        Object.keys(errors).forEach(function (key) {
            var item = self.getItemById(key);
            var items = self.getItemsByName(key);
            if (item) {
                item.setError(errors[key], tag);
                delete errors[key];
            }
            else if (items.length) {
                // 通过 name 直接找到的
                items.forEach(function (item) { return item.setError(errors[key], tag); });
                delete errors[key];
            }
            else {
                // 尝试通过path寻找
                var items_1 = getItemsByPath(key);
                if (Array.isArray(items_1) && items_1.length) {
                    items_1.forEach(function (item) { return item.setError("".concat(errors[key]), tag); });
                    delete errors[key];
                }
            }
        });
        // 没有映射上的error信息加在msg后显示出来
        !helper.isEmpty(errors) &&
            setRestError(Object.keys(errors).map(function (key) { return String(errors[key]); }));
    }
    var getItemsByPath = function (key) {
        var paths = keyToPath.keyToPath(key);
        var len = paths.length;
        return paths.reduce(function (stores, path, idx) {
            if (Array.isArray(stores) && stores.every(function (s) { return s.getItemsByName; })) {
                var items = flatten__default["default"](stores.map(function (s) { return s.getItemsByName(path); })).filter(function (i) { return i; });
                var subStores = items
                    .map(function (item) { var _a; return (_a = item === null || item === void 0 ? void 0 : item.getSubStore) === null || _a === void 0 ? void 0 : _a.call(item); })
                    .filter(function (i) { return i; });
                return subStores.length && idx < len - 1 ? subStores : items;
            }
            return null;
        }, [self]);
    };
    // 5s 内不要重复弹同一个错误
    var toastValidateError = throttle__default["default"](function (msg, validateError) {
        var env = mobxStateTree.getEnv(self);
        env.notify('error', msg, {
            validateError: validateError
        });
    }, 5000, {
        trailing: false,
        leading: true
    });
    var submit = mobxStateTree.flow(function submit(fn, hooks, failedMessage, validateErrCb, throwErrors) {
        var diff, result;
        return tslib.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    self.submited = true;
                    self.submiting = true;
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, , 5, 6]);
                    return [4 /*yield*/, validate(hooks, true, true, failedMessage, validateErrCb)];
                case 2:
                    _a.sent();
                    if (!fn) return [3 /*break*/, 4];
                    diff = helper.difference(self.data, self.pristine);
                    return [4 /*yield*/, fn(object.createObject(object.createObject(self.data.__super, {
                            diff: diff,
                            __diff: diff,
                            pristine: self.pristine
                        }), self.data))];
                case 3:
                    result = _a.sent();
                    return [2 /*return*/, result !== null && result !== void 0 ? result : self.data];
                case 4: return [2 /*return*/, self.data];
                case 5:
                    self.submiting = false;
                    return [7 /*endfinally*/];
                case 6: return [2 /*return*/];
            }
        });
    });
    var validate = mobxStateTree.flow(function validate(hooks, forceValidate, throwErrors, failedMessage, validateErrCb) {
        var items, i, len, item, i, len, msg, e_2, msg, dispatcher, validateError;
        return tslib.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    self.validated = true;
                    items = self.items.concat();
                    i = 0, len = items.length;
                    _a.label = 1;
                case 1:
                    if (!(i < len)) return [3 /*break*/, 4];
                    item = items[i];
                    // 先清除组合校验的错误
                    item.clearError('rules');
                    /* 日期类校验存在表单项联动的情况，需要在提交前重置校验状态，避免变量更新后联动校验结果未更新 */
                    if (item.validated &&
                        object.isObject(item.rules) &&
                        toPairs__default["default"](item.rules)
                            .filter(function (_a) {
                            var _b = tslib.__read(_a, 2), key = _b[0]; _b[1];
                            return /^is(Date)?Time/.test(key);
                        })
                            .some(function (_a) {
                            var _b = tslib.__read(_a, 2); _b[0]; var value = _b[1];
                            return Array.isArray(value)
                                ? value.some(function (item) { return isPureVariable.isPureVariable(item); })
                                : isPureVariable.isPureVariable(value);
                        })) {
                        item.resetValidationStatus();
                    }
                    if (!(!item.validated ||
                        item.rules.equals ||
                        item.rules.equalsField ||
                        item.unique ||
                        forceValidate ||
                        !!item.validateApi ||
                        item.isValueSchemaExp)) return [3 /*break*/, 3];
                    return [4 /*yield*/, item.validate(self.data)];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3:
                    i++;
                    return [3 /*break*/, 1];
                case 4:
                    _a.trys.push([4, 9, , 10]);
                    if (!(hooks && hooks.length)) return [3 /*break*/, 8];
                    i = 0, len = hooks.length;
                    _a.label = 5;
                case 5:
                    if (!(i < len)) return [3 /*break*/, 8];
                    return [4 /*yield*/, hooks[i](self.data)];
                case 6:
                    msg = _a.sent();
                    if (typeof msg == 'string' && msg) {
                        throw new Error(msg);
                    }
                    else if (msg === false) {
                        // 不提示直接不通过校验
                        throw new helper.ValidateError(failedMessage || self.__('Form.validateFailed'), self.errors);
                    }
                    _a.label = 7;
                case 7:
                    i++;
                    return [3 /*break*/, 5];
                case 8: return [3 /*break*/, 10];
                case 9:
                    e_2 = _a.sent();
                    if (throwErrors) {
                        throw e_2;
                    }
                    else {
                        toastValidateError(e_2.message);
                    }
                    return [2 /*return*/, false];
                case 10:
                    if (!!self.valid) return [3 /*break*/, 14];
                    if (!(self.items.some(function (item) {
                        return item.errorData.some(function (e) { return e.tag !== 'remote'; });
                    }) ||
                        self.restError.length)) return [3 /*break*/, 13];
                    msg = failedMessage !== null && failedMessage !== void 0 ? failedMessage : self.__('Form.validateFailed');
                    dispatcher = validateErrCb && validateErrCb();
                    if (!(dispatcher === null || dispatcher === void 0 ? void 0 : dispatcher.then)) return [3 /*break*/, 12];
                    return [4 /*yield*/, dispatcher];
                case 11:
                    dispatcher = _a.sent();
                    _a.label = 12;
                case 12:
                    if (!(dispatcher === null || dispatcher === void 0 ? void 0 : dispatcher.prevented)) {
                        validateError = new helper.ValidateError(failedMessage || self.__('Form.validateFailed'), self.errors, {
                            items: self.items,
                            msg: {
                                customMsg: failedMessage,
                                defaultMsg: self.__('Form.validateFailed')
                            }
                        });
                        msg && toastValidateError(msg, validateError);
                    }
                    _a.label = 13;
                case 13:
                    if (throwErrors) {
                        throw new helper.ValidateError(failedMessage || self.__('Form.validateFailed'), self.errors);
                    }
                    _a.label = 14;
                case 14: return [2 /*return*/, self.valid];
            }
        });
    });
    var validateFields = mobxStateTree.flow(function validateFields(fields) {
        var items, normalizedfields, result, _loop_1, i, len;
        return tslib.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    items = self.items.concat();
                    normalizedfields = fields.map(function (field) {
                        return typeof field === 'string' ? { name: field, rules: {} } : field;
                    });
                    result = [];
                    _loop_1 = function (i, len) {
                        var item, field, _b, _c;
                        return tslib.__generator(this, function (_d) {
                            switch (_d.label) {
                                case 0:
                                    item = items[i];
                                    field = find__default["default"](normalizedfields, function (field) { return field.name === item.name; });
                                    if (!field) return [3 /*break*/, 2];
                                    _c = (_b = result).push;
                                    return [4 /*yield*/, item.validate(self.data, undefined, field.rules)];
                                case 1:
                                    _c.apply(_b, [_d.sent()]);
                                    _d.label = 2;
                                case 2: return [2 /*return*/];
                            }
                        });
                    };
                    i = 0, len = items.length;
                    _a.label = 1;
                case 1:
                    if (!(i < len)) return [3 /*break*/, 4];
                    return [5 /*yield**/, _loop_1(i, len)];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3:
                    i++;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/, result.every(function (item) { return item; })];
            }
        });
    });
    function clearErrors() {
        var items = self.items.concat();
        items.forEach(function (item) { return item.reset(); });
    }
    function setPristine(data) {
        self.pristine = data;
    }
    function reset(cb, resetData) {
        if (resetData === void 0) { resetData = true; }
        if (resetData) {
            // 父级的数据可能已经被修改，__super不应该被修改
            self.data = object.createObject(self.data.__super, self.pristine);
        }
        // 值可能变了，重新验证一次。
        self.validated = false;
        self.submited = false;
        self.items.forEach(function (item) { return item.reset(); });
        cb && cb(self.data);
    }
    function clear(cb) {
        var toClear = {};
        self.items.forEach(function (item) {
            if (item.name && item.type !== 'hidden') {
                object.setVariable(toClear, item.name, item.resetValue);
            }
            if (item.extraName && typeof item.extraName === 'string') {
                object.setVariable(toClear, item.extraName, item.resetValue);
            }
        });
        setValues(toClear);
        self.validated = false;
        self.submited = false;
        self.items.forEach(function (item) { return item.reset(); });
        cb && cb(self.data);
    }
    function setCanAccessSuperData(value) {
        if (value === void 0) { value = true; }
        self.canAccessSuperData = value;
    }
    function setInited(value) {
        self.inited = value;
    }
    function setPersistData(value) {
        if (value === void 0) { value = ''; }
        self.persistData = value;
    }
    /**
     * 将表单数据存入本地
     * @param keys 指定只存储某些 key
     */
    var setLocalPersistData = function (keys) {
        var data = self.data;
        if (keys && keys.length) {
            data = pick__default["default"](data, keys);
        }
        localStorage.setItem(self.persistKey, JSON.stringify(data));
    };
    function getLocalPersistData() {
        var data = localStorage.getItem(self.persistKey);
        if (data) {
            self.updateData(JSON.parse(data));
        }
    }
    function clearLocalPersistData() {
        localStorage.removeItem(self.persistKey);
    }
    function updateSavedData() {
        self.savedData = self.data;
    }
    return {
        setInited: setInited,
        setValues: setValues,
        setValueByName: setValueByName,
        trimValues: trimValues,
        submit: submit,
        validate: validate,
        validateFields: validateFields,
        clearErrors: clearErrors,
        saveRemote: saveRemote,
        reset: reset,
        syncOptions: syncOptions,
        setCanAccessSuperData: setCanAccessSuperData,
        deleteValueByName: deleteValueByName,
        getLocalPersistData: getLocalPersistData,
        setLocalPersistData: setLocalPersistData,
        clearLocalPersistData: clearLocalPersistData,
        setPristine: setPristine,
        setPersistData: setPersistData,
        clear: clear,
        updateSavedData: updateSavedData,
        setFormItemErrors: setFormItemErrors,
        getItemsByPath: getItemsByPath,
        setRestError: setRestError,
        addRestError: addRestError,
        clearRestError: clearRestError,
        beforeDestroy: function () {
            syncOptions.cancel();
            toastValidateError.cancel();
        }
    };
});

exports.FormStore = FormStore;
