/**
 * amis-core v6.13.0
 * Copyright 2018-2025 fex
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var mobx = require('mobx');

function arraySlice(array, slice) {
    var e_1, _a;
    if (typeof slice !== 'string') {
        return array;
    }
    if (mobx.isObservableArray(array)) {
        array = mobx.toJS(array);
    }
    slice = slice.trim();
    if (!slice || !Array.isArray(array)) {
        return array;
    }
    var parts = slice.split(',');
    var ret = [];
    var arrayLength = array.length;
    if (!arrayLength) {
        return array;
    }
    try {
        for (var parts_1 = tslib.__values(parts), parts_1_1 = parts_1.next(); !parts_1_1.done; parts_1_1 = parts_1.next()) {
            var part = parts_1_1.value;
            // 普通的场景
            if (part.indexOf(':') === -1) {
                var index = parseInt(part, 10);
                if (!isNaN(index) && index < arrayLength) {
                    ret.push(array[index]);
                }
            }
            else {
                var _b = tslib.__read(part.split(':'), 2), start = _b[0], end = _b[1];
                var startIndex = parseInt(start || '0', 10);
                if (isNaN(startIndex) || startIndex < 0) {
                    startIndex = 0;
                }
                // 大于就没意义了
                if (startIndex >= arrayLength) {
                    continue;
                }
                var endIndex = parseInt(end, 10);
                if (isNaN(endIndex)) {
                    endIndex = arrayLength;
                }
                // 负数就从后面开始取
                if (endIndex < 0) {
                    endIndex = arrayLength + endIndex;
                }
                // 小于没有意义
                if (endIndex < startIndex) {
                    continue;
                }
                if (endIndex > arrayLength) {
                    endIndex = arrayLength;
                }
                ret.push.apply(ret, tslib.__spreadArray([], tslib.__read(array.slice(startIndex, endIndex)), false));
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (parts_1_1 && !parts_1_1.done && (_a = parts_1.return)) _a.call(parts_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return ret;
}

exports.arraySlice = arraySlice;
