/**
 * amis-core v6.13.0
 * Copyright 2018-2025 fex
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var helper = require('./helper.js');
var keyToPath = require('./keyToPath.js');

var DATASCHEMA_TYPE_MAP = {
    boolean: '布尔',
    integer: '整数',
    number: '数字',
    string: '文本',
    array: '数组',
    object: '对象'
};
var DataScope = /** @class */ (function () {
    function DataScope(schemas, id) {
        this.children = [];
        this.schemas = [];
        this.setSchemas(Array.isArray(schemas) ? schemas : [schemas]);
        this.id = id;
    }
    DataScope.prototype.addChild = function (id, schema) {
        var child = new DataScope(schema || {
            type: 'object',
            properties: {}
        }, id);
        this.children.push(child);
        child.parent = this;
        return child;
    };
    DataScope.prototype.removeChild = function (idOrScope) {
        var idx = this.children.findIndex(function (item) {
            return typeof idOrScope === 'string' ? idOrScope === item.id : item === idOrScope;
        });
        if (~idx) {
            var scope = this.children[idx];
            delete scope.parent;
            this.children.splice(idx, 1);
        }
    };
    DataScope.prototype.setSchemas = function (schemas) {
        var e_1, _a;
        this.schemas.splice(0, this.schemas.length);
        try {
            for (var schemas_1 = tslib.__values(schemas), schemas_1_1 = schemas_1.next(); !schemas_1_1.done; schemas_1_1 = schemas_1.next()) {
                var schema = schemas_1_1.value;
                if (schema.type !== 'object') {
                    throw new TypeError('data scope accept only object');
                }
                this.schemas.push(tslib.__assign({ $id: helper.guid() }, schema));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (schemas_1_1 && !schemas_1_1.done && (_a = schemas_1.return)) _a.call(schemas_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return this;
    };
    DataScope.prototype.addSchema = function (schema) {
        schema = tslib.__assign({ $id: helper.guid() }, schema);
        this.schemas.push(schema);
        return this;
    };
    DataScope.prototype.removeSchema = function (id) {
        var idx = this.schemas.findIndex(function (schema) { return schema.$id === id; });
        if (~idx) {
            this.schemas.splice(idx, 1);
        }
        return this;
    };
    DataScope.prototype.contains = function (scope) {
        var from = scope;
        while (from) {
            if (this === from) {
                return true;
            }
            from = from.parent;
        }
        return false;
    };
    DataScope.prototype.assignSchema = function (target, schema) {
        var e_2, _a;
        // key相同，type也相同
        if (target.type && target.type === schema.type) {
            if (target.type === 'array') {
                // 先只考虑items，不考虑contains
                if (target.items) {
                    if (Array.isArray(target.items)) {
                        if (schema.items) {
                            if (Array.isArray(schema.items)) {
                                // 如果都是数组，就后者覆盖前者
                                return schema.items;
                            }
                            else {
                                // 否则，追加
                                return tslib.__assign(tslib.__assign({}, target), { items: tslib.__spreadArray(tslib.__spreadArray([], tslib.__read(target.items), false), [schema.items], false) });
                            }
                        }
                        else {
                            return tslib.__assign(tslib.__assign({}, target), schema);
                        }
                    }
                    else {
                        // 非数组，则merge
                        return tslib.__assign(tslib.__assign({}, target), { items: this.assignSchema(target.items, schema.items) });
                    }
                }
                else {
                    return schema;
                }
            }
            else if (target.type === 'object' && target.properties) {
                var properties = {};
                try {
                    // 合并属性
                    for (var _b = tslib.__values(Array.from(new Set(tslib.__spreadArray(tslib.__spreadArray([], tslib.__read(Object.keys(target.properties)), false), tslib.__read(Object.keys(schema.properties)), false)))), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var key = _c.value;
                        var value = target.properties[key];
                        if (value) {
                            properties[key] = schema.properties[key]
                                ? this.assignSchema(value, schema.properties[key])
                                : value;
                        }
                        else {
                            properties[key] = schema.properties[key];
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                return tslib.__assign(tslib.__assign({}, target), { properties: properties });
            }
            else {
                return schema;
            }
        }
        else {
            // key相同、type不同
            if (Array.isArray(target.oneOf)) {
                return tslib.__assign(tslib.__assign({}, target), { oneOf: tslib.__spreadArray(tslib.__spreadArray([], tslib.__read(target.oneOf), false), [schema], false) });
            }
            else {
                return tslib.__assign(tslib.__assign({}, target), { oneOf: [target, schema] });
            }
        }
    };
    DataScope.prototype.getMergedSchema = function () {
        var _this = this;
        var mergedSchema = {
            type: 'object',
            properties: {}
        };
        this.schemas.forEach(function (schema) {
            var properties = schema.properties || {};
            Object.keys(properties).forEach(function (key) {
                var value = properties[key];
                if (mergedSchema.properties[key]) {
                    mergedSchema.properties[key] = _this.assignSchema(mergedSchema.properties[key], value);
                }
                else {
                    mergedSchema.properties[key] = value;
                }
            });
        });
        return mergedSchema;
    };
    DataScope.prototype.buildOptions = function (options, schema, path, key, isMember // 是否是数组成员
    ) {
        var _this = this;
        var _a, _b, _c;
        if (path === void 0) { path = { label: '', value: '' }; }
        if (key === void 0) { key = ''; }
        // todo 支持 oneOf, anyOf
        var option = {
            label: schema.title || key,
            value: schema.title === '成员' ? '' : path.value,
            path: schema.title === '成员' ? '' : path.label,
            type: schema.type,
            rawType: schema.rawType,
            tag: (_b = (_a = schema.typeLabel) !== null && _a !== void 0 ? _a : DATASCHEMA_TYPE_MAP[schema.type]) !== null && _b !== void 0 ? _b : schema.type,
            description: schema.description,
            isMember: isMember,
            disabled: schema.title === '成员'
        };
        // 处理option分组
        if (schema.group) {
            var index = options.findIndex(function (item) { return item.label === schema.group; });
            if (~index) {
                options[index].children.push(option);
            }
            else {
                options.push({
                    label: schema.group,
                    value: '',
                    children: [option]
                });
            }
        }
        else {
            options.push(option);
        }
        if (schema.type === 'object' && schema.properties) {
            option.children = [];
            var keys = Object.keys(schema.properties);
            keys.forEach(function (key) {
                var _a;
                var child = schema.properties[key];
                _this.buildOptions(option.children, child, {
                    label: path.label + (path.label ? '.' : '') + ((_a = child.title) !== null && _a !== void 0 ? _a : key),
                    value: path.value + (path.value ? '.' : '') + key
                }, key, schema.title === '成员');
            });
        }
        else if (schema.type === 'array' && ((_c = schema.items) === null || _c === void 0 ? void 0 : _c.properties)) {
            option.children = [];
            this.buildOptions(option.children, tslib.__assign(tslib.__assign({ title: '成员' }, schema.items), { disabled: true }), {
                label: path.label,
                value: path.value
            }, 'items', schema.title === '成员');
            option.children = helper.mapTree(option.children, function (item) { return (tslib.__assign({}, item
            // disabled: true
            )); });
        }
    };
    DataScope.prototype.getDataPropsAsOptions = function () {
        var variables = [];
        this.buildOptions(variables, this.getMergedSchema());
        return variables[0].children;
    };
    DataScope.prototype.getSchemaByPath = function (path) {
        var e_3, _a;
        var parts = keyToPath.keyToPath(path);
        try {
            for (var _b = tslib.__values(this.schemas), _c = _b.next(); !_c.done; _c = _b.next()) {
                var schema = _c.value;
                var result = parts.reduce(function (schema, key) {
                    if (schema && schema.type === 'object' && schema.properties) {
                        return schema.properties[key];
                    }
                    return null;
                }, schema);
                if (result) {
                    return result;
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return null;
    };
    DataScope.prototype.getSchemaById = function (id) {
        var _a;
        return (_a = this.schemas) === null || _a === void 0 ? void 0 : _a.find(function (item) { return item.$id === id; });
    };
    return DataScope;
}());

exports.DATASCHEMA_TYPE_MAP = DATASCHEMA_TYPE_MAP;
exports.DataScope = DataScope;
