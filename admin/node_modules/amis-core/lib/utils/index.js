/**
 * amis-core v6.13.0
 * Copyright 2018-2025 fex
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

require('tslib');
var amisFormula = require('amis-formula');
require('moment');
require('lodash/isPlainObject');
require('./memoryParse.js');
require('@rc-component/mini-decimal');
require('./filter.js');
var api = require('./api.js');
require('file-saver');
var browser = require('./browser.js');
var ColorScale = require('./ColorScale.js');
var columnsSplit = require('./columnsSplit.js');
var DataSchema = require('./DataSchema.js');
var DataScope = require('./DataScope.js');
var debug = require('./debug.js');
var dom = require('./dom.js');
var errors = require('./errors.js');
var tpl = require('./tpl.js');
var helper = require('./helper.js');
require('lodash/isObject');
require('lodash/isString');
require('lodash/isBoolean');
var highlight = require('./highlight.js');
var icon = require('./icon.js');
var image = require('./image.js');
require('lodash/isEqual');
require('../actions/Action.js');
require('lodash/debounce');
var resizeSensor = require('./resize-sensor.js');
require('react');
require('react-overlays/useRootClose');
require('react-dom');
var SimpleMap = require('./SimpleMap.js');
require('lodash/mapValues');
require('lodash/camelCase');
require('lodash/cloneDeep');
require('lodash/map');
require('lodash/isEmpty');
require('lodash/kebabCase');
require('uncontrollable');
require('hoist-non-react-statics');
var validations = require('./validations.js');
var resolveCondition = require('./resolveCondition.js');
require('mobx');
var Animation = require('./Animation.js');



Object.defineProperty(exports, 'getFilters', {
	enumerable: true,
	get: function () { return amisFormula.getFilters; }
});
Object.defineProperty(exports, 'registerFilter', {
	enumerable: true,
	get: function () { return amisFormula.registerFilter; }
});
Object.defineProperty(exports, 'registerFunction', {
	enumerable: true,
	get: function () { return amisFormula.registerFunction; }
});
exports.addApiRequestAdaptor = api.addApiRequestAdaptor;
exports.addApiResponseAdaptor = api.addApiResponseAdaptor;
exports.addApiResponseAdator = api.addApiResponseAdator;
exports.buildApi = api.buildApi;
exports.callStrFunction = api.callStrFunction;
exports.clearApiCache = api.clearApiCache;
exports.getApiCache = api.getApiCache;
exports.isApiOutdated = api.isApiOutdated;
exports.isApiOutdatedWithData = api.isApiOutdatedWithData;
exports.isEffectiveApi = api.isEffectiveApi;
exports.isSameApi = api.isSameApi;
exports.isValidApi = api.isValidApi;
exports.jsFetcher = api.jsFetcher;
exports.jsonpFetcher = api.jsonpFetcher;
exports.normalizeApi = api.normalizeApi;
exports.normalizeApiResponseData = api.normalizeApiResponseData;
exports.removeApiRequestAdaptor = api.removeApiRequestAdaptor;
exports.removeApiResponseAdaptor = api.removeApiResponseAdaptor;
exports.responseAdaptor = api.responseAdaptor;
exports.setApiCache = api.setApiCache;
exports.shouldBlockedBySendOnApi = api.shouldBlockedBySendOnApi;
exports.str2AsyncFunction = api.str2AsyncFunction;
exports.str2function = api.str2function;
exports.wrapAdaptor = api.wrapAdaptor;
exports.wrapFetcher = api.wrapFetcher;
exports.chromeVersion = browser.chromeVersion;
exports.isSafari = browser.isSafari;
exports.ColorScale = ColorScale.ColorScale;
exports.columnsSplit = columnsSplit.columnsSplit;
exports.DataSchema = DataSchema.DataSchema;
exports.DATASCHEMA_TYPE_MAP = DataScope.DATASCHEMA_TYPE_MAP;
exports.DataScope = DataScope.DataScope;
exports.DebugWrapper = debug.DebugWrapper;
exports.JsonView = debug.JsonView;
exports.debug = debug.debug;
exports.disableDebug = debug.disableDebug;
exports.enableDebug = debug.enableDebug;
exports.safeStringify = debug.safeStringify;
exports.traceProps = debug.traceProps;
exports.warning = debug.warning;
exports.calculateHeight = dom.calculateHeight;
exports.calculatePosition = dom.calculatePosition;
exports.getContainer = dom.getContainer;
exports.getStyleNumber = dom.getStyleNumber;
exports.ownerDocument = dom.ownerDocument;
exports.renderTextByKeyword = dom.renderTextByKeyword;
exports.ServerError = errors.ServerError;
exports.asyncFilter = tpl.asyncFilter;
exports.evalExpression = tpl.evalExpression;
exports.evalExpressionWithConditionBuilder = tpl.evalExpressionWithConditionBuilder;
exports.evalExpressionWithConditionBuilderAsync = tpl.evalExpressionWithConditionBuilderAsync;
exports.evalJS = tpl.evalJS;
exports.filter = tpl.filter;
exports.registerTplEnginer = tpl.registerTplEnginer;
exports.setCustomEvalExpression = tpl.setCustomEvalExpression;
exports.setCustomEvalJs = tpl.setCustomEvalJs;
exports.JSONTraverse = helper.JSONTraverse;
exports.JSONValueMap = helper.JSONValueMap;
exports.SkipOperation = helper.SkipOperation;
exports.TEST_ID_KEY = helper.TEST_ID_KEY;
exports.TestIdBuilder = helper.TestIdBuilder;
exports.ValidateError = helper.ValidateError;
exports.__uri = helper.__uri;
exports.anyChanged = helper.anyChanged;
exports.applyFilters = helper.applyFilters;
exports.autobind = helper.autobind;
exports.buildTrackExpression = helper.buildTrackExpression;
exports.bulkBindFunctions = helper.bulkBindFunctions;
exports.camel = helper.camel;
exports.chainEvents = helper.chainEvents;
exports.chainFunctions = helper.chainFunctions;
exports.changedEffect = helper.changedEffect;
exports.convertArrayValueToMoment = helper.convertArrayValueToMoment;
exports.countTree = helper.countTree;
exports.detectPropValueChanged = helper.detectPropValueChanged;
exports.difference = helper.difference;
exports.differenceFromAll = helper.differenceFromAll;
exports.eachTree = helper.eachTree;
exports.evalTrackExpression = helper.evalTrackExpression;
exports.everyTree = helper.everyTree;
exports.filterTree = helper.filterTree;
exports.findIndex = helper.findIndex;
exports.findObjectsWithKey = helper.findObjectsWithKey;
exports.findTree = helper.findTree;
exports.findTreeAll = helper.findTreeAll;
exports.findTreeIndex = helper.findTreeIndex;
exports.flattenTree = helper.flattenTree;
exports.flattenTreeWithLeafNodes = helper.flattenTreeWithLeafNodes;
exports.formateCheckThemeCss = helper.formateCheckThemeCss;
exports.formateId = helper.formateId;
exports.getLevelFromClassName = helper.getLevelFromClassName;
exports.getPropValue = helper.getPropValue;
exports.getRange = helper.getRange;
exports.getScrollParent = helper.getScrollParent;
exports.getScrollbarWidth = helper.getScrollbarWidth;
exports.getTree = helper.getTree;
exports.getTreeAncestors = helper.getTreeAncestors;
exports.getTreeDepth = helper.getTreeDepth;
exports.getTreeParent = helper.getTreeParent;
exports.getWidthRate = helper.getWidthRate;
exports.guid = helper.guid;
exports.hasAbility = helper.hasAbility;
exports.hasFile = helper.hasFile;
exports.hasOwnPropertyInPath = helper.hasOwnPropertyInPath;
exports.hasVisibleExpression = helper.hasVisibleExpression;
exports.hashCode = helper.hashCode;
exports.immutableExtends = helper.immutableExtends;
exports.importLazyComponent = helper.importLazyComponent;
exports.injectPropsToObject = helper.injectPropsToObject;
exports.isArrayChildrenModified = helper.isArrayChildrenModified;
exports.isBreakpoint = helper.isBreakpoint;
exports.isClickOnInput = helper.isClickOnInput;
exports.isDisabled = helper.isDisabled;
exports.isEmpty = helper.isEmpty;
exports.isMobile = helper.isMobile;
exports.isMobileDevice = helper.isMobileDevice;
exports.isNumeric = helper.isNumeric;
exports.isObjectShallowModified = helper.isObjectShallowModified;
exports.isSuperDataModified = helper.isSuperDataModified;
exports.isUnfolded = helper.isUnfolded;
exports.isVisible = helper.isVisible;
exports.lcFirst = helper.lcFirst;
exports.loadScript = helper.loadScript;
exports.loadStyle = helper.loadStyle;
exports.makeColumnClassBuild = helper.makeColumnClassBuild;
exports.makeHorizontalDeeper = helper.makeHorizontalDeeper;
exports.mapObject = helper.mapObject;
exports.mapTree = helper.mapTree;
exports.noop = helper.noop;
exports.normalizeNodePath = helper.normalizeNodePath;
exports.object2formData = helper.object2formData;
exports.omitControls = helper.omitControls;
exports.padArr = helper.padArr;
exports.parsePrimitiveQueryString = helper.parsePrimitiveQueryString;
exports.parseQuery = helper.parseQuery;
exports.pickEventsProps = helper.pickEventsProps;
exports.preventDefault = helper.preventDefault;
exports.promisify = helper.promisify;
exports.qsparse = helper.qsparse;
exports.qsstringify = helper.qsstringify;
exports.range = helper.range;
exports.removeHTMLTag = helper.removeHTMLTag;
exports.repeatCount = helper.repeatCount;
exports.replaceUrlParams = helper.replaceUrlParams;
exports.rmUndefined = helper.rmUndefined;
exports.someTree = helper.someTree;
exports.sortArray = helper.sortArray;
exports.spliceTree = helper.spliceTree;
exports.supportsMjs = helper.supportsMjs;
exports.syncDataFromSuper = helper.syncDataFromSuper;
exports.ucFirst = helper.ucFirst;
exports.until = helper.until;
exports.uuid = helper.uuid;
exports.uuidv4 = helper.uuidv4;
exports.visibilityFilter = helper.visibilityFilter;
exports.highlight = highlight.highlight;
exports.generateIcon = icon.generateIcon;
exports.getCustomVendor = icon.getCustomVendor;
exports.registerCustomVendor = icon.registerCustomVendor;
exports.getImageDimensions = image.getImageDimensions;
exports.toDataURL = image.toDataURL;
exports.appearSensor = resizeSensor.appearSensor;
exports.getComputedStyle = resizeSensor.getComputedStyle;
exports.resizeSensor = resizeSensor.resizeSensor;
exports.resizeSensorV2 = resizeSensor.resizeSensorV2;
exports.SimpleMap = SimpleMap.SimpleMap;
exports.addRule = validations.addRule;
exports.str2rules = validations.str2rules;
exports.validate = validations.validate;
exports.validateMessages = validations.validateMessages;
exports.validateObject = validations.validateObject;
exports.validations = validations.validations;
exports.getConditionComputers = resolveCondition.getConditionComputers;
exports.registerConditionComputer = resolveCondition.registerConditionComputer;
exports.resolveCondition = resolveCondition.resolveCondition;
exports.resolveConditionAsync = resolveCondition.resolveConditionAsync;
exports.setConditionComputeErrorHandler = resolveCondition.setConditionComputeErrorHandler;
exports.animation = Animation["default"];
