/**
 * amis-core v6.13.0
 * Copyright 2018-2025 fex
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var React = require('react');
var factory = require('../factory.js');
var form = require('../store/form.js');
var tpl = require('../utils/tpl.js');
var filterSchema = require('../utils/filter-schema.js');
var helper = require('../utils/helper.js');
var debounce = require('lodash/debounce');
var flatten = require('lodash/flatten');
var find = require('lodash/find');
var Scoped = require('../Scoped.js');
require('../utils/tpl-builtin.js');
var api = require('../utils/api.js');
var LazyComponent = require('../components/LazyComponent.js');
var mobxStateTree = require('mobx-state-tree');
require('../utils/index.js');
var mobx = require('mobx');
var groupBy = require('lodash/groupBy');
var isEqual = require('lodash/isEqual');
var CustomStyle = require('../components/CustomStyle.js');
var object = require('../utils/object.js');
var styleHelper = require('../utils/style-helper.js');
var dataMapping = require('../utils/dataMapping.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var debounce__default = /*#__PURE__*/_interopDefaultLegacy(debounce);
var flatten__default = /*#__PURE__*/_interopDefaultLegacy(flatten);
var find__default = /*#__PURE__*/_interopDefaultLegacy(find);
var groupBy__default = /*#__PURE__*/_interopDefaultLegacy(groupBy);
var isEqual__default = /*#__PURE__*/_interopDefaultLegacy(isEqual);

var __react_jsx__ = require('react');
var _J$X_ = (__react_jsx__["default"] || __react_jsx__).createElement;
var _J$F_ = (__react_jsx__["default"] || __react_jsx__).Fragment;


;var Form = /** @class */ (function (_super) {
    tslib.__extends(Form, _super);
    function Form(props) {
        var _this = _super.call(this, props) || this;
        _this.hooks = {};
        _this.toDispose = [];
        _this.shouldLoadInitApi = false;
        _this.lazyEmitChange = debounce__default["default"](_this.emitChange.bind(_this), 250, {
            trailing: true,
            leading: false
        });
        // 当有多次调用时，只需要跳一个
        _this.lazyJumpToErrorComponent = debounce__default["default"](_this.jumpToErrorComponent.bind(_this), 250, {
            trailing: false,
            leading: true
        });
        _this.formRef = React__default["default"].createRef();
        // 如果开启了 lazyChange，需要一个 flush 方法把队列中值应用上。
        _this.flushing = false;
        _this.emittedData = null;
        _this.emitting = false;
        _this.onInit = _this.onInit.bind(_this);
        _this.handleAction = _this.handleAction.bind(_this);
        _this.handleQuery = _this.handleQuery.bind(_this);
        _this.handleChange = _this.handleChange.bind(_this);
        _this.handleDialogConfirm = _this.handleDialogConfirm.bind(_this);
        _this.handleDialogClose = _this.handleDialogClose.bind(_this);
        _this.handleDrawerConfirm = _this.handleDrawerConfirm.bind(_this);
        _this.handleDrawerClose = _this.handleDrawerClose.bind(_this);
        _this.handleFormSubmit = _this.handleFormSubmit.bind(_this);
        _this.validate = _this.validate.bind(_this);
        _this.submit = _this.submit.bind(_this);
        _this.addHook = _this.addHook.bind(_this);
        _this.removeHook = _this.removeHook.bind(_this);
        _this.emitChange = _this.emitChange.bind(_this);
        _this.handleBulkChange = _this.handleBulkChange.bind(_this);
        _this.renderFormItems = _this.renderFormItems.bind(_this);
        _this.reload = _this.reload.bind(_this);
        _this.silentReload = _this.silentReload.bind(_this);
        _this.initInterval = _this.initInterval.bind(_this);
        _this.dispatchInited = _this.dispatchInited.bind(_this);
        _this.blockRouting = _this.blockRouting.bind(_this);
        _this.beforePageUnload = _this.beforePageUnload.bind(_this);
        _this.dispatchEvent = _this.dispatchEvent.bind(_this);
        _this.flush = _this.flush.bind(_this);
        var store = props.store, canAccessSuperData = props.canAccessSuperData, persistData = props.persistData, simpleMode = props.simpleMode, formLazyChange = props.formLazyChange;
        store.setCanAccessSuperData(canAccessSuperData !== false);
        store.setPersistData(persistData);
        if (simpleMode) {
            store.setInited(true);
        }
        if (store &&
            store.parentStore &&
            store.parentStore.storeType === 'ComboStore') {
            var combo = store.parentStore;
            combo.addForm(store);
            combo.forms.forEach(function (form) {
                return form.items.forEach(function (item) { return item.unique && item.syncOptions(undefined, form.data); });
            });
        }
        // withStore 里面与上层数据会做同步
        // 这个时候变更的数据没有同步 onChange 出去，出现数据不一致的问题。
        // https://github.com/baidu/amis/issues/8773
        _this.toDispose.push(mobx.reaction(function () { return store.initedAt; }, function () {
            store.inited &&
                (formLazyChange === false ? _this.emitChange : _this.lazyEmitChange)(!!_this.props.submitOnChange, true);
        }));
        return _this;
    }
    Form.prototype.componentDidMount = function () {
        var _this = this;
        var _a, _b;
        var _c = this.props, initApi = _c.initApi, initFetch = _c.initFetch, initFetchOn = _c.initFetchOn, initAsyncApi = _c.initAsyncApi, initFinishedField = _c.initFinishedField, initCheckInterval = _c.initCheckInterval, store = _c.store, _d = _c.messages, fetchSuccess = _d.fetchSuccess, fetchFailed = _d.fetchFailed, onValidate = _c.onValidate, onValidChange = _c.onValidChange, promptPageLeave = _c.promptPageLeave, env = _c.env;
        var rules = this.getNormalizedRules();
        this.mounted = true;
        if (onValidate) {
            var finalValidate_1 = helper.promisify(onValidate);
            this.toDispose.push(this.addHook(function () { return tslib.__awaiter(_this, void 0, void 0, function () {
                var result;
                return tslib.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, finalValidate_1(store.data, store)];
                        case 1:
                            result = _a.sent();
                            if (result && object.isObject(result)) {
                                Object.keys(result).forEach(function (key) {
                                    var msg = result[key];
                                    var items = store.getItemsByPath(key);
                                    // 没有找到
                                    if (!Array.isArray(items) || !items.length) {
                                        return;
                                    }
                                    // 在setError之前，提前把残留的error信息清除掉，否则每次onValidate后都会一直把报错 append 上去
                                    items.forEach(function (item) { return item.clearError(); });
                                    if (msg) {
                                        msg = Array.isArray(msg) ? msg : [msg];
                                        items.forEach(function (item) { return item.addError(msg); });
                                    }
                                    delete result[key];
                                });
                                helper.isEmpty(result)
                                    ? store.clearRestError()
                                    : store.setRestError(Object.keys(result).map(function (key) { return result[key]; }));
                            }
                            return [2 /*return*/];
                    }
                });
            }); }));
        }
        // 表单校验结果发生变化时，触发 onValidChange
        if (onValidChange) {
            this.toDispose.push(mobx.reaction(function () { return store.valid; }, function (valid) { return onValidChange(valid, _this.props); }));
        }
        if (rules.length) {
            this.toDispose.push(this.addHook(function () {
                if (!store.valid) {
                    return;
                }
                rules.forEach(function (item) {
                    return !tpl.evalExpression(item.rule, store.data) &&
                        store.addRestError(item.message, item.name);
                });
            }));
        }
        if (api.isEffectiveApi(initApi, store.data, initFetch, initFetchOn)) {
            store
                .fetchInitData(initApi, store.data, {
                successMessage: fetchSuccess,
                errorMessage: fetchFailed,
                onSuccess: function (json, data) {
                    store.setValues(data, undefined, undefined, undefined, {
                        type: 'api'
                    });
                    if (!api.isEffectiveApi(initAsyncApi, store.data) ||
                        store.data[initFinishedField || 'finished']) {
                        return;
                    }
                    return helper.until(function () { return store.checkRemote(initAsyncApi, store.data); }, function (ret) { return ret && ret[initFinishedField || 'finished']; }, function (cancel) { return (_this.asyncCancel = cancel); }, initCheckInterval);
                }
            })
                .then(this.initInterval)
                .then(function () {
                return _this.props.dispatchEvent('initApiFinished', object.injectObjectChain(store.data, {
                    __trigger: 'init'
                }));
            })
                .then(this.onInit);
        }
        else {
            setTimeout(this.onInit.bind(this), 4);
        }
        if (promptPageLeave) {
            window.addEventListener('beforeunload', this.beforePageUnload);
            this.unBlockRouting = (_b = (_a = env.blockRouting) === null || _a === void 0 ? void 0 : _a.call(env, this.blockRouting)) !== null && _b !== void 0 ? _b : undefined;
        }
    };
    Form.prototype.componentDidUpdate = function (prevProps) {
        var props = this.props;
        var store = props.store;
        if (api.isApiOutdated(prevProps.initApi, props.initApi, prevProps.data, props.data)) {
            var fetchSuccess = props.fetchSuccess, fetchFailed = props.fetchFailed;
            store[store.hasRemoteData ? 'fetchData' : 'fetchInitData'](props.initApi, store.data, {
                successMessage: fetchSuccess,
                errorMessage: fetchFailed
            })
                .then(this.initInterval)
                .then(this.dispatchInited);
        }
    };
    Form.prototype.componentWillUnmount = function () {
        var _a;
        this.mounted = false;
        clearTimeout(this.timer);
        // this.lazyHandleChange.flush();
        this.lazyEmitChange.cancel();
        this.lazyJumpToErrorComponent.cancel();
        this.asyncCancel && this.asyncCancel();
        this.toDispose.forEach(function (fn) { return fn(); });
        this.toDispose = [];
        window.removeEventListener('beforeunload', this.beforePageUnload);
        (_a = this.unBlockRouting) === null || _a === void 0 ? void 0 : _a.call(this);
    };
    /** 获取表单联合校验的规则 */
    Form.prototype.getNormalizedRules = function () {
        var _a = this.props, rules = _a.rules, __ = _a.translate;
        if (!Array.isArray(rules) || rules.length < 1) {
            return [];
        }
        return rules
            .map(function (item) { return (tslib.__assign(tslib.__assign({}, item), (!item.message || typeof item.message !== 'string'
            ? { message: __('Form.rules.message') }
            : {}))); })
            .filter(function (item) { return item.rule && typeof item.rule === 'string'; });
    };
    Form.prototype.dispatchInited = function (value) {
        var _a;
        return tslib.__awaiter(this, void 0, void 0, function () {
            var _b, data, store, dispatchEvent, result;
            return tslib.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _b = this.props, data = _b.data, store = _b.store, dispatchEvent = _b.dispatchEvent;
                        if (!mobxStateTree.isAlive(store) || store.fetching) {
                            return [2 /*return*/, value];
                        }
                        return [4 /*yield*/, dispatchEvent('inited', object.createObject(data, tslib.__assign(tslib.__assign({}, value === null || value === void 0 ? void 0 : value.data), { responseData: (_a = value === null || value === void 0 ? void 0 : value.data) !== null && _a !== void 0 ? _a : {}, responseStatus: store.error ? 1 : 0, responseMsg: store.msg })))];
                    case 1:
                        result = _c.sent();
                        return [2 /*return*/, result];
                }
            });
        });
    };
    Form.prototype.blockRouting = function () {
        var store = this.props.store;
        var _a = this.props, promptPageLeaveMessage = _a.promptPageLeaveMessage, promptPageLeave = _a.promptPageLeave;
        if (promptPageLeave && store.modified) {
            return promptPageLeaveMessage || '新的修改没有保存，确认要离开？';
        }
    };
    Form.prototype.beforePageUnload = function (e) {
        var blocked = this.blockRouting();
        if (blocked) {
            e.preventDefault();
            e.returnValue = '';
        }
    };
    Form.prototype.onInit = function () {
        return tslib.__awaiter(this, void 0, void 0, function () {
            var _a, onInit, store, persistData, submitOnInit, dispatchEvent, data, initedAt, hooks, groupedHooks, dispatch;
            var _this = this;
            return tslib.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.props, onInit = _a.onInit, store = _a.store, persistData = _a.persistData, submitOnInit = _a.submitOnInit, dispatchEvent = _a.dispatchEvent;
                        if (!mobxStateTree.isAlive(store)) {
                            return [2 /*return*/];
                        }
                        data = object.cloneObject(store.data);
                        initedAt = store.initedAt;
                        store.setInited(true);
                        // 等待 formInited 属性下发成功
                        // 因为 hooks 里面可以能有读取 props 的操作
                        return [4 /*yield*/, new Promise(function (resolve) { return _this.forceUpdate(resolve); })];
                    case 1:
                        // 等待 formInited 属性下发成功
                        // 因为 hooks 里面可以能有读取 props 的操作
                        _b.sent();
                        hooks = this.hooks['init'] || [];
                        groupedHooks = groupBy__default["default"](hooks, function (item) {
                            return item.__enforce === 'prev'
                                ? 'prev'
                                : item.__enforce === 'post'
                                    ? 'post'
                                    : 'normal';
                        });
                        return [4 /*yield*/, Promise.all((groupedHooks.prev || []).map(function (hook) { return hook(data); }))];
                    case 2:
                        _b.sent();
                        //  有可能在前面的步骤中删除了钩子，所以需要重新验证一下
                        return [4 /*yield*/, Promise.all((groupedHooks.normal || []).map(function (hook) { return hooks.includes(hook) && hook(data); }))];
                    case 3:
                        //  有可能在前面的步骤中删除了钩子，所以需要重新验证一下
                        _b.sent();
                        return [4 /*yield*/, Promise.all((groupedHooks.post || []).map(function (hook) { return hooks.includes(hook) && hook(data); }))];
                    case 4:
                        _b.sent();
                        if (!mobxStateTree.isAlive(store)) {
                            return [2 /*return*/];
                        }
                        if (store.initedAt !== initedAt) {
                            // 说明，之前的数据已经失效了。
                            // 比如 combo 一开始设置了初始值，然后 form 的 initApi 又返回了新的值。
                            // 这个时候 store 的数据应该已经 init 了新的值。但是 data 还是老的，这个时候
                            // onInit 出去就是错误的。
                            data = tslib.__assign(tslib.__assign({}, data), store.data);
                        }
                        if (persistData) {
                            store.getLocalPersistData();
                            data = object.cloneObject(store.data);
                        }
                        onInit && onInit(data, this.props);
                        return [4 /*yield*/, this.dispatchInited({ data: data })];
                    case 5:
                        dispatch = _b.sent();
                        if (dispatch === null || dispatch === void 0 ? void 0 : dispatch.prevented) {
                            return [2 /*return*/];
                        }
                        // submitOnInit
                        submitOnInit &&
                            this.handleAction(undefined, {
                                type: 'submit'
                            }, store.data);
                        return [2 /*return*/];
                }
            });
        });
    };
    Form.prototype.reload = function (subPath, query, ctx, silent) {
        return tslib.__awaiter(this, void 0, void 0, function () {
            var _a, store, initApi, initAsyncApi, initFinishedField, _b, fetchSuccess, fetchFailed, result;
            var _c;
            var _this = this;
            return tslib.__generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (query) {
                            return [2 /*return*/, this.receive(query)];
                        }
                        _a = this.props, store = _a.store, initApi = _a.initApi, initAsyncApi = _a.initAsyncApi, initFinishedField = _a.initFinishedField, _b = _a.messages, fetchSuccess = _b.fetchSuccess, fetchFailed = _b.fetchFailed;
                        api.isEffectiveApi(initAsyncApi, store.data) &&
                            store.updateData((_c = {},
                                _c[initFinishedField || 'finished'] = false,
                                _c));
                        result = undefined;
                        if (!api.isEffectiveApi(initApi, store.data)) return [3 /*break*/, 4];
                        return [4 /*yield*/, store.fetchInitData(initApi, store.data, {
                                successMessage: fetchSuccess,
                                errorMessage: fetchFailed,
                                silent: silent,
                                onSuccess: function (json, data) {
                                    store.setValues(data);
                                    if (!api.isEffectiveApi(initAsyncApi, store.data) ||
                                        store.data[initFinishedField || 'finished']) {
                                        return;
                                    }
                                    return helper.until(function () { return store.checkRemote(initAsyncApi, store.data); }, function (ret) { return ret && ret[initFinishedField || 'finished']; }, function (cancel) { return (_this.asyncCancel = cancel); });
                                }
                            })];
                    case 1:
                        result = _d.sent();
                        if (!(result === null || result === void 0 ? void 0 : result.ok)) return [3 /*break*/, 3];
                        this.initInterval(result);
                        store.reset(undefined, false);
                        return [4 /*yield*/, this.props.dispatchEvent('initApiFinished', object.injectObjectChain(store.data, {
                                __trigger: 'reload'
                            }))];
                    case 2:
                        _d.sent();
                        _d.label = 3;
                    case 3: return [3 /*break*/, 5];
                    case 4:
                        store.reset(undefined, false);
                        _d.label = 5;
                    case 5:
                        // 派发初始化接口请求完成事件
                        this.dispatchInited(result);
                        return [2 /*return*/, store.data];
                }
            });
        });
    };
    Form.prototype.receive = function (values, name, replace) {
        var store = this.props.store;
        store.updateData(values, undefined, replace);
        return this.reload();
    };
    Form.prototype.silentReload = function (target, query) {
        return this.reload(target, query, undefined, true);
    };
    Form.prototype.initInterval = function (value) {
        var _a = this.props, interval = _a.interval, silentPolling = _a.silentPolling, stopAutoRefreshWhen = _a.stopAutoRefreshWhen, data = _a.data;
        clearTimeout(this.timer);
        (value === null || value === void 0 ? void 0 : value.ok) &&
            interval &&
            this.mounted &&
            (!stopAutoRefreshWhen || !tpl.evalExpression(stopAutoRefreshWhen, data)) &&
            (this.timer = setTimeout(silentPolling ? this.silentReload : this.reload, Math.max(interval, 1000)));
        return value;
    };
    Form.prototype.isValidated = function () {
        return this.props.store.validated;
    };
    Form.prototype.validate = function (forceValidate, throwErrors, toastErrors, skipFlush) {
        if (throwErrors === void 0) { throwErrors = false; }
        if (toastErrors === void 0) { toastErrors = true; }
        if (skipFlush === void 0) { skipFlush = false; }
        return tslib.__awaiter(this, void 0, void 0, function () {
            var _a, store, dispatchEvent, data, messages, __, result;
            return tslib.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.props, store = _a.store, dispatchEvent = _a.dispatchEvent, data = _a.data, messages = _a.messages, __ = _a.translate;
                        if (!!skipFlush) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.flush()];
                    case 1:
                        _b.sent();
                        _b.label = 2;
                    case 2: return [4 /*yield*/, store.validate(this.hooks['validate'] || [], forceValidate, throwErrors, toastErrors === false
                            ? ''
                            : typeof (messages === null || messages === void 0 ? void 0 : messages.validateFailed) === 'string'
                                ? __(tpl.filter(messages.validateFailed, store.data))
                                : undefined)];
                    case 3:
                        result = _b.sent();
                        dispatchEvent(result ? 'validateSucc' : 'validateError', data);
                        return [2 /*return*/, result];
                }
            });
        });
    };
    Form.prototype.setErrors = function (errors, tag) {
        if (tag === void 0) { tag = 'remote'; }
        var store = this.props.store;
        store.setFormItemErrors(errors, tag);
    };
    Form.prototype.clearErrors = function () {
        var store = this.props.store;
        return store.clearErrors();
    };
    Form.prototype.getValues = function () {
        var store = this.props.store;
        this.flush();
        return store.data;
    };
    Form.prototype.setValues = function (value, replace) {
        var store = this.props.store;
        this.flush();
        store.setValues(value, undefined, replace, undefined, {
            type: 'action'
        });
    };
    Form.prototype.submit = function (fn, throwErrors, skipFlush) {
        if (throwErrors === void 0) { throwErrors = false; }
        if (skipFlush === void 0) { skipFlush = false; }
        return tslib.__awaiter(this, void 0, void 0, function () {
            var _a, store, messages, __, dispatchEvent, data, validateErrCb;
            return tslib.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.props, store = _a.store, messages = _a.messages, __ = _a.translate, dispatchEvent = _a.dispatchEvent, data = _a.data;
                        if (!!skipFlush) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.flush()];
                    case 1:
                        _b.sent();
                        _b.label = 2;
                    case 2:
                        validateErrCb = function () { return dispatchEvent('validateError', data); };
                        return [2 /*return*/, store.submit(fn, this.hooks['validate'] || [], typeof (messages === null || messages === void 0 ? void 0 : messages.validateFailed) === 'string'
                                ? __(tpl.filter(messages.validateFailed, store.data))
                                : undefined, validateErrCb, throwErrors)];
                }
            });
        });
    };
    Form.prototype.flush = function () {
        return tslib.__awaiter(this, void 0, void 0, function () {
            var hooks, hooks_1, hooks_1_1, hook, e_1_1;
            var e_1, _a;
            return tslib.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, , 11, 12]);
                        if (this.flushing) {
                            return [2 /*return*/];
                        }
                        this.flushing = true;
                        hooks = this.hooks['flush'] || [];
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 6, 7, 8]);
                        hooks_1 = tslib.__values(hooks), hooks_1_1 = hooks_1.next();
                        _b.label = 2;
                    case 2:
                        if (!!hooks_1_1.done) return [3 /*break*/, 5];
                        hook = hooks_1_1.value;
                        return [4 /*yield*/, hook()];
                    case 3:
                        _b.sent();
                        _b.label = 4;
                    case 4:
                        hooks_1_1 = hooks_1.next();
                        return [3 /*break*/, 2];
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        e_1_1 = _b.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 8];
                    case 7:
                        try {
                            if (hooks_1_1 && !hooks_1_1.done && (_a = hooks_1.return)) _a.call(hooks_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 8:
                        if (!!this.emitting) return [3 /*break*/, 10];
                        return [4 /*yield*/, this.lazyEmitChange.flush()];
                    case 9:
                        _b.sent();
                        _b.label = 10;
                    case 10: return [3 /*break*/, 12];
                    case 11:
                        this.flushing = false;
                        return [7 /*endfinally*/];
                    case 12: return [2 /*return*/];
                }
            });
        });
    };
    Form.prototype.reset = function () {
        var _a = this.props, store = _a.store, onReset = _a.onReset;
        store.reset(onReset);
    };
    Form.prototype.addHook = function (fn, type, enforce) {
        var _this = this;
        if (type === void 0) { type = 'validate'; }
        this.hooks[type] = this.hooks[type] || [];
        var hook = type === 'flush' ? fn : helper.promisify(fn);
        hook.__enforce = enforce;
        this.hooks[type].push(hook);
        return function () {
            _this.removeHook(fn, type);
            fn = helper.noop;
        };
    };
    Form.prototype.removeHook = function (fn, type) {
        if (type === void 0) { type = 'validate'; }
        var hooks = this.hooks[type];
        if (!hooks) {
            return;
        }
        for (var i = 0, len = hooks.length; i < len; i++) {
            var hook = hooks[i];
            if (hook === fn || hook.raw === fn) {
                hooks.splice(i, 1);
                len--;
                i--;
            }
        }
    };
    Form.prototype.handleChange = function (value, name, submit, changePristine, changeReason) {
        if (changePristine === void 0) { changePristine = false; }
        var _a = this.props, store = _a.store, formLazyChange = _a.formLazyChange, persistDataKeys = _a.persistDataKeys;
        if (typeof name !== 'string') {
            return;
        }
        store.changeValue(name, value, changePristine, undefined, undefined, changeReason || {
            type: 'input'
        });
        if (!changePristine || typeof value !== 'undefined') {
            (formLazyChange === false ? this.emitChange : this.lazyEmitChange)(submit);
        }
        if (store.persistData && store.inited) {
            store.setLocalPersistData(persistDataKeys);
        }
    };
    Form.prototype.jumpToErrorComponent = function (renderer) {
        var _a, _b;
        // 当表单校验错误是，优先调用组件的 focus
        // 如果没有 focus 方法，则滚动到错误信息的位置
        if (typeof (renderer === null || renderer === void 0 ? void 0 : renderer.focus) === 'function') {
            renderer.focus();
        }
        else {
            (_b = (_a = this.formRef.current) === null || _a === void 0 ? void 0 : _a.querySelector(".".concat(this.props.classPrefix, "Form-feedback"))) === null || _b === void 0 ? void 0 : _b.scrollIntoView({
                behavior: 'smooth',
                block: 'center'
            });
        }
    };
    Form.prototype.dispatchEvent = function (e, data, renderer, // for didmount
    scoped) {
        // 把这两个事件转到 form 组件上，让 form 组件来处理
        if ((e === 'formItemValidateSucc' || e === 'formItemValidateError') &&
            (renderer === null || renderer === void 0 ? void 0 : renderer.props.type) !== 'form') {
            if (e === 'formItemValidateError') {
                this.lazyJumpToErrorComponent(renderer);
            }
            // 如果事件是 formItemValidateSucc 或者 formItemValidateError 转成当前组件触发的，
            // 所以 onEvent 是配置在 form 层的而不是表单项层
            renderer = undefined;
            scoped = undefined;
        }
        return this.props.dispatchEvent(e, data, renderer, scoped);
    };
    Form.prototype.emitChange = function (submit, emitedFromWatch) {
        if (emitedFromWatch === void 0) { emitedFromWatch = false; }
        return tslib.__awaiter(this, void 0, void 0, function () {
            var _a, onChange, store, submitOnChange, dispatchEvent_1, data, originData, diff, changeProps, dispatcher;
            return tslib.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, , 4, 5]);
                        this.emitting = true;
                        _a = this.props, onChange = _a.onChange, store = _a.store, submitOnChange = _a.submitOnChange, dispatchEvent_1 = _a.dispatchEvent, data = _a.data, originData = _a.originData;
                        if (!mobxStateTree.isAlive(store)) {
                            return [2 /*return*/];
                        }
                        diff = helper.difference(store.data, originData !== null && originData !== void 0 ? originData : store.upStreamData);
                        if (emitedFromWatch &&
                            (!Object.keys(diff).length || isEqual__default["default"](store.data, this.emittedData))) {
                            return [2 /*return*/];
                        }
                        this.emittedData = store.data;
                        changeProps = [store.data, diff, this.props];
                        return [4 /*yield*/, dispatchEvent_1('change', object.createObject(data, store.data))];
                    case 1:
                        dispatcher = _b.sent();
                        if (!(dispatcher === null || dispatcher === void 0 ? void 0 : dispatcher.prevented)) {
                            onChange && onChange.apply(null, changeProps);
                        }
                        mobxStateTree.isAlive(store) && store.clearRestError();
                        if (!(!emitedFromWatch && (submit || (submitOnChange && store.inited)))) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.handleAction(undefined, {
                                type: 'submit',
                                // 如果这里不跳过，会相互依赖死循环，flush 会 让 emiteChange 立即执行
                                // handleAction 里面又会调用 flush
                                skipFormFlush: true
                            }, store.data)];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3: return [3 /*break*/, 5];
                    case 4:
                        this.emitting = false;
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    Form.prototype.handleBulkChange = function (values, submit, changeReason) {
        var _a = this.props, onChange = _a.onChange, store = _a.store, formLazyChange = _a.formLazyChange;
        store.setValues(values, undefined, undefined, undefined, changeReason || {
            type: 'input'
        });
        // store.updateData(values);
        // store.items.forEach(formItem => {
        //   const updatedValue = getVariable(values, formItem.name, false);
        //   if (updatedValue !== undefined) {
        //     // 更新验证状态但保留错误信息
        //     formItem.reset(true);
        //     // 这里需要更新value，否则提交时不会使用新的字段值校验
        //     formItem.changeTmpValue(updatedValue);
        //     formItem.validateOnChange && formItem.validate(values);
        //   }
        // });
        (formLazyChange === false ? this.emitChange : this.lazyEmitChange)(submit);
    };
    Form.prototype.handleFormSubmit = function (e) {
        var _a = this.props, preventEnterSubmit = _a.preventEnterSubmit, onActionSensor = _a.onActionSensor, close = _a.close;
        e.preventDefault();
        if (preventEnterSubmit) {
            return false;
        }
        var sensor = this.handleAction(e, {
            type: 'submit',
            close: close
        }, this.props.store.data);
        // 让外层可以监控这个动作执行结果
        onActionSensor === null || onActionSensor === void 0 ? void 0 : onActionSensor(sensor);
        return sensor;
    };
    Form.prototype.handleReset = function (action) {
        var onReset = this.props.onReset;
        return function (data) {
            onReset && onReset(data, action);
        };
    };
    Form.prototype.handleAction = function (e, action, data, throwErrors, delegate) {
        var _a, _b;
        if (throwErrors === void 0) { throwErrors = false; }
        return tslib.__awaiter(this, void 0, void 0, function () {
            var _c, store, onSubmit, api$1, asyncApi, finishedField, checkInterval, _d, saveSuccess, saveFailed, resetAfterSubmit, clearAfterSubmit, onAction, onSaved, onReset, onFinished, onFailed, redirect, reload, target, env, onChange, clearPersistDataAfterSubmit, trimValues, dispatchEvent, __, fields, validationRes, dispatcher, _e, dispatchEvent_2, onEvent, submitEvent, dispatcher, successMsg, failMsg;
            var _this = this;
            return tslib.__generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        _c = this.props, store = _c.store, onSubmit = _c.onSubmit, api$1 = _c.api, asyncApi = _c.asyncApi, finishedField = _c.finishedField, checkInterval = _c.checkInterval, _d = _c.messages, saveSuccess = _d.saveSuccess, saveFailed = _d.saveFailed, resetAfterSubmit = _c.resetAfterSubmit, clearAfterSubmit = _c.clearAfterSubmit, onAction = _c.onAction, onSaved = _c.onSaved, onReset = _c.onReset, onFinished = _c.onFinished, onFailed = _c.onFailed, redirect = _c.redirect, reload = _c.reload, target = _c.target, env = _c.env, onChange = _c.onChange, clearPersistDataAfterSubmit = _c.clearPersistDataAfterSubmit, trimValues = _c.trimValues, dispatchEvent = _c.dispatchEvent, __ = _c.translate;
                        if (!!action.skipFormFlush) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.flush()];
                    case 1:
                        _f.sent();
                        _f.label = 2;
                    case 2:
                        if (!mobxStateTree.isAlive(store)) {
                            return [2 /*return*/];
                        }
                        if (trimValues) {
                            store.trimValues();
                        }
                        // 如果 data 就是当前层，则 flush 一下。
                        if (data === this.props.data) {
                            data = store.data;
                        }
                        if (!(Array.isArray(action.required) && action.required.length)) return [3 /*break*/, 6];
                        /** 如果是按钮指定了required，则校验前先清空一下遗留的校验报错 */
                        store.clearErrors();
                        fields = action.required.map(function (item) { return ({
                            name: item,
                            rules: { isRequired: true }
                        }); });
                        return [4 /*yield*/, store.validateFields(fields)];
                    case 3:
                        validationRes = _f.sent();
                        if (!!validationRes) return [3 /*break*/, 5];
                        return [4 /*yield*/, dispatchEvent('validateError', this.props.data)];
                    case 4:
                        dispatcher = _f.sent();
                        if (!(dispatcher === null || dispatcher === void 0 ? void 0 : dispatcher.prevented)) {
                            env.notify('error', __('Form.validateFailed'));
                        }
                        /** 抛异常是为了在dialog中catch这个错误，避免弹窗直接关闭 */
                        return [2 /*return*/, Promise.reject(__('Form.validateFailed'))];
                    case 5:
                        /** 重置validated状态，保证submit时触发表单中的校验项 */
                        store.clearErrors();
                        _f.label = 6;
                    case 6:
                        if (!(action.type === 'submit' ||
                            action.actionType === 'submit' ||
                            action.actionType === 'confirm' ||
                            action.actionType === 'reset-and-submit' ||
                            action.actionType === 'clear-and-submit')) return [3 /*break*/, 8];
                        _e = this.props, dispatchEvent_2 = _e.dispatchEvent, onEvent = _e.onEvent;
                        submitEvent = (_b = (_a = onEvent === null || onEvent === void 0 ? void 0 : onEvent.submit) === null || _a === void 0 ? void 0 : _a.actions) === null || _b === void 0 ? void 0 : _b.length;
                        return [4 /*yield*/, dispatchEvent_2('submit', this.props.data)];
                    case 7:
                        dispatcher = _f.sent();
                        if ((dispatcher === null || dispatcher === void 0 ? void 0 : dispatcher.prevented) || submitEvent) {
                            return [2 /*return*/];
                        }
                        store.setCurrentAction(action, this.props.resolveDefinitions);
                        if (action.actionType === 'reset-and-submit') {
                            store.reset(this.handleReset(action));
                        }
                        else if (action.actionType === 'clear-and-submit') {
                            store.clear(this.handleReset(action));
                        }
                        return [2 /*return*/, this.submit(function (values) { return tslib.__awaiter(_this, void 0, void 0, function () {
                                var result, finnalAsyncApi_1;
                                var _a;
                                var _this = this;
                                return tslib.__generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0:
                                            if (!onSubmit) return [3 /*break*/, 2];
                                            return [4 /*yield*/, onSubmit(values, action)];
                                        case 1:
                                            result = _b.sent();
                                            if (result === false) {
                                                return [2 /*return*/, Promise.resolve(false)];
                                            }
                                            _b.label = 2;
                                        case 2:
                                            // 走到这里代表校验成功了
                                            dispatchEvent_2('validateSucc', object.createObject(this.props.data, values));
                                            if (target) {
                                                this.submitToTarget(Scoped.filterTarget(target, values), values);
                                                /** 可能配置页面跳转事件，页面路由变化导致persistKey不一致，无法清除持久化数据，所以提交成功事件之前先清理一下 */
                                                clearPersistDataAfterSubmit && store.clearLocalPersistData();
                                                dispatchEvent_2('submitSucc', object.createObject(this.props.data, values));
                                            }
                                            else if (action.actionType === 'reload') {
                                                action.target &&
                                                    this.reloadTarget(Scoped.filterTarget(action.target, values), values);
                                            }
                                            else if (action.actionType === 'dialog') {
                                                return [2 /*return*/, new Promise(function (resolve) {
                                                        store.openDialog(data, undefined, function (confirmed, value) {
                                                            var _a;
                                                            (_a = action.callback) === null || _a === void 0 ? void 0 : _a.call(action, confirmed, value);
                                                            resolve({
                                                                confirmed: confirmed,
                                                                value: value
                                                            });
                                                        }, delegate || _this.context);
                                                    })];
                                            }
                                            else if (action.actionType === 'drawer') {
                                                return [2 /*return*/, new Promise(function (resolve) {
                                                        store.openDrawer(data, undefined, function (confirmed, value) {
                                                            var _a;
                                                            (_a = action.callback) === null || _a === void 0 ? void 0 : _a.call(action, confirmed, value);
                                                            resolve({
                                                                confirmed: confirmed,
                                                                value: value
                                                            });
                                                        });
                                                    })];
                                            }
                                            else if (api.isEffectiveApi(action.api || api$1, values)) {
                                                finnalAsyncApi_1 = action.asyncApi || asyncApi;
                                                api.isEffectiveApi(finnalAsyncApi_1, store.data) &&
                                                    store.updateData((_a = {},
                                                        _a[finishedField || 'finished'] = false,
                                                        _a));
                                                return [2 /*return*/, store
                                                        .saveRemote(action.api || api$1, values, {
                                                        successMessage: typeof saveSuccess === 'string'
                                                            ? tpl.filter(saveSuccess, store.data)
                                                            : undefined,
                                                        errorMessage: typeof saveFailed === 'string'
                                                            ? tpl.filter(saveFailed, store.data)
                                                            : undefined,
                                                        onSuccess: function (result) { return tslib.__awaiter(_this, void 0, void 0, function () {
                                                            var dispatcher, cbResult;
                                                            var _this = this;
                                                            return tslib.__generator(this, function (_a) {
                                                                switch (_a.label) {
                                                                    case 0:
                                                                        clearPersistDataAfterSubmit && store.clearLocalPersistData();
                                                                        return [4 /*yield*/, dispatchEvent_2('submitSucc', object.createObject(this.props.data, { result: result }))];
                                                                    case 1:
                                                                        dispatcher = _a.sent();
                                                                        if (!api.isEffectiveApi(finnalAsyncApi_1, store.data) ||
                                                                            store.data[finishedField || 'finished']) {
                                                                            return [2 /*return*/, {
                                                                                    cbResult: null,
                                                                                    dispatcher: dispatcher
                                                                                }];
                                                                        }
                                                                        cbResult = helper.until(function () { return store.checkRemote(finnalAsyncApi_1, store.data); }, function (ret) { return ret && ret[finishedField || 'finished']; }, function (cancel) { return (_this.asyncCancel = cancel); }, checkInterval).then(function (value) {
                                                                            // 派发asyncApiFinished事件
                                                                            dispatchEvent_2('asyncApiFinished', store.data);
                                                                        });
                                                                        return [2 /*return*/, {
                                                                                cbResult: cbResult,
                                                                                dispatcher: dispatcher
                                                                            }];
                                                                }
                                                            });
                                                        }); },
                                                        onFailed: function (result) { return tslib.__awaiter(_this, void 0, void 0, function () {
                                                            var dispatcher;
                                                            return tslib.__generator(this, function (_a) {
                                                                switch (_a.label) {
                                                                    case 0: return [4 /*yield*/, dispatchEvent_2('submitFail', object.createObject(this.props.data, { error: result }))];
                                                                    case 1:
                                                                        dispatcher = _a.sent();
                                                                        return [2 /*return*/, {
                                                                                dispatcher: dispatcher
                                                                            }];
                                                                }
                                                            });
                                                        }); }
                                                    })
                                                        .then(function (response) { return tslib.__awaiter(_this, void 0, void 0, function () {
                                                        var feedback, confirmed;
                                                        return tslib.__generator(this, function (_a) {
                                                            switch (_a.label) {
                                                                case 0:
                                                                    onSaved && onSaved(values, response);
                                                                    feedback = action.feedback || this.props.feedback;
                                                                    if (!(feedback && helper.isVisible(feedback, store.data))) return [3 /*break*/, 2];
                                                                    return [4 /*yield*/, this.openFeedback(feedback, store.data)];
                                                                case 1:
                                                                    confirmed = _a.sent();
                                                                    // 如果 feedback 配置了，取消就跳过原有逻辑。
                                                                    if (feedback.skipRestOnCancel && !confirmed) {
                                                                        throw new helper.SkipOperation();
                                                                    }
                                                                    else if (feedback.skipRestOnConfirm && confirmed) {
                                                                        throw new helper.SkipOperation();
                                                                    }
                                                                    _a.label = 2;
                                                                case 2: return [2 /*return*/, object.injectObjectChain(store.data, {
                                                                        __payload: values,
                                                                        __response: response
                                                                    })];
                                                            }
                                                        });
                                                    }); })];
                                            }
                                            else if (api.shouldBlockedBySendOnApi(action.api || api$1, values)) {
                                                // api存在，但是不满足sendOn时，走这里，不派发submitSucc事件
                                                return [2 /*return*/];
                                            }
                                            else {
                                                clearPersistDataAfterSubmit && store.clearLocalPersistData();
                                                // type为submit，但是没有配api以及target时，只派发事件
                                                dispatchEvent_2('submitSucc', object.createObject(this.props.data, values));
                                            }
                                            return [2 /*return*/, Promise.resolve(null)];
                                    }
                                });
                            }); }, throwErrors, true)
                                .then(function (values) {
                                // 有可能 onSubmit return false 了，那么后面的就不应该再执行了。
                                if (values === false) {
                                    return store.data;
                                }
                                if (onFinished && onFinished(values, action, store) === false) {
                                    return values;
                                }
                                resetAfterSubmit && store.reset(_this.handleReset(action));
                                clearAfterSubmit && store.clear(_this.handleReset(action));
                                clearPersistDataAfterSubmit && store.clearLocalPersistData();
                                if (action.redirect || redirect) {
                                    var finalRedirect = tpl.filter(action.redirect || redirect, store.data);
                                    finalRedirect && env.jumpTo(finalRedirect, action, store.data);
                                }
                                else if (action.reload || reload) {
                                    _this.reloadTarget(Scoped.filterTarget(action.reload || reload, store.data), store.data);
                                }
                                action.close && _this.closeTarget(action.close);
                                return values;
                            })
                                .catch(function (reason) {
                                onFailed && onFailed(reason, store.errors);
                                if (throwErrors) {
                                    throw reason;
                                }
                            })];
                    case 8:
                        if (action.type === 'reset' || action.actionType === 'reset') {
                            store.setCurrentAction(action, this.props.resolveDefinitions);
                            store.reset(onReset);
                        }
                        else if (action.actionType === 'clear') {
                            store.setCurrentAction(action, this.props.resolveDefinitions);
                            store.clear(onReset);
                        }
                        else if (action.actionType === 'validate') {
                            store.setCurrentAction(action, this.props.resolveDefinitions);
                            return [2 /*return*/, this.validate(true, throwErrors, true, true)];
                        }
                        else if (action.actionType === 'dialog') {
                            store.setCurrentAction(action, this.props.resolveDefinitions);
                            return [2 /*return*/, new Promise(function (resolve) {
                                    store.openDialog(data, undefined, function (confirmed, value) {
                                        var _a;
                                        (_a = action.callback) === null || _a === void 0 ? void 0 : _a.call(action, confirmed, value);
                                        resolve({
                                            confirmed: confirmed,
                                            value: value
                                        });
                                    }, delegate || _this.context);
                                })];
                        }
                        else if (action.actionType === 'drawer') {
                            store.setCurrentAction(action, this.props.resolveDefinitions);
                            return [2 /*return*/, new Promise(function (resolve) {
                                    store.openDrawer(data, undefined, function (confirmed, value) {
                                        var _a;
                                        (_a = action.callback) === null || _a === void 0 ? void 0 : _a.call(action, confirmed, value);
                                        resolve({
                                            confirmed: confirmed,
                                            value: value
                                        });
                                    });
                                })];
                        }
                        else if (action.actionType === 'ajax') {
                            store.setCurrentAction(action, this.props.resolveDefinitions);
                            if (!api.isEffectiveApi(action.api)) {
                                return [2 /*return*/, env.alert(__("\u5F53 actionType \u4E3A ajax \u65F6\uFF0C\u8BF7\u8BBE\u7F6E api \u5C5E\u6027"))];
                            }
                            successMsg = (action.messages && action.messages.success) || saveSuccess;
                            failMsg = (action.messages && action.messages.failed) || saveFailed;
                            return [2 /*return*/, store
                                    .saveRemote(action.api, data, {
                                    successMessage: __(typeof successMsg === 'string'
                                        ? tpl.filter(successMsg, store.data)
                                        : undefined),
                                    errorMessage: __(typeof failMsg === 'string'
                                        ? tpl.filter(failMsg, store.data)
                                        : undefined)
                                })
                                    .then(function (response) { return tslib.__awaiter(_this, void 0, void 0, function () {
                                    var redirect;
                                    return tslib.__generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                response &&
                                                    onChange &&
                                                    onChange(store.data, helper.difference(store.data, store.pristine), this.props);
                                                if (!store.validated) return [3 /*break*/, 2];
                                                return [4 /*yield*/, this.validate(true)];
                                            case 1:
                                                _a.sent();
                                                _a.label = 2;
                                            case 2:
                                                if (!(action.feedback && helper.isVisible(action.feedback, store.data))) return [3 /*break*/, 4];
                                                return [4 /*yield*/, this.openFeedback(action.feedback, store.data)];
                                            case 3:
                                                _a.sent();
                                                _a.label = 4;
                                            case 4:
                                                redirect = action.redirect && tpl.filter(action.redirect, store.data);
                                                redirect && env.jumpTo(redirect, action, store.data);
                                                action.reload &&
                                                    this.reloadTarget(Scoped.filterTarget(action.reload, store.data), store.data);
                                                action.close && this.closeTarget(action.close);
                                                return [2 /*return*/];
                                        }
                                    });
                                }); })
                                    .catch(function (e) {
                                    onFailed && onFailed(e, store.errors);
                                    if (throwErrors || action.countDown) {
                                        throw e;
                                    }
                                })];
                        }
                        else if (action.actionType === 'reload') {
                            store.setCurrentAction(action, this.props.resolveDefinitions);
                            if (action.target) {
                                this.reloadTarget(Scoped.filterTarget(action.target, data), data);
                            }
                            else {
                                this.receive(data);
                            }
                            // action.target && this.reloadTarget(filterTarget(action.target, data), data);
                        }
                        else if (onAction) {
                            // 不识别的丢给上层去处理。
                            return [2 /*return*/, onAction(e, action, data, throwErrors, delegate || this.context)];
                        }
                        _f.label = 9;
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    Form.prototype.handleQuery = function (query) {
        if (this.props.initApi) {
            // 如果是分页动作，则看接口里面有没有用，没用则  return false
            // 让组件自己去排序
            if ((query === null || query === void 0 ? void 0 : query.hasOwnProperty('orderBy')) &&
                !api.isApiOutdated(this.props.initApi, this.props.initApi, this.props.store.data, object.createObject(this.props.store.data, query))) {
                return false;
            }
            this.receive(query);
            return;
        }
        if (this.props.onQuery) {
            return this.props.onQuery(query);
        }
        else {
            return false;
        }
    };
    Form.prototype.handleDialogConfirm = function (values, action, ctx, targets) {
        var _a = this.props, store = _a.store, onChange = _a.onChange;
        if ((action.mergeData || store.action.mergeData) &&
            values.length === 1 &&
            values[0] &&
            targets[0].props.type === 'form') {
            this.handleBulkChange(values[0], false);
        }
        store.closeDialog(true, values);
    };
    Form.prototype.handleDialogClose = function (confirmed) {
        if (confirmed === void 0) { confirmed = false; }
        var store = this.props.store;
        store.closeDialog(confirmed);
    };
    Form.prototype.handleDrawerConfirm = function (values, action, ctx, targets) {
        var _a = this.props, store = _a.store, onChange = _a.onChange;
        if ((action.mergeData || store.action.mergeData) &&
            values.length === 1 &&
            values[0] &&
            targets[0].props.type === 'form') {
            store.updateData(values[0]);
            onChange &&
                onChange(store.data, helper.difference(store.data, store.pristine), this.props);
        }
        store.closeDrawer(true, values);
    };
    Form.prototype.handleDrawerClose = function () {
        var store = this.props.store;
        store.closeDrawer(false);
    };
    Form.prototype.submitToTarget = function (target, values) {
        // 会被覆写
    };
    Form.prototype.reloadTarget = function (target, data) {
        // 会被覆写
    };
    Form.prototype.closeTarget = function (target) {
        // 会被覆写
    };
    Form.prototype.openFeedback = function (dialog, ctx) {
        var _this = this;
        return new Promise(function (resolve) {
            var store = _this.props.store;
            store.setCurrentAction({
                type: 'button',
                actionType: 'dialog',
                dialog: dialog
            }, _this.props.resolveDefinitions);
            store.openDialog(ctx, undefined, function (confirmed) {
                resolve(confirmed);
            }, _this.context);
        });
    };
    Form.prototype.buildActions = function () {
        var _a = this.props, actions = _a.actions, submitText = _a.submitText, body = _a.body, __ = _a.translate, loadingConfig = _a.loadingConfig, wrapWithPanel = _a.wrapWithPanel;
        if (wrapWithPanel === false ||
            typeof actions !== 'undefined' ||
            !submitText ||
            (Array.isArray(body) &&
                body.some(function (item) {
                    var _a, _b, _c;
                    return item &&
                        !!~['submit', 'button', 'button-group', 'reset'].indexOf(((_b = (_a = item === null || item === void 0 ? void 0 : item.body) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.type) ||
                            ((_c = item === null || item === void 0 ? void 0 : item.body) === null || _c === void 0 ? void 0 : _c.type) ||
                            item.type);
                }))) {
            return actions;
        }
        return [
            {
                type: 'submit',
                label: __(submitText),
                primary: true,
                loadingConfig: loadingConfig
            }
        ];
    };
    Form.prototype.renderFormItems = function (schema, region, otherProps) {
        if (region === void 0) { region = ''; }
        if (otherProps === void 0) { otherProps = {}; }
        var body = Array.isArray(schema.body)
            ? schema.body
            : schema.body
                ? [schema.body]
                : [];
        // 旧用法，让 wrapper 走走 compat 逻辑兼容旧用法
        // 后续可以删除。
        if (!body.length && schema.controls) {
            console.warn('请用 body 代替 controls');
            body = [
                {
                    size: 'none',
                    type: 'wrapper',
                    wrap: false,
                    controls: schema.controls
                }
            ];
        }
        return this.renderChildren(body, region, otherProps);
    };
    Form.prototype.renderChildren = function (children, region, otherProps) {
        var _this = this;
        if (otherProps === void 0) { otherProps = {}; }
        children = children || [];
        var cx = this.props.classnames;
        if (!Array.isArray(children)) {
            children = [children];
        }
        if (this.props.mode === 'row') {
            var ns = this.props.classPrefix;
            children = flatten__default["default"](children).filter(function (item) {
                if (item.hidden || item.visible === false) {
                    return false;
                }
                var exprProps = filterSchema.getExprProperties(item, _this.props.store.data, undefined, _this.props);
                if (exprProps.hidden || exprProps.visible === false) {
                    return false;
                }
                return true;
            });
            if (!children.length) {
                return null;
            }
            return (_J$X_("div", { className: cx('Form-row') }, children.map(function (control, key) {
                var _a;
                var split = (_a = control.colSize) === null || _a === void 0 ? void 0 : _a.split('/');
                var colSize = (split === null || split === void 0 ? void 0 : split[0]) && (split === null || split === void 0 ? void 0 : split[1])
                    ? (split[0] / split[1]) * 100 + '%'
                    : control.colSize;
                return ~['hidden', 'formula'].indexOf(control.type) ||
                    control.mode === 'inline' ? (_this.renderChild(control, key, otherProps)) : (_J$X_("div", { key: key, className: cx("Form-col", control.columnClassName), style: {
                        flex: colSize && !['1', 'auto'].includes(colSize)
                            ? "0 0 ".concat(colSize)
                            : '1'
                    } }, _this.renderChild(control, '', tslib.__assign(tslib.__assign({}, otherProps), { mode: 'row' }))));
            })));
        }
        if (this.props.mode === 'flex') {
            var rows_1 = [];
            children.forEach(function (child) {
                if (typeof child.row === 'number') {
                    if (rows_1[child.row]) {
                        rows_1[child.row].push(child);
                    }
                    else {
                        rows_1[child.row] = [child];
                    }
                }
                else {
                    // 没有 row 的，就单启一行
                    rows_1.push([child]);
                }
            });
            return (_J$X_(React__default["default"].Fragment, null, rows_1.map(function (children, index) {
                return (_J$X_("div", { className: cx('Form-flex'), role: "flex-row", key: index }, children.map(function (control, key) {
                    var _a;
                    var split = (_a = control.colSize) === null || _a === void 0 ? void 0 : _a.split('/');
                    var colSize = (split === null || split === void 0 ? void 0 : split[0]) && (split === null || split === void 0 ? void 0 : split[1])
                        ? (split[0] / split[1]) * 100 + '%'
                        : control.colSize;
                    return ~['hidden', 'formula'].indexOf(control.type) ? (_this.renderChild(control, key, otherProps)) : (_J$X_("div", { key: control.id || key, className: cx("Form-flex-col", control.columnClassName), style: {
                            flex: colSize && !['1', 'auto'].includes(colSize)
                                ? "0 0 ".concat(colSize)
                                : ''
                        }, role: "flex-col" }, _this.renderChild(control, '', tslib.__assign(tslib.__assign({}, otherProps), { mode: 'flex' }))));
                })));
            })));
        }
        return children.map(function (control, key) {
            return _this.renderChild(control, key, otherProps, region);
        });
    };
    Form.prototype.renderChild = function (control, key, otherProps, region) {
        if (key === void 0) { key = ''; }
        if (otherProps === void 0) { otherProps = {}; }
        if (region === void 0) { region = ''; }
        if (!control) {
            return null;
        }
        else if (typeof control === 'string') {
            control = {
                type: 'tpl',
                tpl: control
            };
        }
        var props = tslib.__assign(tslib.__assign({}, this.props), otherProps);
        var form = this.props.store;
        var render = props.render, mode = props.mode, horizontal = props.horizontal, store = props.store, disabled = props.disabled, controlWidth = props.controlWidth, resolveDefinitions = props.resolveDefinitions, lazyChange = props.lazyChange, formLazyChange = props.formLazyChange, dispatchEvent = props.dispatchEvent, labelAlign = props.labelAlign, labelWidth = props.labelWidth, labelOverflow = props.labelOverflow, isStatic = props.static, canAccessSuperData = props.canAccessSuperData;
        var subProps = {
            formStore: form,
            data: store.data,
            key: "".concat(control.name || '', "-").concat(control.type, "-").concat(key),
            formInited: form.inited,
            formSubmited: form.submited,
            formMode: mode,
            formHorizontal: horizontal,
            formLabelAlign: !labelAlign || !['left', 'right', 'top'].includes(labelAlign)
                ? 'right'
                : labelAlign,
            formLabelWidth: labelWidth,
            formLabelOverflow: labelOverflow,
            controlWidth: controlWidth,
            /**
             * form.loading有为true时才下发disabled属性，否则不显性设置disbaled为false
             * Form中包含容器类组件时，这些组件会将此处的disbaled继续下发至子组件，导致SchemaRenderer中props.disabled覆盖schema.disabled
             */
            disabled: disabled ||
                control.disabled ||
                (form.loading ? true : undefined),
            btnDisabled: disabled || form.loading || form.validating,
            onAction: this.handleAction,
            onQuery: this.handleQuery,
            onChange: this.handleChange,
            onBulkChange: this.handleBulkChange,
            addHook: this.addHook,
            removeHook: this.removeHook,
            renderFormItems: this.renderFormItems,
            dispatchEvent: this.dispatchEvent,
            formPristine: form.pristine,
            onFlushForm: this.flush
            // value: (control as any)?.name
            //   ? getVariable(form.data, (control as any)?.name, canAccessSuperData)
            //   : (control as any)?.value,
            // defaultValue: (control as any)?.value
        };
        var subSchema = tslib.__assign({}, control);
        if (subSchema.$ref) {
            subSchema = tslib.__assign(tslib.__assign({}, resolveDefinitions(subSchema.$ref)), subSchema);
        }
        lazyChange === false && (subSchema.changeImmediately = true);
        return render("".concat(region ? "".concat(region, "/") : '').concat(key), subSchema, subProps);
    };
    Form.prototype.renderBody = function () {
        var _a = this.props, body = _a.body, mode = _a.mode, className = _a.className, cx = _a.classnames, debug = _a.debug, debugConfig = _a.debugConfig, $path = _a.$path, store = _a.store, columnCount = _a.columnCount, render = _a.render, staticClassName = _a.staticClassName, _b = _a.static, isStatic = _b === void 0 ? false : _b, loadingConfig = _a.loadingConfig, themeCss = _a.themeCss, id = _a.id, wrapperCustomStyle = _a.wrapperCustomStyle, env = _a.env, wrapWithPanel = _a.wrapWithPanel, testid = _a.testid;
        var restError = store.restError;
        var WrapperComponent = this.props.wrapperComponent ||
            (/(?:\/|^)form\//.test($path) ? 'div' : 'form');
        var padDom = helper.repeatCount(columnCount && Array.isArray(body)
            ? (columnCount - (body.length % columnCount)) % columnCount
            : 0, function (index) { return (_J$X_("div", { className: cx("Form-item Form-item--".concat(mode, " is-placeholder")), key: index })); });
        return (_J$X_(WrapperComponent, { ref: this.formRef, className: cx("Form", "Form--".concat(mode || 'normal'), columnCount ? "Form--column Form--column-".concat(columnCount) : null, staticClassName && isStatic ? staticClassName : className, isStatic ? 'Form--isStatic' : null, styleHelper.setThemeClassName(tslib.__assign(tslib.__assign({}, this.props), { name: [
                    'formControlClassName',
                    'itemClassName',
                    'staticClassName',
                    'itemLabelClassName'
                ], id: id, themeCss: themeCss })), !wrapWithPanel &&
                styleHelper.setThemeClassName(tslib.__assign(tslib.__assign({}, this.props), { name: 'wrapperCustomStyle', id: id, themeCss: wrapperCustomStyle }))), onSubmit: this.handleFormSubmit, noValidate: true },
            _J$X_("input", { type: "submit", style: { display: 'none' } }),
            debug
                ? render('form-debug-json', tslib.__assign({ type: 'json', value: store.data, ellipsisThreshold: 120, className: cx('Form--debug') }, debugConfig))
                : null,
            render('spinner', { type: 'spinner' }, {
                overlay: true,
                show: store.loading,
                loadingConfig: loadingConfig
            }),
            this.renderFormItems({
                body: body
            }),
            padDom,
            restError && restError.length ? (_J$X_("ul", { className: cx('Form-restError', 'Form-feedback') }, restError.map(function (item, idx) { return (_J$X_("li", { key: idx }, item)); }))) : null,
            render('modal', tslib.__assign(tslib.__assign({}, store.dialogSchema), { type: 'dialog' }), {
                key: 'dialog',
                data: store.dialogData,
                onConfirm: this.handleDialogConfirm,
                onClose: this.handleDialogClose,
                show: store.dialogOpen
            }),
            render('modal', tslib.__assign(tslib.__assign({}, store.drawerSchema), { type: 'drawer' }), {
                key: 'drawer',
                data: store.drawerData,
                onConfirm: this.handleDrawerConfirm,
                onClose: this.handleDrawerClose,
                show: store.drawerOpen
            }),
            _J$X_(CustomStyle["default"], tslib.__assign({}, this.props, { config: {
                    themeCss: themeCss,
                    classNames: [
                        wrapWithPanel && {
                            key: 'panelClassName'
                        },
                        !wrapWithPanel && {
                            key: 'formControlClassName'
                        },
                        {
                            key: 'headerControlClassName',
                            weights: {
                                default: {
                                    parent: ".".concat(cx('Panel'))
                                }
                            }
                        },
                        wrapWithPanel && {
                            key: 'headerTitleControlClassName',
                            weights: {
                                default: {
                                    important: true
                                }
                            }
                        },
                        wrapWithPanel && {
                            key: 'bodyControlClassName'
                        },
                        wrapWithPanel && {
                            key: 'actionsControlClassName',
                            weights: {
                                default: {
                                    parent: ".".concat(cx('Panel--form'))
                                }
                            }
                        },
                        {
                            key: 'itemClassName',
                            weights: {
                                default: {
                                    inner: ".".concat(cx('Form-item'))
                                }
                            }
                        },
                        {
                            key: 'staticClassName',
                            weights: {
                                default: {
                                    inner: ".".concat(cx('Form-static'))
                                }
                            }
                        },
                        {
                            key: 'itemLabelClassName',
                            weights: {
                                default: {
                                    inner: ".".concat(cx('Form-label'))
                                }
                            }
                        }
                    ].filter(function (n) { return n; }),
                    wrapperCustomStyle: wrapperCustomStyle,
                    id: id
                }, env: env }))));
    };
    Form.prototype.render = function () {
        var _a = this.props, $path = _a.$path, $schema = _a.$schema, wrapWithPanel = _a.wrapWithPanel, render = _a.render, title = _a.title, store = _a.store, panelClassName = _a.panelClassName, headerClassName = _a.headerClassName, footerClassName = _a.footerClassName, footerWrapClassName = _a.footerWrapClassName, actionsClassName = _a.actionsClassName, bodyClassName = _a.bodyClassName, cx = _a.classnames, style = _a.style, affixFooter = _a.affixFooter, lazyLoad = _a.lazyLoad, __ = _a.translate, footer = _a.footer, id = _a.id, wrapperCustomStyle = _a.wrapperCustomStyle, themeCss = _a.themeCss;
        var body = this.renderBody();
        if (wrapWithPanel) {
            body = render('body', {
                type: 'panel',
                title: __(title)
            }, {
                className: cx(panelClassName, 'Panel--form', styleHelper.setThemeClassName(tslib.__assign(tslib.__assign({}, this.props), { name: 'wrapperCustomStyle', id: id, themeCss: wrapperCustomStyle })), styleHelper.setThemeClassName(tslib.__assign(tslib.__assign({}, this.props), { name: 'panelClassName', id: id, themeCss: themeCss }))),
                style: style,
                formStore: this.props.store,
                children: body,
                actions: this.buildActions(),
                onAction: this.handleAction,
                onQuery: this.handleQuery,
                disabled: store.loading,
                btnDisabled: store.loading || store.validating,
                headerClassName: headerClassName,
                headerControlClassName: styleHelper.setThemeClassName(tslib.__assign(tslib.__assign({}, this.props), { name: 'headerControlClassName', id: id, themeCss: themeCss })),
                headerTitleControlClassName: styleHelper.setThemeClassName(tslib.__assign(tslib.__assign({}, this.props), { name: 'headerTitleControlClassName', id: id, themeCss: themeCss })),
                footer: footer,
                footerClassName: footerClassName,
                footerWrapClassName: footerWrapClassName,
                actionsClassName: actionsClassName,
                actionsControlClassName: styleHelper.setThemeClassName(tslib.__assign(tslib.__assign({}, this.props), { name: 'actionsControlClassName', id: id, themeCss: themeCss })),
                bodyClassName: bodyClassName,
                bodyControlClassName: styleHelper.setThemeClassName(tslib.__assign(tslib.__assign({}, this.props), { name: 'bodyControlClassName', id: id, themeCss: themeCss })),
                affixFooter: affixFooter
            });
        }
        if (lazyLoad) {
            body = _J$X_(LazyComponent["default"], null, body);
        }
        return body;
    };
    Form.defaultProps = {
        title: 'Form.title',
        submitText: 'Form.submit',
        initFetch: true,
        wrapWithPanel: true,
        mode: 'normal',
        collapsable: false,
        controlWidth: 'full',
        horizontal: {
            left: 2,
            right: 10,
            offset: 2
        },
        columnCount: 0,
        panelClassName: 'Panel--default',
        messages: {
            fetchFailed: 'fetchFailed',
            saveSuccess: 'saveSuccess',
            saveFailed: 'saveFailed'
        },
        wrapperComponent: '',
        finishedField: 'finished',
        initFinishedField: 'finished',
        labelAlign: 'right'
    };
    Form.propsList = [
        'title',
        'header',
        'controls',
        'tabs',
        'fieldSet',
        'submitText',
        'initFetch',
        'wrapWithPanel',
        'mode',
        'columnCount',
        'collapsable',
        'horizontal',
        'panelClassName',
        'messages',
        'wrapperComponent',
        'resetAfterSubmit',
        'clearAfterSubmit',
        'submitOnInit',
        'submitOnChange',
        'onInit',
        'onReset',
        'onSubmit',
        'onChange',
        'onFailed',
        'onFinished',
        'onValidate',
        'onValidChange',
        'onSaved',
        'canAccessSuperData',
        'lazyChange',
        'formLazyChange',
        'lazyLoad',
        'formInited',
        'simpleMode',
        'inputOnly',
        'value',
        'actions',
        'multiple'
    ];
    return Form;
}(React__default["default"].Component));
var FormRendererBase = /** @class */ (function (_super) {
    tslib.__extends(FormRendererBase, _super);
    function FormRendererBase(props, context) {
        var _this = _super.call(this, props) || this;
        var scoped = context;
        scoped.registerComponent(_this);
        return _this;
    }
    FormRendererBase.prototype.componentDidMount = function () {
        _super.prototype.componentDidMount.call(this);
        if (this.props.autoFocus) {
            this.focus();
        }
    };
    FormRendererBase.prototype.componentWillUnmount = function () {
        var scoped = this.context;
        scoped.unRegisterComponent(this);
        _super.prototype.componentWillUnmount.call(this);
    };
    FormRendererBase.prototype.focus = function () {
        var scoped = this.context;
        var inputs = scoped.getComponents();
        var focuableInput = find__default["default"](inputs, function (input) { return input.focus; });
        focuableInput && setTimeout(function () { return focuableInput.focus(); }, 200);
    };
    FormRendererBase.prototype.doAction = function (action, data, throwErrors) {
        if (data === void 0) { data = this.props.store.data; }
        if (throwErrors === void 0) { throwErrors = false; }
        return this.handleAction(undefined, action, data, throwErrors);
    };
    FormRendererBase.prototype.handleAction = function (e, action, ctx, throwErrors, delegate) {
        if (throwErrors === void 0) { throwErrors = false; }
        return tslib.__awaiter(this, void 0, void 0, function () {
            var scoped_1;
            return tslib.__generator(this, function (_a) {
                // 禁用了不要做任何动作。@先注释掉，会引起其他问题
                // if (this.props.disabled) {
                //   return;
                // }
                if (action.target && action.actionType !== 'reload') {
                    scoped_1 = this.context;
                    return [2 /*return*/, Promise.all(action.target.split(',').map(function (name) {
                            var target = scoped_1.getComponentByName(name);
                            return (target &&
                                target.doAction &&
                                target.doAction(tslib.__assign(tslib.__assign({}, action), { target: undefined }), ctx, throwErrors));
                        }))];
                }
                else if (action.actionType === 'clearError') {
                    return [2 /*return*/, _super.prototype.clearErrors.call(this)];
                }
                else {
                    return [2 /*return*/, _super.prototype.handleAction.call(this, e, action, ctx, throwErrors, delegate)];
                }
                return [2 /*return*/];
            });
        });
    };
    FormRendererBase.prototype.handleDialogConfirm = function (values, action, ctx, targets) {
        _super.prototype.handleDialogConfirm.call(this, values, action, ctx, targets);
        var store = this.props.store;
        var scoped = this.context;
        if (action.reload) {
            scoped.reload(action.reload, ctx);
        }
        else if (store.action && store.action.reload) {
            scoped.reload(store.action.reload, ctx);
        }
    };
    FormRendererBase.prototype.submitToTarget = function (target, values) {
        var scoped = this.context;
        scoped.send(target, values);
    };
    FormRendererBase.prototype.reloadTarget = function (target, data) {
        var scoped = this.context;
        scoped.reload(target, data);
    };
    FormRendererBase.prototype.closeTarget = function (target) {
        var scoped = this.context;
        scoped.close(target);
    };
    FormRendererBase.prototype.reload = function (target, query, ctx, silent, replace) {
        return tslib.__awaiter(this, void 0, void 0, function () {
            var scoped, subPath, idx, subQuery, idx2, component, components;
            return tslib.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (query) {
                            return [2 /*return*/, this.receive(query, undefined, replace)];
                        }
                        scoped = this.context;
                        subPath = '';
                        subQuery = null;
                        if (target && ~(idx = target.indexOf('.'))) {
                            subPath = target.substring(idx + 1);
                            target = target.substring(0, idx);
                        }
                        idx2 = target ? target.indexOf('?') : -1;
                        if (~idx2) {
                            subQuery = dataMapping.dataMapping(helper.qsparse(target.substring(idx2 + 1)), ctx);
                            target = target.substring(0, idx2);
                        }
                        if (!(target &&
                            (component = scoped.getComponentByName(target)) &&
                            component.reload)) return [3 /*break*/, 1];
                        component.reload(subPath, subQuery, ctx);
                        return [3 /*break*/, 4];
                    case 1:
                        if (!(target === '*')) return [3 /*break*/, 3];
                        return [4 /*yield*/, _super.prototype.reload.call(this, target, query, ctx, silent)];
                    case 2:
                        _a.sent();
                        components = scoped.getComponents();
                        components.forEach(function (component) {
                            return component.reload && component.reload('', subQuery, ctx);
                        });
                        return [3 /*break*/, 4];
                    case 3: return [2 /*return*/, _super.prototype.reload.call(this, target, query, ctx, silent)];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    FormRendererBase.prototype.receive = function (values, name, replace) {
        return tslib.__awaiter(this, void 0, void 0, function () {
            var scoped, idx, subPath, component;
            return tslib.__generator(this, function (_a) {
                if (name) {
                    scoped = this.context;
                    idx = name.indexOf('.');
                    subPath = '';
                    if (~idx) {
                        subPath = name.substring(1 + idx);
                        name = name.substring(0, idx);
                    }
                    component = scoped.getComponentByName(name);
                    component && component.receive && component.receive(values, subPath);
                    return [2 /*return*/];
                }
                return [2 /*return*/, _super.prototype.receive.call(this, values, undefined, replace)];
            });
        });
    };
    FormRendererBase.prototype.setData = function (values, replace) {
        var _a = this.props, onChange = _a.onChange, store = _a.store;
        _super.prototype.setValues.call(this, values, replace);
        // 触发表单change
        onChange &&
            onChange(store.data, helper.difference(store.data, store.pristine), this.props);
    };
    FormRendererBase.prototype.getData = function () {
        return this.getValues();
    };
    FormRendererBase.contextType = Scoped.ScopedContext;
    return FormRendererBase;
}(Form));
var FormRenderer = /** @class */ (function (_super) {
    tslib.__extends(FormRenderer, _super);
    // 装饰器装饰后的类无法继承父类上的方法，所以多包了一层FormRendererBase用来继承
    function FormRenderer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FormRenderer = tslib.__decorate([
        factory.Renderer({
            type: 'form',
            storeType: form.FormStore.name,
            isolateScope: true,
            storeExtendsData: function (props) { return props.inheritData; },
            shouldSyncSuperStore: function (store, props, prevProps) {
                var _a, _b;
                // 如果是 QuickEdit，让 store 同步 __super 数据。
                if (props.quickEditFormRef &&
                    props.onQuickChange &&
                    (helper.isObjectShallowModified(prevProps.data, props.data) ||
                        helper.isObjectShallowModified(prevProps.data.__super, props.data.__super) ||
                        helper.isObjectShallowModified((_a = prevProps.data.__super) === null || _a === void 0 ? void 0 : _a.__super, (_b = props.data.__super) === null || _b === void 0 ? void 0 : _b.__super))) {
                    return true;
                }
                return undefined;
            }
        })
        // 装饰器装饰后的类无法继承父类上的方法，所以多包了一层FormRendererBase用来继承
    ], FormRenderer);
    return FormRenderer;
}(FormRendererBase));

exports.FormRenderer = FormRenderer;
exports.FormRendererBase = FormRendererBase;
exports["default"] = Form;
