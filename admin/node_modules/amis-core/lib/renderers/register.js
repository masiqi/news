/**
 * amis-core v6.13.0
 * Copyright 2018-2025 fex
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var factory = require('../factory.js');
var Options = require('./Options.js');
var Item = require('./Item.js');

/**
 * 提供两种特殊的注册渲染器的方式
 * 1、自动加载预先注册的自定义渲染器：自动加载并注册 window.AmisCustomRenderers 中的渲染器
 * 2、通过 postMessage 告知 amis 注册一个新的渲染器：间接注册渲染器，无需直接依赖 amis。
 */
// 自动加载预先注册的自定义渲染器
function autoPreRegisterAmisCustomRenderers() {
    if (window.AmisCustomRenderers) {
        Object.keys(window.AmisCustomRenderers).forEach(function (rendererType) {
            if (factory.renderersMap[rendererType]) {
                console.warn("[amis-core]\uFF1A\u9884\u6CE8\u518C\u6E32\u67D3\u5668\u5931\u8D25\uFF0C\u5F53\u524D\u5DF2\u5B58\u5728\u91CD\u540D\u6E32\u67D3\u5668\uFF08".concat(rendererType, "\uFF09\u3002"));
            }
            else {
                var curAmisRenderer = window.AmisCustomRenderers[rendererType];
                if (curAmisRenderer) {
                    registerAmisRendererByUsage(rendererType, curAmisRenderer);
                }
            }
        });
    }
}
// 自动加载并注册 window.AmisCustomRenderers 中的渲染器
autoPreRegisterAmisCustomRenderers();
// postMessage 渲染器动态注册机制
window.addEventListener('message', function (event) {
    var _a, _b, _c;
    if (!event.data) {
        return;
    }
    if (((_a = event.data) === null || _a === void 0 ? void 0 : _a.type) === 'amis-renderer-register-event' &&
        ((_b = event.data) === null || _b === void 0 ? void 0 : _b.amisRenderer) &&
        event.data.amisRenderer.type) {
        var curAmisRenderer = (_c = event.data) === null || _c === void 0 ? void 0 : _c.amisRenderer;
        var curUsage = (curAmisRenderer === null || curAmisRenderer === void 0 ? void 0 : curAmisRenderer.usage) || 'renderer';
        if (factory.renderersMap[curAmisRenderer.type]) {
            console.warn("[amis-core]\uFF1A\u52A8\u6001\u6CE8\u518C\u6E32\u67D3\u5668\u5931\u8D25\uFF0C\u5F53\u524D\u5DF2\u5B58\u5728\u91CD\u540D\u6E32\u67D3\u5668\uFF08".concat(curAmisRenderer.type, "\uFF09\u3002"));
        }
        else {
            console.info('[amis-core]响应动态注册渲染器事件：', curAmisRenderer.type);
            registerAmisRendererByUsage(curUsage, curAmisRenderer);
        }
    }
}, false);
// 根据类型（usage）进行注册 amis渲染器
function registerAmisRendererByUsage(curUsage, curAmisRenderer) {
    // 当前支持注册的渲染器类型
    var registerMap = {
        renderer: factory.Renderer,
        formitem: Item.FormItem,
        options: Options.OptionsControl,
    };
    var curAmisRendererComponent = curAmisRenderer.component;
    if (!curAmisRendererComponent &&
        window.AmisCustomRenderers &&
        window.AmisCustomRenderers[curAmisRenderer.type] &&
        window.AmisCustomRenderers[curAmisRenderer.type].component) {
        curAmisRendererComponent = window.AmisCustomRenderers[curAmisRenderer.type].component;
    }
    if (curAmisRendererComponent &&
        ['renderer', 'formitem', 'options'].includes(curUsage) &&
        registerMap[curUsage]) {
        registerMap[curUsage](tslib.__assign(tslib.__assign({}, (curAmisRenderer.config || {})), { type: curAmisRenderer.type, weight: curAmisRenderer.weight || 0, autoVar: curAmisRenderer.autoVar || false }))(curAmisRendererComponent);
    }
}

exports.autoPreRegisterAmisCustomRenderers = autoPreRegisterAmisCustomRenderers;
