/**
 * amis-core v6.13.0
 * Copyright 2018-2025 fex
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var React = require('react');
var debounce = require('lodash/debounce');
var isEqual = require('lodash/isEqual');
var combo = require('../store/combo.js');
var helper = require('../utils/helper.js');
var validations = require('../utils/validations.js');
var formula = require('../utils/formula.js');
var Scoped = require('../Scoped.js');
var formItem = require('../store/formItem.js');
var mobxStateTree = require('mobx-state-tree');
var mobxReact = require('mobx-react');
var hoistNonReactStatic = require('hoist-non-react-statics');
var WithRootStore = require('../WithRootStore.js');
var table = require('../store/table.js');
var pick = require('lodash/pick');
var mobx = require('mobx');
require('../utils/index.js');
var tokenize = require('../utils/tokenize.js');
var object = require('../utils/object.js');
var getVariable = require('../utils/getVariable.js');
var api = require('../utils/api.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var debounce__default = /*#__PURE__*/_interopDefaultLegacy(debounce);
var isEqual__default = /*#__PURE__*/_interopDefaultLegacy(isEqual);
var hoistNonReactStatic__default = /*#__PURE__*/_interopDefaultLegacy(hoistNonReactStatic);
var pick__default = /*#__PURE__*/_interopDefaultLegacy(pick);

var __react_jsx__ = require('react');
var _J$X_ = (__react_jsx__["default"] || __react_jsx__).createElement;
var _J$F_ = (__react_jsx__["default"] || __react_jsx__).Fragment;


;function wrapControl(config, ComposedComponent) {
    var _a;
    var result = hoistNonReactStatic__default["default"](WithRootStore.withRootStore(mobxReact.observer((_a = /** @class */ (function (_super) {
            tslib.__extends(class_1, _super);
            function class_1(props) {
                var _this = this;
                var _a, _b;
                _this = _super.call(this, props) || this;
                _this.value = undefined;
                _this.lazyEmitChange = debounce__default["default"](_this.emitChange.bind(_this), 250, {
                    trailing: true,
                    leading: false
                });
                var _c = _this.props, form = _c.formStore, formItem$1 = _c.formItem, rootStore = _c.rootStore, store = _c.store, onChange = _c.onChange, data = _c.data, inputGroupControl = _c.inputGroupControl, colIndex = _c.colIndex, rowIndex = _c.rowIndex, _d = _c.$schema, id = _d.id, type = _d.type, required = _d.required, validations$1 = _d.validations, validationErrors = _d.validationErrors, unique = _d.unique, value = _d.value, extraName = _d.extraName, multiple = _d.multiple, delimiter = _d.delimiter, valueField = _d.valueField, labelField = _d.labelField, joinValues = _d.joinValues, extractValue = _d.extractValue, selectFirst = _d.selectFirst, autoFill = _d.autoFill, clearValueOnHidden = _d.clearValueOnHidden, validateApi = _d.validateApi, minLength = _d.minLength, maxLength = _d.maxLength, validateOnChange = _d.validateOnChange, label = _d.label, pagination = _d.pagination;
                _this.getValue = _this.getValue.bind(_this);
                _this.setValue = _this.setValue.bind(_this);
                _this.handleChange = _this.handleChange.bind(_this);
                _this.setPrinstineValue = _this.setPrinstineValue.bind(_this);
                _this.controlRef = _this.controlRef.bind(_this);
                _this.handleBlur = _this.handleBlur.bind(_this);
                _this.validate = _this.validate.bind(_this);
                _this.flushChange = _this.flushChange.bind(_this);
                _this.renderChild = _this.renderChild.bind(_this);
                var name = _this.props.$schema.name ||
                    ((_a = ComposedComponent.defaultProps) === null || _a === void 0 ? void 0 : _a.name);
                // 如果 name 是表达式
                // 扩充 each 用法
                if (formula.isExpression(name)) {
                    name = tokenize.tokenize(name, data);
                }
                if (!name) {
                    return _this;
                }
                var valueIsExp = formula.isExpression(value);
                var propValue = _this.props.value;
                var model = rootStore.addStore({
                    id: helper.guid(),
                    path: _this.props.$path,
                    storeType: config.formItemStoreType || formItem.FormItemStore.name,
                    parentId: store === null || store === void 0 ? void 0 : store.id,
                    name: name,
                    colIndex: colIndex !== undefined ? colIndex : undefined,
                    rowIndex: rowIndex !== undefined ? rowIndex : undefined
                });
                _this.model = model;
                // 如果组件有默认验证器类型，则合并
                var rules = validations$1 && model && config.validations
                    ? tslib.__assign(tslib.__assign({}, validations$1), validations.str2rules(config.validations)) : validations$1;
                // @issue 打算干掉这个
                formItem$1 === null || formItem$1 === void 0 ? void 0 : formItem$1.addSubFormItem(model);
                model.config(tslib.__assign(tslib.__assign({}, pick__default["default"](tslib.__assign(tslib.__assign({}, ComposedComponent.defaultProps), _this.props.$schema), ['multiple'])), { id: id, type: type, required: props.required || required, unique: unique, value: value, isValueSchemaExp: valueIsExp && value.replace(/\s/g, '') !== "${".concat(name, "}"), rules: rules, messages: validationErrors, delimiter: delimiter, valueField: valueField, labelField: labelField, joinValues: joinValues, extractValue: extractValue, selectFirst: selectFirst, autoFill: autoFill, clearValueOnHidden: clearValueOnHidden, validateApi: validateApi, minLength: minLength, maxLength: maxLength, validateOnChange: validateOnChange, label: label, inputGroupControl: inputGroupControl, extraName: extraName, pagination: pagination }));
                // issue 这个逻辑应该在 combo 里面自己实现。
                if (_this.model.unique &&
                    ((_b = form === null || form === void 0 ? void 0 : form.parentStore) === null || _b === void 0 ? void 0 : _b.storeType) === combo.ComboStore.name) {
                    var combo$1 = form.parentStore;
                    combo$1.bindUniuqueItem(model);
                }
                if (propValue !== undefined && propValue !== null) {
                    // 同步 value: 优先使用 props 中的 value
                    model.changeTmpValue(propValue, 'controlled');
                    model.setIsControlled(true);
                }
                else {
                    _this.setInitialValue(value);
                }
                if (onChange &&
                    value !== undefined &&
                    model.tmpValue !== undefined &&
                    // 要么是默认值起作用了
                    // 要么是表达式起作用了
                    // 只有这两种情况才会触发 onChange
                    // 比如以下 case 就不应该触发
                    // 关联到上下文数据了，同时设置了默认值，因为是上下文数据优先，这个时候就不应该触发 onChange，因为没变化
                    (value === model.tmpValue || valueIsExp)) {
                    // 组件默认值支持表达式需要: 避免初始化时上下文中丢失组件默认值
                    if (model.extraName) {
                        var values = model.splitExtraValue(model.tmpValue);
                        onChange(values[0], model.name, false, true);
                        onChange(values[1], model.extraName, false, true);
                    }
                    else {
                        onChange(model.tmpValue, model.name, false, true);
                    }
                }
                else if (onChange &&
                    typeof propValue === 'undefined' &&
                    typeof (store === null || store === void 0 ? void 0 : store.getValueByName(model.name, false)) === 'undefined' &&
                    // todo 后续再优化这个判断，
                    // 目前 input-table 中默认值会给冲掉，所以加上这个判断
                    // 对应 issue 为 https://github.com/baidu/amis/issues/2674
                    (store === null || store === void 0 ? void 0 : store.storeType) !== table.TableStore.name) {
                    // 如果没有初始值，通过 onChange 设置过去
                    if (model.extraName) {
                        var values = model.splitExtraValue(model.tmpValue);
                        onChange(values[0], model.name, false, true);
                        onChange(values[1], model.extraName, false, true);
                    }
                    else {
                        onChange(model.tmpValue, model.name, false, true);
                    }
                }
                _this.reaction = mobx.reaction(function () { return model.validatedAt; }, function (validatedAt) {
                    var _a, _b, _c, _d;
                    (_b = (_a = _this.props).dispatchEvent) === null || _b === void 0 ? void 0 : _b.call(_a, model.valid
                        ? 'formItemValidateSucc'
                        : 'formItemValidateError', object.injectObjectChain((_d = (_c = _this.props.formStore) === null || _c === void 0 ? void 0 : _c.data) !== null && _d !== void 0 ? _d : _this.props.data, {
                        __errors: model.errors,
                        __formName: model.name,
                        __formValue: model.tmpValue,
                        __formControl: _this.control
                    }));
                });
                return _this;
            }
            class_1.prototype.componentDidMount = function () {
                var _this = this;
                var _a = this.props, store = _a.store, form = _a.formStore, validate = _a.$schema.validate, addHook = _a.addHook;
                // 提交前先把之前的 lazyEmit 执行一下。
                this.hook3 = function () { return _this.lazyEmitChange.flush(); };
                addHook === null || addHook === void 0 ? void 0 : addHook(this.hook3, 'flush');
                var formItem = this.model;
                if (formItem && validate) {
                    var finalValidate_1 = helper.promisify(validate.bind(this.control));
                    this.hook2 = function () {
                        formItem.clearError('control:valdiate');
                        return finalValidate_1(_this.props.data, _this.getValue(), formItem.name).then(function (ret) {
                            if ((typeof ret === 'string' || Array.isArray(ret)) && ret) {
                                formItem.addError(ret, 'control:valdiate');
                            }
                        });
                    };
                    addHook === null || addHook === void 0 ? void 0 : addHook(this.hook2);
                }
                formItem === null || formItem === void 0 ? void 0 : formItem.init();
            };
            class_1.prototype.componentDidUpdate = function (prevProps) {
                var _this = this;
                var _a, _b, _c;
                var props = this.props;
                var model = this.model;
                if (!model) {
                    return;
                }
                helper.changedEffect([
                    'name',
                    'id',
                    'validations',
                    'validationErrors',
                    'value',
                    'defaultValue',
                    'required',
                    'unique',
                    'multiple',
                    'delimiter',
                    'valueField',
                    'labelField',
                    'joinValues',
                    'extractValue',
                    'selectFirst',
                    'autoFill',
                    'clearValueOnHidden',
                    'validateApi',
                    'minLength',
                    'maxLength',
                    'label',
                    'extraName',
                    'pagination'
                ], prevProps.$schema, props.$schema, function (changes) {
                    model.config(tslib.__assign(tslib.__assign({}, changes), { 
                        // todo 优化后面两个
                        isValueSchemaExp: formula.isExpression(props.$schema.value) &&
                            props.$schema.value.replace(/\s/g, '') !==
                                "${".concat(props.$schema.name, "}"), inputGroupControl: props === null || props === void 0 ? void 0 : props.inputGroupControl }));
                    if (changes.hasOwnProperty('name')) {
                        _this.setInitialValue(_this.props.$schema.value);
                    }
                });
                if (props.required !== prevProps.required) {
                    model.config({
                        required: props.required
                    });
                }
                // 此处需要同时考虑 defaultValue 和 value
                if (typeof props.value !== 'undefined') {
                    // 渲染器中的 value 优先
                    if (!isEqual__default["default"](props.value, prevProps.value) &&
                        !isEqual__default["default"](props.value, model.tmpValue)) {
                        // 外部直接传入的 value 无需执行运算器
                        model.changeTmpValue(props.value, 'controlled');
                    }
                }
                else if (typeof props.defaultValue !== 'undefined' &&
                    formula.isExpression(props.defaultValue) &&
                    props.defaultValue.replace(/\s/g, '') !==
                        "${".concat(props.name, "}") &&
                    (!isEqual__default["default"](props.defaultValue, prevProps.defaultValue) ||
                        (props.data !== prevProps.data &&
                            formula.isNeedFormula(props.defaultValue, props.data, prevProps.data)))) {
                    var curResult = formula.FormulaExec['formula'](props.defaultValue, props.data);
                    var prevResult = formula.FormulaExec['formula'](prevProps.defaultValue, prevProps.data);
                    if (!isEqual__default["default"](curResult, prevResult) &&
                        !isEqual__default["default"](curResult, model.tmpValue)) {
                        // 识别上下文变动、自身数值变动、公式运算结果变动
                        model.changeTmpValue(curResult, 'formulaChanged');
                        if (model.extraName) {
                            var values = model.splitExtraValue(curResult);
                            (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, values[0], model.name, false);
                            (_b = props.onChange) === null || _b === void 0 ? void 0 : _b.call(props, values[1], model.extraName, false);
                        }
                        else {
                            (_c = props.onChange) === null || _c === void 0 ? void 0 : _c.call(props, curResult, model.name, false);
                        }
                    }
                }
                else {
                    // value 非公式表达式时，name 值优先，若 defaultValue 主动变动时，则使用 defaultValue
                    if (
                    // 然后才是查看关联的 name 属性值是否变化
                    props.data !== prevProps.data &&
                        (!model.emitedValue ||
                            isEqual__default["default"](model.emitedValue, model.tmpValue))) {
                        model.changeEmitedValue(undefined);
                        var valueByName = model.extraName
                            ? [
                                getVariable.getVariable(props.data, model.name, false),
                                getVariable.getVariable(props.data, model.extraName, false)
                            ]
                            : getVariable.getVariable(props.data, model.name, false);
                        if (!isEqual__default["default"](valueByName, model.extraName
                            ? model.splitExtraValue(model.tmpValue)
                            : model.tmpValue) &&
                            (!isEqual__default["default"](model.extraName ? valueByName[0] : valueByName, getVariable.getVariable(prevProps.data, model.name, false)) ||
                                // extraName
                                (model.extraName &&
                                    !isEqual__default["default"](valueByName[1], getVariable.getVariable(prevProps.data, model.extraName, false))))) {
                            model.changeTmpValue(valueByName, props.formInited && !prevProps.formInited
                                ? 'formInited'
                                : 'dataChanged');
                            this.checkValidate();
                        }
                    }
                }
            };
            class_1.prototype.componentWillUnmount = function () {
                var _a, _b, _c, _d, _e, _f, _g;
                this.hook && ((_b = (_a = this.props).removeHook) === null || _b === void 0 ? void 0 : _b.call(_a, this.hook));
                this.hook2 && ((_d = (_c = this.props).removeHook) === null || _d === void 0 ? void 0 : _d.call(_c, this.hook2));
                this.hook3 && ((_f = (_e = this.props).removeHook) === null || _f === void 0 ? void 0 : _f.call(_e, this.hook3, 'flush'));
                // this.lazyEmitChange.flush();
                this.lazyEmitChange.cancel();
                (_g = this.reaction) === null || _g === void 0 ? void 0 : _g.call(this);
                this.disposeModel();
            };
            class_1.prototype.setInitialValue = function (value) {
                var model = this.model;
                var _a = this.props, form = _a.formStore, data = _a.data, canAccessSuperData = _a.canAccessSuperData, name = _a.name;
                var isExp = formula.isExpression(value);
                if (isExp && value.replace(/\s/g, '') === "${".concat(name, "}")) {
                    console.warn('value 不要使用表达式关联自己');
                    isExp = false;
                    value = undefined;
                }
                var initialValue = model.extraName
                    ? [
                        getVariable.getVariable(data, model.name, canAccessSuperData !== null && canAccessSuperData !== void 0 ? canAccessSuperData : form === null || form === void 0 ? void 0 : form.canAccessSuperData),
                        getVariable.getVariable(data, model.extraName, canAccessSuperData !== null && canAccessSuperData !== void 0 ? canAccessSuperData : form === null || form === void 0 ? void 0 : form.canAccessSuperData)
                    ]
                    : getVariable.getVariable(data, model.name, canAccessSuperData !== null && canAccessSuperData !== void 0 ? canAccessSuperData : form === null || form === void 0 ? void 0 : form.canAccessSuperData);
                if (model.extraName &&
                    initialValue.every(function (item) { return item === undefined; })) {
                    initialValue = undefined;
                }
                if (typeof initialValue === 'undefined') {
                    value = isExp
                        ? formula.FormulaExec['formula'](value, data)
                        : formula.replaceExpression(value);
                }
                model.changeTmpValue(initialValue !== null && initialValue !== void 0 ? initialValue : value, // 对组件默认值进行运算
                typeof initialValue !== 'undefined'
                    ? 'initialValue'
                    : isExp
                        ? 'formulaChanged'
                        : 'defaultValue');
            };
            class_1.prototype.disposeModel = function () {
                var _a;
                var _b = this.props, form = _b.formStore, formItem = _b.formItem, rootStore = _b.rootStore;
                if (this.model &&
                    this.model.unique &&
                    (form === null || form === void 0 ? void 0 : form.parentStore) &&
                    (form === null || form === void 0 ? void 0 : form.parentStore.storeType) === combo.ComboStore.name) {
                    var combo$1 = form.parentStore;
                    combo$1.unBindUniuqueItem(this.model);
                }
                if (this.model) {
                    formItem &&
                        mobxStateTree.isAlive(formItem) &&
                        formItem.removeSubFormItem(this.model);
                    this.model.clearValueOnHidden &&
                        ((_a = this.model.form) === null || _a === void 0 ? void 0 : _a.deleteValueByName(this.model.name, {
                            type: 'hide'
                        }));
                    mobxStateTree.isAlive(rootStore) && rootStore.removeStore(this.model);
                }
                delete this.model;
            };
            class_1.prototype.controlRef = function (control) {
                var _this = this;
                var _a = this.props, addHook = _a.addHook, removeHook = _a.removeHook, form = _a.formStore, formItemRef = _a.formItemRef;
                // 因为 control 有可能被 n 层 hoc 包裹。
                while (control && control.getWrappedInstance) {
                    control = control.getWrappedInstance();
                }
                if (control && !control.props) {
                    Object.defineProperty(control, 'props', {
                        get: function () { return _this.props; }
                    });
                }
                if (control && control.validate && this.model) {
                    var formItem_1 = this.model;
                    var validate_1 = helper.promisify(control.validate.bind(control));
                    this.hook = function () {
                        formItem_1.clearError('component:valdiate');
                        return validate_1(_this.props.data, _this.getValue(), formItem_1.name).then(function (ret) {
                            if ((typeof ret === 'string' || Array.isArray(ret)) && ret) {
                                formItem_1.setError(ret, 'component:valdiate');
                            }
                        });
                    };
                    addHook === null || addHook === void 0 ? void 0 : addHook(this.hook);
                }
                else if (!control && this.hook) {
                    removeHook === null || removeHook === void 0 ? void 0 : removeHook(this.hook);
                    this.hook = undefined;
                }
                formItemRef === null || formItemRef === void 0 ? void 0 : formItemRef(control);
                // 注册到 Scoped 上
                var originRef = this.control;
                this.control = control;
                var scoped = this.context;
                if (control) {
                    scoped.registerComponent(this.control);
                }
                else if (originRef) {
                    scoped.unRegisterComponent(originRef);
                }
            };
            class_1.prototype.checkValidate = function () {
                var _a;
                if (!this.model)
                    return; // 如果 model 为 undefined 则直接返回
                var validated = this.model.validated;
                var _b = this.props, formSubmited = _b.formSubmited, validateOnChange = _b.validateOnChange;
                if (
                // 如果配置了 minLength 或者 maxLength 就切成及时验证
                // this.model.rules.minLength ||
                // this.model.rules.maxLength ||
                validateOnChange === true ||
                    (validateOnChange !== false && (formSubmited || validated))) {
                    this.validate();
                }
                else if (validateOnChange === false) {
                    (_a = this.model) === null || _a === void 0 ? void 0 : _a.reset();
                }
            };
            class_1.prototype.validate = function () {
                return tslib.__awaiter(this, void 0, void 0, function () {
                    var _a, form, data, dispatchEvent, result, combo$1, group, validPromises, valid;
                    return tslib.__generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                if (!this.model)
                                    return [2 /*return*/];
                                _a = this.props, form = _a.formStore, data = _a.data, dispatchEvent = _a.dispatchEvent;
                                if (!(this.model.unique &&
                                    (form === null || form === void 0 ? void 0 : form.parentStore) &&
                                    form.parentStore.storeType === combo.ComboStore.name)) return [3 /*break*/, 2];
                                combo$1 = form.parentStore;
                                group = combo$1.uniques.get(this.model.name);
                                validPromises = group.items.map(function (item) {
                                    return item.validate(data);
                                });
                                return [4 /*yield*/, Promise.all(validPromises)];
                            case 1:
                                result = _b.sent();
                                return [3 /*break*/, 4];
                            case 2: return [4 /*yield*/, this.model.validate(data)];
                            case 3:
                                result = [_b.sent()];
                                _b.label = 4;
                            case 4:
                                valid = !result.some(function (item) { return item === false; });
                                return [2 /*return*/, valid];
                        }
                    });
                });
            };
            class_1.prototype.flushChange = function () {
                this.lazyEmitChange.flush();
            };
            class_1.prototype.handleChange = function (value, submitOnChange, changeImmediately) {
                if (submitOnChange === void 0) { submitOnChange = this.props.$schema.submitOnChange; }
                if (changeImmediately === void 0) { changeImmediately = false; }
                var _a = this.props, form = _a.formStore, onChange = _a.onChange, _b = _a.$schema, type = _b.type, pipeOut = _b.pipeOut, conrolChangeImmediately = _b.changeImmediately, formInited = _a.formInited, data = _a.data;
                if (!this.model ||
                    // todo 以后想办法不要強耦合类型。
                    ~[
                        'service',
                        'group',
                        'hbox',
                        'panel',
                        'grid',
                        'input-group'
                    ].indexOf(type)) {
                    onChange && onChange.apply(null, arguments);
                    return;
                }
                if (pipeOut) {
                    var oldValue = this.model.value;
                    value = api.callStrFunction.call(this, pipeOut, ['value', 'oldValue', 'data'], value, oldValue, data);
                }
                this.model.changeTmpValue(value, type === 'formula' ? 'formulaChanged' : 'input');
                if (changeImmediately || conrolChangeImmediately || !formInited) {
                    this.emitChange(submitOnChange);
                }
                else {
                    // this.props.onTmpValueChange?.(value, this.model.name);
                    this.lazyEmitChange(submitOnChange);
                }
            };
            class_1.prototype.emitChange = function (submitOnChange) {
                if (submitOnChange === void 0) { submitOnChange = this.props.$schema.submitOnChange; }
                var _a = this.props, form = _a.formStore, onChange = _a.onChange, _b = _a.$schema, id = _b.id, label = _b.label, type = _b.type, onFormItemChange = _b.onChange, maxLength = _b.maxLength, minLength = _b.minLength, data = _a.data, env = _a.env, validateOnChange = _a.validateOnChange, formSubmited = _a.formSubmited;
                if (!this.model) {
                    return;
                }
                var model = this.model;
                var value = this.model.tmpValue;
                var oldValue = undefined;
                // 受控的因为没有记录上一次 props 下发的 value，所以不做比较
                if (!model.isControlled) {
                    oldValue = model.extraName
                        ? [
                            getVariable.getVariable(data, model.name, false),
                            getVariable.getVariable(data, model.extraName, false)
                        ]
                        : getVariable.getVariable(data, model.name, false);
                    if (model.extraName ? isEqual__default["default"](oldValue, value) : oldValue === value) {
                        return;
                    }
                }
                if (type !== 'input-password') {
                    env === null || env === void 0 ? void 0 : env.tracker({
                        eventType: 'formItemChange',
                        eventData: {
                            id: id,
                            name: model.name,
                            label: label,
                            type: type,
                            value: value
                        }
                    }, this.props);
                }
                this.model.changeEmitedValue(value);
                if ((onFormItemChange === null || onFormItemChange === void 0 ? void 0 : onFormItemChange(value, oldValue, this.model, form)) === false) {
                    return;
                }
                // onFormItemChange 可能会触发组件销毁，再次读取 this.model 为 undefined
                if (!this.model) {
                    return;
                }
                var changeReason = {
                    type: 'input'
                };
                if (model.changeMotivation === 'formulaChanged') {
                    changeReason.type = 'formula';
                }
                else if (model.changeMotivation === 'initialValue' ||
                    model.changeMotivation === 'formInited' ||
                    model.changeMotivation === 'defaultValue') {
                    changeReason.type = 'init';
                }
                if (model.extraName) {
                    var values = model.splitExtraValue(value);
                    onChange === null || onChange === void 0 ? void 0 : onChange(values[0], model.name, undefined, undefined, changeReason);
                    onChange === null || onChange === void 0 ? void 0 : onChange(values[1], model.extraName, submitOnChange === true, undefined, changeReason);
                }
                else {
                    onChange === null || onChange === void 0 ? void 0 : onChange(value, model.name, submitOnChange === true, undefined, changeReason);
                }
                this.checkValidate();
            };
            class_1.prototype.handleBlur = function (e) {
                var _a = this.props, onBlur = _a.onBlur, validateOnBlur = _a.$schema.validateOnBlur;
                if (validateOnBlur && this.model) {
                    this.validate();
                }
                onBlur && onBlur(e);
            };
            class_1.prototype.setPrinstineValue = function (value) {
                if (!this.model) {
                    return;
                }
                var model = this.model;
                var _a = this.props, form = _a.formStore, pipeOut = _a.$schema.pipeOut, onChange = _a.onChange, oldValue = _a.value, data = _a.data;
                if (pipeOut) {
                    value = api.callStrFunction.call(this, pipeOut, ['value', 'oldValue', 'data'], value, oldValue, data);
                }
                if (model.extraName) {
                    var values = model.splitExtraValue(value);
                    onChange === null || onChange === void 0 ? void 0 : onChange(values[0], model.name, false, true);
                    onChange === null || onChange === void 0 ? void 0 : onChange(values[1], model.extraName, false, true);
                }
                else {
                    onChange === null || onChange === void 0 ? void 0 : onChange(value, model.name, false, true);
                }
            };
            class_1.prototype.getValue = function () {
                var _a = this.props, formStore = _a.formStore, data = _a.data, control = _a.$schema;
                var value = this.model ? this.model.tmpValue : control.value;
                if (control.pipeIn) {
                    value = api.callStrFunction.call(this, control.pipeIn, ['value', 'store', 'data'], value, formStore, data);
                }
                return value;
            };
            // 兼容老版本用法，新版本直接用 onChange 就可以。
            class_1.prototype.setValue = function (value, key) {
                var _a;
                var onBulkChange = this.props.onBulkChange;
                if (!key || (this.model && key === this.model.name)) {
                    this.handleChange(value);
                }
                else {
                    onBulkChange &&
                        onBulkChange((_a = {},
                            _a[key] = value,
                            _a));
                }
            };
            class_1.prototype.renderChild = function (region, node, subProps) {
                if (subProps === void 0) { subProps = {}; }
                var _a = this.props, render = _a.render, data = _a.data, store = _a.store;
                var model = this.model;
                return render(region, node, tslib.__assign({ data: model
                        ? model.getMergedData(data || (store === null || store === void 0 ? void 0 : store.data))
                        : data || (store === null || store === void 0 ? void 0 : store.data) }, subProps));
            };
            class_1.prototype.render = function () {
                var _a, _b, _c;
                var _d = this.props, controlWidth = _d.controlWidth, disabled = _d.disabled, formMode = _d.formMode, control = _d.$schema, store = _d.store, data = _d.data, invisible = _d.invisible, defaultStatic = _d.defaultStatic;
                if (invisible) {
                    return null;
                }
                var value = this.getValue();
                var model = this.model;
                var injectedProps = {
                    defaultSize: controlWidth,
                    disabled: disabled !== null && disabled !== void 0 ? disabled : control.disabled,
                    static: (_b = (_a = this.props.static) !== null && _a !== void 0 ? _a : control.static) !== null && _b !== void 0 ? _b : defaultStatic,
                    formItem: this.model,
                    formMode: control.mode || formMode,
                    ref: this.controlRef,
                    data: data || (store === null || store === void 0 ? void 0 : store.data),
                    name: (_c = model === null || model === void 0 ? void 0 : model.name) !== null && _c !== void 0 ? _c : control.name,
                    value: value,
                    changeMotivation: model === null || model === void 0 ? void 0 : model.changeMotivation,
                    defaultValue: control.value,
                    formItemValue: value,
                    onChange: this.handleChange,
                    onBlur: this.handleBlur,
                    setValue: this.setValue,
                    getValue: this.getValue,
                    prinstine: model ? model.prinstine : undefined,
                    setPrinstineValue: this.setPrinstineValue,
                    onValidate: this.validate,
                    onFlushChange: this.flushChange
                    // render: this.renderChild // 如果覆盖，那么用的就是 form 上的 render，这个里面用到的 data 是比较旧的。
                    // !没了这个， tree 里的 options 渲染会出问题
                    // todo 理论上不应该影响，待确认
                    // _filteredOptions: this.model?.filteredOptions
                };
                return (_J$X_(ComposedComponent, tslib.__assign({}, this.props, injectedProps)));
            };
            return class_1;
        }(React__default["default"].Component)),
        _a.displayName = "WrapControl".concat(ComposedComponent.displayName || ComposedComponent.name
            ? "(".concat(ComposedComponent.displayName || ComposedComponent.name, ")")
            : ''),
        _a.contextType = Scoped.ScopedContext,
        _a.defaultProps = {},
        _a))), ComposedComponent);
    return result;
}

exports.wrapControl = wrapControl;
