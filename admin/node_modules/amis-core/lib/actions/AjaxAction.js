/**
 * amis-core v6.13.0
 * Copyright 2018-2025 fex
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var api = require('../utils/api.js');
var errors = require('../utils/errors.js');
var helper = require('../utils/helper.js');
var tpl = require('../utils/tpl.js');
var Action = require('./Action.js');
var object = require('../utils/object.js');

/**
 * 发送请求动作
 *
 * @export
 * @class AjaxAction
 * @implements {Action}
 */
var AjaxAction = /** @class */ (function () {
    function AjaxAction(fetcherType) {
        if (fetcherType === void 0) { fetcherType = 'ajax'; }
        this.fetcherType = fetcherType;
    }
    AjaxAction.prototype.run = function (action, renderer, event) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
        return tslib.__awaiter(this, void 0, void 0, function () {
            var env, silent, messages, api$1, sendOn, result, responseData, msg, e_1, result;
            var _p;
            return tslib.__generator(this, function (_q) {
                switch (_q.label) {
                    case 0:
                        if (!((_a = event.context.env) === null || _a === void 0 ? void 0 : _a.fetcher)) {
                            throw new Error('env.fetcher is required!');
                        }
                        if (!action.api) {
                            throw new Error('api is required!');
                        }
                        if (this.fetcherType === 'download' && action.actionType === 'download') {
                            if (action.api) {
                                action.api.responseType = 'blob';
                            }
                        }
                        env = event.context.env;
                        silent = ((_b = action === null || action === void 0 ? void 0 : action.options) === null || _b === void 0 ? void 0 : _b.silent) || (action === null || action === void 0 ? void 0 : action.api).silent;
                        messages = (_c = action === null || action === void 0 ? void 0 : action.api) === null || _c === void 0 ? void 0 : _c.messages;
                        api$1 = api.normalizeApi(action.api);
                        if (!api$1.sendOn) return [3 /*break*/, 2];
                        return [4 /*yield*/, tpl.evalExpressionWithConditionBuilderAsync(api$1.sendOn, (_d = action.data) !== null && _d !== void 0 ? _d : {}, false)];
                    case 1:
                        sendOn = _q.sent();
                        if (!sendOn) {
                            return [2 /*return*/];
                        }
                        _q.label = 2;
                    case 2:
                        // 如果没配置data数据映射，则给一个空对象，避免将当前数据域作为接口请求参数
                        if ((api$1 === null || api$1 === void 0 ? void 0 : api$1.data) == undefined) {
                            api$1 = tslib.__assign(tslib.__assign({}, api$1), { data: {} });
                        }
                        _q.label = 3;
                    case 3:
                        _q.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, env.fetcher(api$1, (_e = action.data) !== null && _e !== void 0 ? _e : {}, (_f = action === null || action === void 0 ? void 0 : action.options) !== null && _f !== void 0 ? _f : {})];
                    case 4:
                        result = _q.sent();
                        responseData = !helper.isEmpty(result.data) || result.ok
                            ? api.normalizeApiResponseData(result.data)
                            : null;
                        // 记录请求返回的数据
                        event.setData(object.createObject(event.data, tslib.__assign(tslib.__assign(tslib.__assign({}, event.data), responseData), (_p = { responseData: responseData }, _p[action.outputVar || 'responseResult'] = tslib.__assign(tslib.__assign({}, responseData), { responseData: responseData, responseStatus: result.status, responseMsg: result.msg }), _p))));
                        if (!silent) {
                            if (!result.ok) {
                                throw new errors.ServerError((_j = (_g = messages === null || messages === void 0 ? void 0 : messages.failed) !== null && _g !== void 0 ? _g : (_h = action.messages) === null || _h === void 0 ? void 0 : _h.failed) !== null && _j !== void 0 ? _j : result.msg, result);
                            }
                            else {
                                msg = (_o = (_m = (_k = messages === null || messages === void 0 ? void 0 : messages.success) !== null && _k !== void 0 ? _k : (_l = action.messages) === null || _l === void 0 ? void 0 : _l.success) !== null && _m !== void 0 ? _m : result.msg) !== null && _o !== void 0 ? _o : result.defaultMsg;
                                msg &&
                                    env.notify('success', msg, result.msgTimeout !== undefined
                                        ? {
                                            closeButton: true,
                                            timeout: result.msgTimeout
                                        }
                                        : undefined);
                            }
                        }
                        return [2 /*return*/, result.data];
                    case 5:
                        e_1 = _q.sent();
                        if (!silent) {
                            if (e_1.type === 'ServerError') {
                                result = e_1.response;
                                env.notify('error', e_1.message, result.msgTimeout !== undefined
                                    ? {
                                        closeButton: true,
                                        timeout: result.msgTimeout
                                    }
                                    : undefined);
                            }
                            else {
                                env.notify('error', e_1.message);
                            }
                        }
                        throw e_1;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    return AjaxAction;
}());
Action.registerAction('ajax', new AjaxAction());
Action.registerAction('download', new AjaxAction('download'));

exports.AjaxAction = AjaxAction;
