/**
 * amis-core v6.13.0
 * Copyright 2018-2025 fex
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
require('amis-formula');
require('moment');
var object = require('../utils/object.js');
require('../utils/memoryParse.js');
require('@rc-component/mini-decimal');
require('lodash/isPlainObject');
require('../utils/filter.js');
require('../utils/api.js');
require('file-saver');
require('../utils/browser.js');
require('../utils/ColorScale.js');
require('../utils/columnsSplit.js');
require('../utils/DataSchema.js');
require('../utils/DataScope.js');
require('../utils/debug.js');
require('../utils/dom.js');
require('../utils/errors.js');
require('../utils/tpl.js');
require('../utils/helper.js');
require('lodash/isObject');
require('lodash/isString');
require('lodash/isBoolean');
require('../utils/highlight.js');
require('../utils/icon.js');
require('../utils/image.js');
require('lodash/isEqual');
var Action = require('./Action.js');
require('lodash/debounce');
require('../utils/resize-sensor.js');
require('react');
require('react-overlays/useRootClose');
require('react-dom');
require('../utils/SimpleMap.js');
require('lodash/mapValues');
require('lodash/camelCase');
require('lodash/cloneDeep');
require('lodash/map');
require('lodash/isEmpty');
require('lodash/kebabCase');
require('uncontrollable');
require('hoist-non-react-statics');
require('../utils/validations.js');
require('../utils/resolveCondition.js');
require('mobx');
require('../utils/Animation.js');

/**
 * 打开抽屉动作
 *
 * @export
 * @class DrawerAction
 * @implements {Action}
 */
var DrawerAction = /** @class */ (function () {
    function DrawerAction() {
    }
    DrawerAction.prototype.run = function (action, renderer, event) {
        var _a, _b;
        return tslib.__awaiter(this, void 0, void 0, function () {
            var ret, _c, confirmed, value;
            var _d;
            return tslib.__generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        // 防止editor preview模式下执行
                        if (action.$$id !== undefined) {
                            return [2 /*return*/];
                        }
                        ret = renderer.handleAction
                            ? renderer.handleAction(event, {
                                actionType: 'drawer',
                                drawer: action.drawer,
                                reload: 'none',
                                data: action.rawData
                            }, action.data)
                            : (_b = (_a = renderer.props).onAction) === null || _b === void 0 ? void 0 : _b.call(_a, event, {
                                actionType: 'drawer',
                                drawer: action.drawer,
                                reload: 'none',
                                data: action.rawData
                            }, action.data);
                        event.pendingPromise.push(ret);
                        if (!action.waitForAction) return [3 /*break*/, 2];
                        return [4 /*yield*/, ret];
                    case 1:
                        _c = _e.sent(), confirmed = _c.confirmed, value = _c.value;
                        event.setData(object.extendObject(event.data, (_d = {},
                            _d[action.outputVar || 'drawerResponse'] = {
                                confirmed: confirmed,
                                value: value
                            },
                            _d)));
                        _e.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    return DrawerAction;
}());
/**
 * 关闭抽屉动作
 *
 * @export
 * @class CloseDrawerAction
 * @implements {Action}
 */
var CloseDrawerAction = /** @class */ (function () {
    function CloseDrawerAction() {
    }
    CloseDrawerAction.prototype.run = function (action, renderer, event) {
        var _a, _b;
        return tslib.__awaiter(this, void 0, void 0, function () {
            return tslib.__generator(this, function (_c) {
                if (action.componentId) {
                    // 关闭指定抽屉
                    event.context.scoped.closeById(action.componentId);
                }
                else {
                    // 关闭当前抽屉
                    (_b = (_a = renderer.props).onAction) === null || _b === void 0 ? void 0 : _b.call(_a, event, tslib.__assign(tslib.__assign({}, action), { actionType: 'close' }), action.data);
                }
                return [2 /*return*/];
            });
        });
    };
    return CloseDrawerAction;
}());
Action.registerAction('drawer', new DrawerAction());
Action.registerAction('closeDrawer', new CloseDrawerAction());

exports.CloseDrawerAction = CloseDrawerAction;
exports.DrawerAction = DrawerAction;
