/**
 * amis-core v6.13.0
 * Copyright 2018-2025 fex
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var React = require('react');
var reactTransitionGroup = require('react-transition-group');
require('amis-formula');
require('moment');
require('lodash/isPlainObject');
require('../utils/memoryParse.js');
require('@rc-component/mini-decimal');
require('../utils/filter.js');
require('../utils/api.js');
require('file-saver');
require('../utils/browser.js');
require('../utils/ColorScale.js');
require('../utils/columnsSplit.js');
require('../utils/DataSchema.js');
require('../utils/DataScope.js');
require('../utils/debug.js');
require('../utils/dom.js');
require('../utils/errors.js');
require('../utils/tpl.js');
var helper = require('../utils/helper.js');
require('lodash/isObject');
require('lodash/isString');
require('lodash/isBoolean');
require('../utils/highlight.js');
require('../utils/icon.js');
require('../utils/image.js');
require('lodash/isEqual');
require('../actions/Action.js');
require('lodash/debounce');
require('../utils/resize-sensor.js');
require('react-overlays/useRootClose');
require('react-dom');
require('../utils/SimpleMap.js');
require('lodash/mapValues');
require('lodash/camelCase');
require('lodash/cloneDeep');
require('lodash/map');
require('lodash/isEmpty');
require('lodash/kebabCase');
require('uncontrollable');
require('hoist-non-react-statics');
require('../utils/validations.js');
require('../utils/resolveCondition.js');
require('mobx');
require('../utils/Animation.js');
var animations = require('../utils/animations.js');
var StyleManager = require('../StyleManager.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var __react_jsx__ = require('react');
var _J$X_ = (__react_jsx__["default"] || __react_jsx__).createElement;
(__react_jsx__["default"] || __react_jsx__).Fragment;
function Animations(_a) {
    var schema = _a.schema, component = _a.component, show = _a.show;
    var enter = (schema.animations || {}).enter;
    var _b = tslib.__read(React.useState(!(enter === null || enter === void 0 ? void 0 : enter.inView)), 2), animationShow = _b[0], setAnimationShow = _b[1];
    var _c = tslib.__read(React.useState(!!(enter === null || enter === void 0 ? void 0 : enter.inView)), 2), placeholderShow = _c[0], setPlaceholderShow = _c[1];
    var id = React.useMemo(function () { return helper.formateId(schema.id); }, []);
    var observer = React.useMemo(newObserver, []);
    var animationClassNames = React.useMemo(initAnimationClassNames, []);
    var animationTimeout = React.useMemo(initAnimationTimeout, []);
    React.useEffect(function () {
        animations.createAnimationStyle(id, schema.animations);
        return function () {
            if (schema.animations) {
                StyleManager["default"].removeStyles(id);
            }
            observer.disconnect();
        };
    }, []);
    function newObserver() {
        return new IntersectionObserver(function (entries, observer) {
            entries.forEach(function (entry) {
                if (entry.target.getAttribute('data-role') === 'animation-placeholder') {
                    if (entry.isIntersecting) {
                        setAnimationShow(true);
                        setPlaceholderShow(false);
                        observer.unobserve(entry.target);
                    }
                }
                else {
                    if (!entry.isIntersecting) {
                        setAnimationShow(false);
                        observer.unobserve(entry.target);
                    }
                }
            });
        }, {
            root: null,
            rootMargin: '0px',
            threshold: 0.1
        });
    }
    function initAnimationClassNames() {
        var animations = schema === null || schema === void 0 ? void 0 : schema.animations;
        var animationClassNames = {
            appear: '',
            enter: '',
            exit: ''
        };
        if (animations) {
            if (animations.enter) {
                animationClassNames.enter = "".concat(animations.enter.type, "-").concat(id, "-enter");
                animationClassNames.appear = animationClassNames.enter;
            }
            if (animations.exit) {
                animationClassNames.exit = "".concat(animations.exit.type, "-").concat(id, "-exit");
            }
        }
        return animationClassNames;
    }
    function initAnimationTimeout() {
        var animations = schema === null || schema === void 0 ? void 0 : schema.animations;
        var animationTimeout = {
            enter: 0,
            exit: 0
        };
        if (animations) {
            if (animations.enter) {
                animationTimeout.enter =
                    ((animations.enter.duration || 1) + (animations.enter.delay || 0)) *
                        1000;
            }
            if (animations.exit) {
                animationTimeout.exit =
                    ((animations.exit.duration || 1) + (animations.exit.delay || 0)) *
                        1000;
            }
        }
        return animationTimeout;
    }
    function refFn(ref) {
        if (ref) {
            observer.observe(ref);
        }
    }
    var handleEntered = React.useCallback(function (node) {
        var _a = schema.animations || {}, attention = _a.attention, exit = _a.exit, enter = _a.enter, hover = _a.hover;
        if (attention) {
            node.classList.add("".concat(attention.type, "-").concat(id, "-attention"));
        }
        if (hover) {
            node.classList.add("".concat(hover.type, "-").concat(id, "-hover"));
            node.classList.add("amis-".concat(hover.type));
        }
        if ((exit === null || exit === void 0 ? void 0 : exit.outView) || (enter === null || enter === void 0 ? void 0 : enter.repeat)) {
            observer.observe(node);
        }
    }, []);
    var handleExit = React.useCallback(function (node) {
        var _a = schema.animations || {}, attention = _a.attention, hover = _a.hover;
        if (attention) {
            node.classList.remove("".concat(attention.type, "-").concat(id, "-attention"));
        }
        if (hover) {
            node.classList.remove("".concat(hover.type, "-").concat(id, "-hover"));
            node.classList.remove("amis-".concat(hover.type));
        }
    }, []);
    var handleExited = React.useCallback(function () {
        setPlaceholderShow(true);
    }, []);
    return (_J$X_(React__default["default"].Fragment, null,
        !animationShow && show && placeholderShow && (_J$X_("div", { ref: refFn, className: "amis-animation-placeholder", "data-role": "animation-placeholder" }, component)),
        _J$X_(reactTransitionGroup.CSSTransition, { in: animationShow && show, timeout: animationTimeout, classNames: animationClassNames, onEntered: handleEntered, onExit: handleExit, onExited: handleExited, appear: true, unmountOnExit: true }, component)));
}

exports["default"] = Animations;
