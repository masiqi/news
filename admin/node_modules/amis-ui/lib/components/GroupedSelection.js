/**
 * amis-ui v6.13.0
 * Copyright 2018-2025 fex
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var React = require('react');
var amisCore = require('amis-core');
var Selection = require('./Selection.js');
var Checkbox = require('./Checkbox.js');
var index = require('./virtual-list/index.js');
var AutoSizer = require('./virtual-list/AutoSizer.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var __react_jsx__ = require('react');
var _J$X_ = (__react_jsx__["default"] || __react_jsx__).createElement;
(__react_jsx__["default"] || __react_jsx__).Fragment;
var GroupedSelection = /** @class */ (function (_super) {
    tslib.__extends(GroupedSelection, _super);
    function GroupedSelection() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GroupedSelection.prototype.renderOption = function (option, index, key, styles, testIdBuilder) {
        var _this = this;
        if (key === void 0) { key = "".concat(index); }
        if (styles === void 0) { styles = {}; }
        var _a = this.props, disabled = _a.disabled, cx = _a.classnames, itemRender = _a.itemRender, multiple = _a.multiple, _b = _a.labelField, labelField = _b === void 0 ? 'label' : _b;
        var tBuilder = testIdBuilder === null || testIdBuilder === void 0 ? void 0 : testIdBuilder.getChild(index);
        if (Array.isArray(option.children)) {
            if (!option[labelField]) {
                return (_J$X_(React__default["default"].Fragment, null, option.children.map(function (child, index) {
                    return _this.renderOption(child, index, "".concat(index), {}, tBuilder);
                })));
            }
            return (_J$X_("div", { key: index, className: cx('GroupedSelection-group', option.className) },
                _J$X_("div", { className: cx('GroupedSelection-itemLabel') }, itemRender(option, {
                    index: index,
                    multiple: multiple,
                    checked: false,
                    onChange: function () { return undefined; },
                    disabled: disabled || option.disabled,
                    labelField: labelField,
                    classnames: cx,
                    testIdBuilder: tBuilder === null || tBuilder === void 0 ? void 0 : tBuilder.getChild('label')
                })),
                _J$X_("div", { className: cx('GroupedSelection-items', option.className) }, option.children.map(function (child, index) {
                    return _this.renderOption(child, index, "".concat(index), {}, tBuilder);
                }))));
        }
        return this.renderPureOption(option, index, key, styles, tBuilder);
    };
    GroupedSelection.prototype.renderOptionOrLabel = function (option, index, hasParent, styles) {
        if (hasParent === void 0) { hasParent = false; }
        if (styles === void 0) { styles = {}; }
        var _a = this.props, disabled = _a.disabled, cx = _a.classnames, itemRender = _a.itemRender, multiple = _a.multiple, labelField = _a.labelField;
        if (option.children) {
            return (_J$X_("div", { key: index, style: styles, className: cx('GroupedSelection-group', option.className) },
                _J$X_("div", { className: cx('GroupedSelection-itemLabel') }, itemRender(option, {
                    index: index,
                    multiple: multiple,
                    checked: false,
                    onChange: function () { return undefined; },
                    disabled: disabled || option.disabled,
                    labelField: labelField,
                    classnames: cx
                }))));
        }
        return hasParent ? (_J$X_("div", { key: 'group' + index, style: styles, className: cx('GroupedSelection-group', option.className) },
            _J$X_("div", { className: cx('GroupedSelection-items', option.className) }, this.renderPureOption(option, index)))) : (this.renderPureOption(option, index, undefined, styles));
    };
    GroupedSelection.prototype.renderPureOption = function (option, index, key, styles, testIdBuilder) {
        var _this = this;
        if (styles === void 0) { styles = {}; }
        var _a = this.props, labelClassName = _a.labelClassName, disabled = _a.disabled, cx = _a.classnames, itemClassName = _a.itemClassName, itemRender = _a.itemRender, multiple = _a.multiple, labelField = _a.labelField;
        var valueArray = this.valueArray;
        var itemTIB = testIdBuilder === null || testIdBuilder === void 0 ? void 0 : testIdBuilder.getChild("item-".concat(index));
        return (_J$X_("div", tslib.__assign({ key: index, style: styles, className: cx('GroupedSelection-item', itemClassName, option.className, disabled || option.disabled ? 'is-disabled' : '', !!~valueArray.indexOf(option) ? 'is-active' : ''), onClick: function () { return _this.toggleOption(option); } }, itemTIB === null || itemTIB === void 0 ? void 0 : itemTIB.getTestId()),
            multiple ? (_J$X_(Checkbox["default"], { size: "sm", checked: !!~valueArray.indexOf(option), disabled: disabled || option.disabled, labelClassName: labelClassName, description: option.description, testIdBuilder: itemTIB === null || itemTIB === void 0 ? void 0 : itemTIB.getChild('checkbox') })) : null,
            _J$X_("div", { className: cx('GroupedSelection-itemLabel') }, itemRender(option, {
                index: index,
                multiple: multiple,
                checked: !!~valueArray.indexOf(option),
                onChange: function () { return _this.toggleOption(option); },
                disabled: disabled || option.disabled,
                labelField: labelField,
                classnames: cx,
                testIdBuilder: itemTIB === null || itemTIB === void 0 ? void 0 : itemTIB.getChild('label')
            }))));
    };
    GroupedSelection.prototype.renderCheckAll = function () {
        var _a = this.props, multiple = _a.multiple, checkAll = _a.checkAll, checkAllLabel = _a.checkAllLabel, cx = _a.classnames, __ = _a.translate, labelClassName = _a.labelClassName, itemClassName = _a.itemClassName;
        if (!multiple || !checkAll) {
            return null;
        }
        var availableOptions = this.getAvailableOptions();
        var valueArray = this.valueArray;
        var checkedAll = availableOptions.every(function (option) { return valueArray.indexOf(option) > -1; });
        var checkedPartial = availableOptions.some(function (option) { return valueArray.indexOf(option) > -1; });
        return (_J$X_("div", { className: cx('GroupedSelection-item', itemClassName), onClick: this.toggleAll },
            _J$X_(Checkbox["default"], { checked: checkedPartial, partial: checkedPartial && !checkedAll, size: "sm", labelClassName: labelClassName }),
            _J$X_("div", { className: cx('GroupedSelection-itemLabel') }, __(checkAllLabel))));
    };
    GroupedSelection.prototype.render = function () {
        var _this = this;
        var _a;
        var _b = this.props, value = _b.value, options = _b.options, className = _b.className, placeholder = _b.placeholder, cx = _b.classnames, option2value = _b.option2value, onClick = _b.onClick, placeholderRender = _b.placeholderRender, _c = _b.virtualThreshold, virtualThreshold = _c === void 0 ? 1000 : _c, _d = _b.itemHeight, itemHeight = _d === void 0 ? 32 : _d, virtualListHeight = _b.virtualListHeight, testIdBuilder = _b.testIdBuilder;
        var __ = this.props.translate;
        this.valueArray = Selection.BaseSelection.value2array(value, options, option2value);
        var body = null;
        if (Array.isArray(options) && options.length) {
            var flattendOptions_1 = amisCore.flattenTree(options, function (item, index, level) {
                return {
                    option: item,
                    hasParent: level > 1
                };
            });
            body =
                flattendOptions_1.length > virtualThreshold ? (_J$X_(AutoSizer["default"], { minHeight: virtualListHeight }, function (_a) {
                    var height = _a.height;
                    return (_J$X_(index["default"], { height: height, itemCount: flattendOptions_1.length, itemSize: itemHeight, prefix: _this.renderCheckAll(), renderItem: function (_a) {
                            var index = _a.index, style = _a.style;
                            var _b = flattendOptions_1[index] || {}, option = _b.option, hasParent = _b.hasParent;
                            if (!option) {
                                return null;
                            }
                            return _this.renderOptionOrLabel(option, index, hasParent, tslib.__assign(tslib.__assign({}, style), { width: '100%' }));
                        } }));
                })) : (_J$X_(React__default["default"].Fragment, null,
                    this.renderCheckAll(),
                    options.map(function (option, key) {
                        return _this.renderOption(option, key, "".concat(key), {}, testIdBuilder);
                    })));
        }
        return (_J$X_("div", { className: cx('GroupedSelection', className), onClick: onClick }, body ? (body) : (_J$X_("div", { className: cx('GroupedSelection-placeholder') }, (_a = placeholderRender === null || placeholderRender === void 0 ? void 0 : placeholderRender(this.props)) !== null && _a !== void 0 ? _a : __(placeholder)))));
    };
    return GroupedSelection;
}(Selection.BaseSelection));
var GroupedSelection$1 = amisCore.themeable(amisCore.localeable(amisCore.uncontrollable(GroupedSelection, {
    value: 'onChange'
})));

exports.GroupedSelection = GroupedSelection;
exports["default"] = GroupedSelection$1;
