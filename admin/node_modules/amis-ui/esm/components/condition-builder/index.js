/**
 * amis-ui v6.13.0
 * Copyright 2018-2025 fex
 */

import { __extends, __assign, __read, __decorate, __metadata } from 'tslib';
import React__default from 'react';
import { animation, findTreeIndex, getTree, spliceTree, mapTree, guid, noop, autobind, themeable, localeable, uncontrollable } from 'amis-core';
import ConditionGroup from './Group.js';
import defaultConfig from './config.js';
import PickerContainer from '../PickerContainer.js';
import ResultBox from '../ResultBox.js';

var QueryBuilder = /** @class */ (function (_super) {
    __extends(QueryBuilder, _super);
    function QueryBuilder() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.config = __assign(__assign({}, defaultConfig), _this.props.config);
        _this.lastMoveAt = 0;
        return _this;
    }
    QueryBuilder.prototype.handleDragStart = function (e) {
        var _a = this.props.draggable, draggable = _a === void 0 ? true : _a;
        // draggable为false时不可拖拽
        if (!draggable)
            return;
        var target = e.currentTarget;
        var item = target.closest('[data-id]');
        this.dragTarget = item;
        // this.dragNextSibling = item.nextElementSibling;
        this.host = item.closest('[data-group-id]');
        var ghost = item.cloneNode(true);
        ghost.classList.add('is-ghost');
        this.ghost = ghost;
        e.dataTransfer.setDragImage(item.firstChild, 0, 0);
        target.addEventListener('dragend', this.handleDragEnd);
        document.body.addEventListener('dragover', this.handleDragOver);
        document.body.addEventListener('drop', this.handleDragDrop);
        this.lastX = e.clientX;
        this.lastY = e.clientY;
        // 应该是 chrome 的一个bug，如果你马上修改，会马上执行 dragend
        setTimeout(function () {
            item.classList.add('is-dragging');
            // item.parentElement!.insertBefore(
            //   item,
            //   item.parentElement!.firstElementChild
            // ); // 挪到第一个，主要是因为样式问题。
        }, 5);
    };
    QueryBuilder.prototype.handleDragOver = function (e) {
        e.preventDefault();
        var item = e.target.closest('[data-id]');
        var dx = e.clientX - this.lastX;
        var dy = e.clientY - this.lastY;
        var d = Math.max(Math.abs(dx), Math.abs(dy));
        var now = Date.now();
        // 没移动还是不要处理，免得晃动个不停。
        if (d < 5) {
            if (this.lastMoveAt === 0) ;
            else if (now - this.lastMoveAt > 500) {
                var host = e.target.closest('[data-group-id]');
                if (host) {
                    this.host = host;
                    this.lastMoveAt = now;
                    this.lastX = 0;
                    this.lastY = 0;
                    this.handleDragOver(e);
                    return;
                }
            }
            return;
        }
        this.lastMoveAt = now;
        this.lastX = e.clientX;
        this.lastY = e.clientY;
        if (!item ||
            item.classList.contains('is-ghost') ||
            item.closest('[data-group-id]') !== this.host) {
            return;
        }
        var container = item.parentElement;
        var children = [].slice.apply(container.children);
        var idx = children.indexOf(item);
        if (this.ghost.parentElement !== container) {
            container.appendChild(this.ghost);
        }
        var rect = item.getBoundingClientRect();
        var isAfter = dy > 0 && e.clientY > rect.top + rect.height / 2;
        var gIdx = isAfter ? idx : idx - 1;
        var cgIdx = children.indexOf(this.ghost);
        if (gIdx !== cgIdx) {
            animation.capture(container);
            if (gIdx === children.length - 1) {
                container.appendChild(this.ghost);
            }
            else {
                container.insertBefore(this.ghost, children[gIdx + 1]);
            }
            animation.animateAll();
        }
    };
    QueryBuilder.prototype.handleDragDrop = function () {
        var _a, _b;
        var onChange = this.props.onChange;
        var fromId = this.dragTarget.getAttribute('data-id');
        var toId = this.host.getAttribute('data-group-id');
        var children = [].slice.call(this.ghost.parentElement.children);
        var idx = children.indexOf(this.dragTarget);
        if (~idx) {
            children.splice(idx, 1);
        }
        var toIndex = children.indexOf(this.ghost);
        var value = this.props.value;
        var indexes = findTreeIndex([value], function (item) { return item.id === fromId; });
        if (indexes) {
            var origin_1 = getTree([value], indexes.concat());
            _a = __read(spliceTree([value], indexes, 1), 1), value = _a[0];
            var indexes2 = findTreeIndex([value], function (item) { return item.id === toId; });
            if (indexes2) {
                _b = __read(spliceTree([value], indexes2.concat(toIndex), 0, origin_1), 1), value = _b[0];
                onChange(value);
            }
        }
    };
    QueryBuilder.prototype.handleDragEnd = function (e) {
        var _a;
        var target = e.target;
        target.removeEventListener('dragend', this.handleDragEnd);
        document.body.removeEventListener('dragover', this.handleDragOver);
        document.body.removeEventListener('drop', this.handleDragDrop);
        this.dragTarget.classList.remove('is-dragging');
        // if (this.dragNextSibling) {
        //   this.dragTarget.parentElement!.insertBefore(
        //     this.dragTarget,
        //     this.dragNextSibling
        //   );
        // } else {
        //   this.dragTarget.parentElement!.appendChild(this.dragTarget);
        // }
        delete this.dragTarget;
        // delete this.dragNextSibling;
        (_a = this.ghost.parentElement) === null || _a === void 0 ? void 0 : _a.removeChild(this.ghost);
        delete this.ghost;
    };
    QueryBuilder.prototype.handleClear = function () {
        this.props.onChange();
    };
    QueryBuilder.prototype.highlightValue = function (value) {
        var _a = this.props, cx = _a.classnames, __ = _a.translate;
        var html = {
            __html: "<span class=\"label label-info\">".concat(__('Condition.configured'), "</span>")
        };
        return (React__default.createElement("div", { className: cx('CPGroup-result'), dangerouslySetInnerHTML: html }));
    };
    QueryBuilder.prototype.renderBody = function (onChange, value, popOverContainer) {
        var _a = this.props, cx = _a.classnames, fieldClassName = _a.fieldClassName, fields = _a.fields, funcs = _a.funcs, showNot = _a.showNot, showANDOR = _a.showANDOR, data = _a.data, disabled = _a.disabled, _b = _a.draggable, draggable = _b === void 0 ? true : _b, searchable = _a.searchable, builderMode = _a.builderMode, formula = _a.formula, renderEtrValue = _a.renderEtrValue, selectMode = _a.selectMode, isAddBtnVisibleOn = _a.isAddBtnVisibleOn, isAddGroupBtnVisibleOn = _a.isAddGroupBtnVisibleOn, showIf = _a.showIf, formulaForIf = _a.formulaForIf, testIdBuilder = _a.testIdBuilder;
        var normalizedValue = Array.isArray(value === null || value === void 0 ? void 0 : value.children)
            ? __assign(__assign({}, value), { children: mapTree(value.children, function (value) {
                    if (value.id) {
                        return value;
                    }
                    return __assign(__assign({}, value), { id: guid() });
                }) }) : value;
        return (React__default.createElement(ConditionGroup, { builderMode: builderMode, config: this.config, funcs: funcs || this.config.funcs, fields: fields || this.config.fields, value: normalizedValue, onChange: onChange, classnames: cx, fieldClassName: fieldClassName, removeable: false, onDragStart: this.handleDragStart, showANDOR: showANDOR, showNot: showNot, data: data, disabled: disabled, draggable: draggable, searchable: searchable, formula: formula, renderEtrValue: renderEtrValue, popOverContainer: popOverContainer, selectMode: selectMode, depth: 1, isAddBtnVisibleOn: isAddBtnVisibleOn, isAddGroupBtnVisibleOn: isAddGroupBtnVisibleOn, showIf: showIf, formulaForIf: formulaForIf, testIdBuilder: testIdBuilder === null || testIdBuilder === void 0 ? void 0 : testIdBuilder.getChild('group') }));
    };
    QueryBuilder.prototype.render = function () {
        var _this = this;
        var _a = this.props, cx = _a.classnames, placeholder = _a.placeholder, _b = _a.embed, embed = _b === void 0 ? true : _b, pickerIcon = _a.pickerIcon, locale = _a.locale, translate = _a.translate, classPrefix = _a.classPrefix, onFinalChange = _a.onChange, value = _a.value, title = _a.title, disabled = _a.disabled, popOverContainer = _a.popOverContainer, testIdBuilder = _a.testIdBuilder, mobileUI = _a.mobileUI;
        if (embed) {
            return this.renderBody(onFinalChange, value, popOverContainer);
        }
        /** 因为 ConditionBuilder特殊的数据结构，提供给 ResultBox 的需要处理一下 */
        var resultBoxValue = embed === false
            ? !value ||
                !(value === null || value === void 0 ? void 0 : value.hasOwnProperty('children')) ||
                !Array.isArray(value.children) ||
                value.children.length < 1
                ? undefined
                : value
            : value;
        return (React__default.createElement(PickerContainer, { classnames: cx, classPrefix: classPrefix, translate: translate, locale: locale, onConfirm: onFinalChange, value: value, size: 'md', popOverContainer: popOverContainer, bodyRender: function (params) { return _this.renderBody(params.onChange, params.value); }, title: title }, function (_a) {
            var onClick = _a.onClick, isOpened = _a.isOpened;
            return (React__default.createElement(ResultBox, { classnames: cx, classPrefix: classPrefix, translate: translate, locale: locale, className: cx('CBGroup-result', { 'is-active': isOpened }), allowInput: false, clearable: true, result: resultBoxValue, itemRender: _this.highlightValue, onResultChange: noop, onClear: _this.handleClear, disabled: disabled, borderMode: 'full', placeholder: placeholder, actions: pickerIcon && (React__default.createElement("span", { className: cx('CBPicker-trigger'), onClick: onClick }, pickerIcon)), mobileUI: mobileUI, onResultClick: onClick, testIdBuilder: testIdBuilder === null || testIdBuilder === void 0 ? void 0 : testIdBuilder.getChild('result-box') }));
        }));
    };
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], QueryBuilder.prototype, "handleDragStart", null);
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [DragEvent]),
        __metadata("design:returntype", void 0)
    ], QueryBuilder.prototype, "handleDragOver", null);
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], QueryBuilder.prototype, "handleDragDrop", null);
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Event]),
        __metadata("design:returntype", void 0)
    ], QueryBuilder.prototype, "handleDragEnd", null);
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], QueryBuilder.prototype, "handleClear", null);
    __decorate([
        autobind,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], QueryBuilder.prototype, "highlightValue", null);
    return QueryBuilder;
}(React__default.Component));
var ConditionBuilder = themeable(localeable(uncontrollable(QueryBuilder, {
    value: 'onChange'
})));

export { QueryBuilder, ConditionBuilder as default };
