/// <reference types="hoist-non-react-statics" />
import React from 'react';
import { ClassNamesFn, ThemeProps } from 'amis-core';
export interface CardProps extends ThemeProps {
    className?: string;
    headerClassName?: string;
    titleClassName?: string;
    subTitleClassName?: string;
    descriptionClassName?: string;
    avatarTextStyle?: object;
    avatarTextClassName?: string;
    avatarClassName?: string;
    secondaryClassName?: string;
    imageClassName?: string;
    bodyClassName?: string;
    footerClassName?: string;
    media?: React.ReactNode;
    mediaPosition?: 'top' | 'left' | 'right' | 'bottom';
    mediaActionPosition?: 'outside';
    toolbar?: React.ReactNode;
    children?: React.ReactNode;
    actions?: React.ReactNode;
    title?: string | JSX.Element;
    subTitle?: string | JSX.Element;
    subTitlePlaceholder?: string | JSX.Element;
    description?: string | JSX.Element;
    descriptionPlaceholder?: string | JSX.Element;
    avatar?: string;
    avatarText?: string | JSX.Element;
    secondary?: string | JSX.Element;
    onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;
    classnames: ClassNamesFn;
    data?: any;
}
export declare class Card extends React.Component<CardProps> {
    static defaultProps: Partial<CardProps>;
    constructor(props: CardProps);
    handleClick(e: React.MouseEvent<HTMLDivElement>): void;
    render(): React.JSX.Element;
}
declare const _default: {
    new (props: Pick<Omit<CardProps, keyof ThemeProps>, never> & {
        children?: React.ReactNode;
        data?: any;
        title?: string | JSX.Element | undefined;
        onClick?: ((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
        description?: string | JSX.Element | undefined;
        toolbar?: React.ReactNode;
        bodyClassName?: string | undefined;
        media?: React.ReactNode;
        titleClassName?: string | undefined;
        headerClassName?: string | undefined;
        actions?: React.ReactNode;
        subTitle?: string | JSX.Element | undefined;
        footerClassName?: string | undefined;
        descriptionClassName?: string | undefined;
        avatar?: string | undefined;
        subTitleClassName?: string | undefined;
        avatarTextStyle?: object | undefined;
        avatarTextClassName?: string | undefined;
        avatarClassName?: string | undefined;
        secondaryClassName?: string | undefined;
        imageClassName?: string | undefined;
        mediaPosition?: "left" | "right" | "bottom" | "top" | undefined;
        mediaActionPosition?: "outside" | undefined;
        subTitlePlaceholder?: string | JSX.Element | undefined;
        descriptionPlaceholder?: string | JSX.Element | undefined;
        avatarText?: string | JSX.Element | undefined;
        secondary?: string | JSX.Element | undefined;
    } & {
        className?: string | undefined;
        style?: {
            [propName: string]: any;
        } | undefined;
        classnames?: ClassNamesFn | undefined;
        classPrefix?: string | undefined;
        theme?: string | undefined;
        mobileUI?: boolean | undefined;
    } & import("packages/amis-core/lib/theme").ThemeOuterProps): {
        ref: any;
        childRef(ref: any): void;
        getWrappedInstance(): any;
        render(): React.JSX.Element;
        context: unknown;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Readonly<Pick<Omit<CardProps, keyof ThemeProps>, never> & {
            children?: React.ReactNode;
            data?: any;
            title?: string | JSX.Element | undefined;
            onClick?: ((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
            description?: string | JSX.Element | undefined;
            toolbar?: React.ReactNode;
            bodyClassName?: string | undefined;
            media?: React.ReactNode;
            titleClassName?: string | undefined;
            headerClassName?: string | undefined;
            actions?: React.ReactNode;
            subTitle?: string | JSX.Element | undefined;
            footerClassName?: string | undefined;
            descriptionClassName?: string | undefined;
            avatar?: string | undefined;
            subTitleClassName?: string | undefined;
            avatarTextStyle?: object | undefined;
            avatarTextClassName?: string | undefined;
            avatarClassName?: string | undefined;
            secondaryClassName?: string | undefined;
            imageClassName?: string | undefined;
            mediaPosition?: "left" | "right" | "bottom" | "top" | undefined;
            mediaActionPosition?: "outside" | undefined;
            subTitlePlaceholder?: string | JSX.Element | undefined;
            descriptionPlaceholder?: string | JSX.Element | undefined;
            avatarText?: string | JSX.Element | undefined;
            secondary?: string | JSX.Element | undefined;
        } & {
            className?: string | undefined;
            style?: {
                [propName: string]: any;
            } | undefined;
            classnames?: ClassNamesFn | undefined;
            classPrefix?: string | undefined;
            theme?: string | undefined;
            mobileUI?: boolean | undefined;
        } & import("packages/amis-core/lib/theme").ThemeOuterProps>) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<Pick<Omit<CardProps, keyof ThemeProps>, never> & {
            children?: React.ReactNode;
            data?: any;
            title?: string | JSX.Element | undefined;
            onClick?: ((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
            description?: string | JSX.Element | undefined;
            toolbar?: React.ReactNode;
            bodyClassName?: string | undefined;
            media?: React.ReactNode;
            titleClassName?: string | undefined;
            headerClassName?: string | undefined;
            actions?: React.ReactNode;
            subTitle?: string | JSX.Element | undefined;
            footerClassName?: string | undefined;
            descriptionClassName?: string | undefined;
            avatar?: string | undefined;
            subTitleClassName?: string | undefined;
            avatarTextStyle?: object | undefined;
            avatarTextClassName?: string | undefined;
            avatarClassName?: string | undefined;
            secondaryClassName?: string | undefined;
            imageClassName?: string | undefined;
            mediaPosition?: "left" | "right" | "bottom" | "top" | undefined;
            mediaActionPosition?: "outside" | undefined;
            subTitlePlaceholder?: string | JSX.Element | undefined;
            descriptionPlaceholder?: string | JSX.Element | undefined;
            avatarText?: string | JSX.Element | undefined;
            secondary?: string | JSX.Element | undefined;
        } & {
            className?: string | undefined;
            style?: {
                [propName: string]: any;
            } | undefined;
            classnames?: ClassNamesFn | undefined;
            classPrefix?: string | undefined;
            theme?: string | undefined;
            mobileUI?: boolean | undefined;
        } & import("packages/amis-core/lib/theme").ThemeOuterProps>;
        state: Readonly<{}>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<Pick<Omit<CardProps, keyof ThemeProps>, never> & {
            children?: React.ReactNode;
            data?: any;
            title?: string | JSX.Element | undefined;
            onClick?: ((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
            description?: string | JSX.Element | undefined;
            toolbar?: React.ReactNode;
            bodyClassName?: string | undefined;
            media?: React.ReactNode;
            titleClassName?: string | undefined;
            headerClassName?: string | undefined;
            actions?: React.ReactNode;
            subTitle?: string | JSX.Element | undefined;
            footerClassName?: string | undefined;
            descriptionClassName?: string | undefined;
            avatar?: string | undefined;
            subTitleClassName?: string | undefined;
            avatarTextStyle?: object | undefined;
            avatarTextClassName?: string | undefined;
            avatarClassName?: string | undefined;
            secondaryClassName?: string | undefined;
            imageClassName?: string | undefined;
            mediaPosition?: "left" | "right" | "bottom" | "top" | undefined;
            mediaActionPosition?: "outside" | undefined;
            subTitlePlaceholder?: string | JSX.Element | undefined;
            descriptionPlaceholder?: string | JSX.Element | undefined;
            avatarText?: string | JSX.Element | undefined;
            secondary?: string | JSX.Element | undefined;
        } & {
            className?: string | undefined;
            style?: {
                [propName: string]: any;
            } | undefined;
            classnames?: ClassNamesFn | undefined;
            classPrefix?: string | undefined;
            theme?: string | undefined;
            mobileUI?: boolean | undefined;
        } & import("packages/amis-core/lib/theme").ThemeOuterProps>, nextState: Readonly<{}>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<Pick<Omit<CardProps, keyof ThemeProps>, never> & {
            children?: React.ReactNode;
            data?: any;
            title?: string | JSX.Element | undefined;
            onClick?: ((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
            description?: string | JSX.Element | undefined;
            toolbar?: React.ReactNode;
            bodyClassName?: string | undefined;
            media?: React.ReactNode;
            titleClassName?: string | undefined;
            headerClassName?: string | undefined;
            actions?: React.ReactNode;
            subTitle?: string | JSX.Element | undefined;
            footerClassName?: string | undefined;
            descriptionClassName?: string | undefined;
            avatar?: string | undefined;
            subTitleClassName?: string | undefined;
            avatarTextStyle?: object | undefined;
            avatarTextClassName?: string | undefined;
            avatarClassName?: string | undefined;
            secondaryClassName?: string | undefined;
            imageClassName?: string | undefined;
            mediaPosition?: "left" | "right" | "bottom" | "top" | undefined;
            mediaActionPosition?: "outside" | undefined;
            subTitlePlaceholder?: string | JSX.Element | undefined;
            descriptionPlaceholder?: string | JSX.Element | undefined;
            avatarText?: string | JSX.Element | undefined;
            secondary?: string | JSX.Element | undefined;
        } & {
            className?: string | undefined;
            style?: {
                [propName: string]: any;
            } | undefined;
            classnames?: ClassNamesFn | undefined;
            classPrefix?: string | undefined;
            theme?: string | undefined;
            mobileUI?: boolean | undefined;
        } & import("packages/amis-core/lib/theme").ThemeOuterProps>, prevState: Readonly<{}>): any;
        componentDidUpdate?(prevProps: Readonly<Pick<Omit<CardProps, keyof ThemeProps>, never> & {
            children?: React.ReactNode;
            data?: any;
            title?: string | JSX.Element | undefined;
            onClick?: ((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
            description?: string | JSX.Element | undefined;
            toolbar?: React.ReactNode;
            bodyClassName?: string | undefined;
            media?: React.ReactNode;
            titleClassName?: string | undefined;
            headerClassName?: string | undefined;
            actions?: React.ReactNode;
            subTitle?: string | JSX.Element | undefined;
            footerClassName?: string | undefined;
            descriptionClassName?: string | undefined;
            avatar?: string | undefined;
            subTitleClassName?: string | undefined;
            avatarTextStyle?: object | undefined;
            avatarTextClassName?: string | undefined;
            avatarClassName?: string | undefined;
            secondaryClassName?: string | undefined;
            imageClassName?: string | undefined;
            mediaPosition?: "left" | "right" | "bottom" | "top" | undefined;
            mediaActionPosition?: "outside" | undefined;
            subTitlePlaceholder?: string | JSX.Element | undefined;
            descriptionPlaceholder?: string | JSX.Element | undefined;
            avatarText?: string | JSX.Element | undefined;
            secondary?: string | JSX.Element | undefined;
        } & {
            className?: string | undefined;
            style?: {
                [propName: string]: any;
            } | undefined;
            classnames?: ClassNamesFn | undefined;
            classPrefix?: string | undefined;
            theme?: string | undefined;
            mobileUI?: boolean | undefined;
        } & import("packages/amis-core/lib/theme").ThemeOuterProps>, prevState: Readonly<{}>, snapshot?: any): void;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<Pick<Omit<CardProps, keyof ThemeProps>, never> & {
            children?: React.ReactNode;
            data?: any;
            title?: string | JSX.Element | undefined;
            onClick?: ((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
            description?: string | JSX.Element | undefined;
            toolbar?: React.ReactNode;
            bodyClassName?: string | undefined;
            media?: React.ReactNode;
            titleClassName?: string | undefined;
            headerClassName?: string | undefined;
            actions?: React.ReactNode;
            subTitle?: string | JSX.Element | undefined;
            footerClassName?: string | undefined;
            descriptionClassName?: string | undefined;
            avatar?: string | undefined;
            subTitleClassName?: string | undefined;
            avatarTextStyle?: object | undefined;
            avatarTextClassName?: string | undefined;
            avatarClassName?: string | undefined;
            secondaryClassName?: string | undefined;
            imageClassName?: string | undefined;
            mediaPosition?: "left" | "right" | "bottom" | "top" | undefined;
            mediaActionPosition?: "outside" | undefined;
            subTitlePlaceholder?: string | JSX.Element | undefined;
            descriptionPlaceholder?: string | JSX.Element | undefined;
            avatarText?: string | JSX.Element | undefined;
            secondary?: string | JSX.Element | undefined;
        } & {
            className?: string | undefined;
            style?: {
                [propName: string]: any;
            } | undefined;
            classnames?: ClassNamesFn | undefined;
            classPrefix?: string | undefined;
            theme?: string | undefined;
            mobileUI?: boolean | undefined;
        } & import("packages/amis-core/lib/theme").ThemeOuterProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<Pick<Omit<CardProps, keyof ThemeProps>, never> & {
            children?: React.ReactNode;
            data?: any;
            title?: string | JSX.Element | undefined;
            onClick?: ((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
            description?: string | JSX.Element | undefined;
            toolbar?: React.ReactNode;
            bodyClassName?: string | undefined;
            media?: React.ReactNode;
            titleClassName?: string | undefined;
            headerClassName?: string | undefined;
            actions?: React.ReactNode;
            subTitle?: string | JSX.Element | undefined;
            footerClassName?: string | undefined;
            descriptionClassName?: string | undefined;
            avatar?: string | undefined;
            subTitleClassName?: string | undefined;
            avatarTextStyle?: object | undefined;
            avatarTextClassName?: string | undefined;
            avatarClassName?: string | undefined;
            secondaryClassName?: string | undefined;
            imageClassName?: string | undefined;
            mediaPosition?: "left" | "right" | "bottom" | "top" | undefined;
            mediaActionPosition?: "outside" | undefined;
            subTitlePlaceholder?: string | JSX.Element | undefined;
            descriptionPlaceholder?: string | JSX.Element | undefined;
            avatarText?: string | JSX.Element | undefined;
            secondary?: string | JSX.Element | undefined;
        } & {
            className?: string | undefined;
            style?: {
                [propName: string]: any;
            } | undefined;
            classnames?: ClassNamesFn | undefined;
            classPrefix?: string | undefined;
            theme?: string | undefined;
            mobileUI?: boolean | undefined;
        } & import("packages/amis-core/lib/theme").ThemeOuterProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<Pick<Omit<CardProps, keyof ThemeProps>, never> & {
            children?: React.ReactNode;
            data?: any;
            title?: string | JSX.Element | undefined;
            onClick?: ((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
            description?: string | JSX.Element | undefined;
            toolbar?: React.ReactNode;
            bodyClassName?: string | undefined;
            media?: React.ReactNode;
            titleClassName?: string | undefined;
            headerClassName?: string | undefined;
            actions?: React.ReactNode;
            subTitle?: string | JSX.Element | undefined;
            footerClassName?: string | undefined;
            descriptionClassName?: string | undefined;
            avatar?: string | undefined;
            subTitleClassName?: string | undefined;
            avatarTextStyle?: object | undefined;
            avatarTextClassName?: string | undefined;
            avatarClassName?: string | undefined;
            secondaryClassName?: string | undefined;
            imageClassName?: string | undefined;
            mediaPosition?: "left" | "right" | "bottom" | "top" | undefined;
            mediaActionPosition?: "outside" | undefined;
            subTitlePlaceholder?: string | JSX.Element | undefined;
            descriptionPlaceholder?: string | JSX.Element | undefined;
            avatarText?: string | JSX.Element | undefined;
            secondary?: string | JSX.Element | undefined;
        } & {
            className?: string | undefined;
            style?: {
                [propName: string]: any;
            } | undefined;
            classnames?: ClassNamesFn | undefined;
            classPrefix?: string | undefined;
            theme?: string | undefined;
            mobileUI?: boolean | undefined;
        } & import("packages/amis-core/lib/theme").ThemeOuterProps>, nextState: Readonly<{}>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<Pick<Omit<CardProps, keyof ThemeProps>, never> & {
            children?: React.ReactNode;
            data?: any;
            title?: string | JSX.Element | undefined;
            onClick?: ((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | undefined;
            description?: string | JSX.Element | undefined;
            toolbar?: React.ReactNode;
            bodyClassName?: string | undefined;
            media?: React.ReactNode;
            titleClassName?: string | undefined;
            headerClassName?: string | undefined;
            actions?: React.ReactNode;
            subTitle?: string | JSX.Element | undefined;
            footerClassName?: string | undefined;
            descriptionClassName?: string | undefined;
            avatar?: string | undefined;
            subTitleClassName?: string | undefined;
            avatarTextStyle?: object | undefined;
            avatarTextClassName?: string | undefined;
            avatarClassName?: string | undefined;
            secondaryClassName?: string | undefined;
            imageClassName?: string | undefined;
            mediaPosition?: "left" | "right" | "bottom" | "top" | undefined;
            mediaActionPosition?: "outside" | undefined;
            subTitlePlaceholder?: string | JSX.Element | undefined;
            descriptionPlaceholder?: string | JSX.Element | undefined;
            avatarText?: string | JSX.Element | undefined;
            secondary?: string | JSX.Element | undefined;
        } & {
            className?: string | undefined;
            style?: {
                [propName: string]: any;
            } | undefined;
            classnames?: ClassNamesFn | undefined;
            classPrefix?: string | undefined;
            theme?: string | undefined;
            mobileUI?: boolean | undefined;
        } & import("packages/amis-core/lib/theme").ThemeOuterProps>, nextState: Readonly<{}>, nextContext: any): void;
    };
    displayName: string;
    contextType: React.Context<string>;
    ComposedComponent: React.ComponentType<typeof Card>;
} & import("hoist-non-react-statics").NonReactStatics<typeof Card, {}> & {
    ComposedComponent: typeof Card;
};
export default _default;
