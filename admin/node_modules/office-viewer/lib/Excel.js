'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var get = require('./util/get.js');
var ZipPackageParser = require('./package/ZipPackageParser.js');
var parseExcel = require('./excel/io/parseExcel.js');
var Workbook = require('./excel/Workbook.js');
var LocalDataProvider = require('./excel/data/LocalDataProvider.js');
var print = require('./util/print.js');
var emptyXLSX = require('./excel/io/csv/emptyXLSX.js');
var arrayBufferToString = require('./util/arrayBufferToString.js');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

/**
 * Excel 渲染主入口
 */
/**
 * 默认渲染配置项
 */
var defaultRenderOptions = {
    data: {},
    evalVar: function (path, data) {
        return get.get(data, path);
    },
    useWorker: false,
    height: 500,
    gridLineColor: '#D4D4D4',
    gridLineWidth: 1,
    dragGridLineColor: '#5D5D5D',
    frozenLineColor: '#00A92F',
    gridLineHitRange: 4,
    showRowColHeaders: true,
    rowColHeadersColor: '#575757',
    rowColHeadersBackgroundColor: '#F5F5F5',
    rowColHeadersLineColor: '#E3E2E2',
    hiddenRowColHeadersColor: '#575757',
    hiddenRowColHeadersLineColor: '#217346',
    hiddenRowColHeadersLineSize: 3,
    // 选区的配置
    selectionBorderColor: '#005500',
    selectionSquareSize: 4,
    selectionBackgroundColor: '#00B683',
    selectionBackgroundOpacity: 0.2,
    // 大概 2 个数字的宽度
    indentSize: 15.845,
    backgroundColor: '#F5F5F5',
    cellBackgroundColor: '#FFFFFF',
    showFormulaBar: true,
    showSheetTabBar: true,
    locale: 'zh-CN',
    // 默认嵌入模式
    embed: true,
    editable: false,
    fontURL: {}
};
var Excel = /** @class */ (function () {
    function Excel(docFile, fileName, renderOptions, parser) {
        if (parser === void 0) { parser = new ZipPackageParser["default"](); }
        // 后续优化一下
        this.loaded = false;
        this.id = Excel.globalId++;
        this.parser = parser;
        this.docFile = docFile;
        this.fileName = fileName;
        this.updateOptions(renderOptions || {});
    }
    Excel.prototype.updateOptions = function (options) {
        this.renderOptions = tslib.__assign(tslib.__assign({}, defaultRenderOptions), options);
    };
    /**
     * 加载 Excel 文件
     */
    Excel.prototype.loadExcel = function () {
        return tslib.__awaiter(this, void 0, void 0, function () {
            var startParse, _a;
            return tslib.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this.loaded) {
                            return [2 /*return*/];
                        }
                        this.parser.load(this.docFile);
                        startParse = performance.now();
                        _a = this;
                        return [4 /*yield*/, parseExcel.parseExcel(this.parser)];
                    case 1:
                        _a.excelFile = _b.sent();
                        if (this.renderOptions.debug) {
                            console.log('parse time', performance.now() - startParse, 'ms');
                            console.log('excelFile', this.excelFile);
                        }
                        this.loaded = true;
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * 加载 CSV 文件
     */
    Excel.prototype.loadCSV = function (fileExt) {
        return tslib.__awaiter(this, void 0, void 0, function () {
            var _a, papaparse, result;
            return tslib.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this.loaded) {
                            return [2 /*return*/];
                        }
                        // 目前 csv 的实现复用了 xlsx 的解析
                        this.parser.load(emptyXLSX.emptyXLSX);
                        _a = this;
                        return [4 /*yield*/, parseExcel.parseExcel(this.parser)];
                    case 1:
                        _a.excelFile = _b.sent();
                        return [4 /*yield*/, Promise.resolve().then(function () { return /*#__PURE__*/_interopNamespace(require('papaparse')); })];
                    case 2:
                        papaparse = _b.sent();
                        result = papaparse.parse(arrayBufferToString.arrayBufferToString(this.docFile), {
                            delimiter: fileExt === 'csv' ? ',' : '\t'
                        });
                        this.excelFile.workbook.sheets[0].worksheet.cellData =
                            result.data;
                        if (this.fileName) {
                            this.excelFile.workbook.sheets[0].name = this.fileName.split('/').pop();
                        }
                        this.loaded = true;
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Excel 渲染入口
     * @param root 渲染根节点
     * @param renderOptionsOverride 临时覆盖某些渲选项
     */
    Excel.prototype.render = function (root, renderOptionsOverride) {
        if (renderOptionsOverride === void 0) { renderOptionsOverride = {}; }
        return tslib.__awaiter(this, void 0, void 0, function () {
            var renderOptions, height, workbookData, workbook;
            return tslib.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.rootElement = root;
                        root.innerHTML = '';
                        renderOptions = tslib.__assign(tslib.__assign({}, this.renderOptions), renderOptionsOverride);
                        root.style.position = 'relative';
                        height = root.getBoundingClientRect().height;
                        if (height === 0) {
                            height = renderOptions.height;
                            root.style.height = height + 'px';
                        }
                        if (!this.excelFile) {
                            console.warn('excel file not loaded');
                            return [2 /*return*/];
                        }
                        workbookData = this.excelFile.workbook;
                        workbook = new Workbook.Workbook(root, workbookData, new LocalDataProvider.LocalDataProvider(workbookData, renderOptions), renderOptions);
                        return [4 /*yield*/, workbook.render()];
                    case 1:
                        _a.sent();
                        this.workbook = workbook;
                        return [2 /*return*/];
                }
            });
        });
    };
    Excel.prototype.download = function (fileName) {
        return tslib.__awaiter(this, void 0, void 0, function () {
            return tslib.__generator(this, function (_a) {
                throw new Error('must implement this method');
            });
        });
    };
    Excel.prototype.destroy = function () {
        if (this.workbook) {
            this.workbook.destroy();
        }
    };
    Excel.prototype.print = function () {
        return tslib.__awaiter(this, void 0, void 0, function () {
            var iframe, printDocument;
            return tslib.__generator(this, function (_a) {
                if (!this.workbook) {
                    return [2 /*return*/];
                }
                iframe = document.createElement('iframe');
                iframe.style.position = 'absolute';
                iframe.style.top = '-10000px';
                document.body.appendChild(iframe);
                printDocument = iframe.contentDocument;
                if (!printDocument) {
                    console.warn('printDocument is null');
                    return [2 /*return*/];
                }
                this.workbook.renderInIframe(iframe);
                setTimeout(function () {
                    iframe.focus();
                    print.printIframe(iframe);
                }, this.renderOptions.printWaitTime || 100); // 需要等一下图片渲染
                window.focus();
                return [2 /*return*/];
            });
        });
    };
    Excel.prototype.getWorkbook = function () {
        return this.workbook;
    };
    Excel.prototype.updateVariable = function () { };
    /**
     * 全局 id，用于一个页面渲染多个文档
     */
    Excel.globalId = 0;
    return Excel;
}());

exports["default"] = Excel;
