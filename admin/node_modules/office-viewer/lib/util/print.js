'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');

function loadIframeImages(images) {
    var _this = this;
    var promises = images.map(function (image) { return tslib.__awaiter(_this, void 0, void 0, function () {
        return tslib.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!(image.src && image.src !== window.location.href)) return [3 /*break*/, 2];
                    return [4 /*yield*/, loadIframeImage(image)];
                case 1:
                    _a.sent();
                    _a.label = 2;
                case 2: return [2 /*return*/];
            }
        });
    }); });
    return Promise.all(promises);
}
function loadIframeImage(image) {
    return new Promise(function (resolve) {
        var pollImage = function () {
            !image ||
                typeof image.naturalWidth === 'undefined' ||
                image.naturalWidth === 0 ||
                !image.complete
                ? setTimeout(pollImage, 500)
                : resolve();
        };
        pollImage();
    });
}
function performPrint(iframe) {
    var _a, _b;
    (_a = iframe.contentWindow) === null || _a === void 0 ? void 0 : _a.print();
    (_b = iframe.parentNode) === null || _b === void 0 ? void 0 : _b.removeChild(iframe);
}
/**
 * 打印 iframe，参考了 print.js 里的部分实现
 * @param iframe
 */
function printIframe(iframe) {
    var printDocument = iframe.contentDocument;
    // If printing images, wait for them to load inside the iframe
    var images = printDocument.getElementsByTagName('img');
    if (images.length > 0) {
        loadIframeImages(Array.from(images)).then(function () { return performPrint(iframe); });
    }
    else {
        performPrint(iframe);
    }
}

exports.printIframe = printIframe;
