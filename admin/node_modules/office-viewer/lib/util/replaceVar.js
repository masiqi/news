'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var Pic = require('../openxml/drawing/Pic.js');
var createObject = require('./createObject.js');

/**
 * 执行变量替换，和普通变量不同，这个支持数组，但因为是提前执行好的，没法再动态生效了
 * 为了避免 word 里不必要的标签要先执行 mergeRun
 */
/**
 * 替换单个文本变量
 */
function replaceT(word, t, data) {
    var text = t.textContent || '';
    t.textContent = replaceText(word, text, data);
}
/**
 * 替换变量文本
 */
function replaceText(word, text, data) {
    var evalVar = word.renderOptions.evalVar;
    if (text.startsWith('{{')) {
        text = text.replace(/^{{/g, '').replace(/}}$/g, '');
        var result = evalVar(text, data);
        if (result !== undefined && result !== null) {
            return String(result);
        }
        else {
            console.warn('var error: [', text, '] not found in data');
            return '';
        }
    }
    return text;
}
// 生成的新 id
var newRelId = 1;
/**
 * 替换图片里的变量
 * @param replaceImage 如果为 true，则会实际替换掉 zip 里的图片，但可能影响性能所以默认不开启，只有下载的时候才开启
 */
function replaceAlt(word, cNvPr, data, replaceImage) {
    if (replaceImage === void 0) { replaceImage = false; }
    return tslib.__awaiter(this, void 0, void 0, function () {
        var alt, imageURL, parentElement, blip, newId, imageResponse, imageData, pic, blip_1;
        return tslib.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (cNvPr.getAttribute('downloaded')) {
                        // 已经替换过了
                        return [2 /*return*/];
                    }
                    alt = cNvPr.getAttribute('descr') || '';
                    imageURL = replaceText(word, alt, data);
                    cNvPr.setAttribute('descrVar', imageURL);
                    if (!(replaceImage && imageURL)) return [3 /*break*/, 4];
                    parentElement = cNvPr.parentElement.parentElement;
                    blip = parentElement.getElementsByTagName('a:blip').item(0);
                    if (!blip) return [3 /*break*/, 3];
                    newId = "rIdn".concat(newRelId);
                    blip.setAttribute('r:embed', newId);
                    return [4 /*yield*/, fetch(imageURL)];
                case 1:
                    imageResponse = _a.sent();
                    return [4 /*yield*/, imageResponse.arrayBuffer()];
                case 2:
                    imageData = _a.sent();
                    word.saveNewImage(newId, new Uint8Array(imageData));
                    cNvPr.setAttribute('downloaded', 'true');
                    newRelId++;
                    _a.label = 3;
                case 3:
                    pic = Pic.Pic.fromXML(word, parentElement);
                    if (pic && pic.blipFill && pic.blipFill.blip) {
                        blip_1 = pic.blipFill.blip;
                        if (blip_1.embled) ;
                    }
                    _a.label = 4;
                case 4: return [2 /*return*/];
            }
        });
    });
}
/**
 * 替换表格行
 */
function replaceTableRow(word, tr, replaceImage) {
    if (replaceImage === void 0) { replaceImage = false; }
    return tslib.__awaiter(this, void 0, void 0, function () {
        var evalVar, data, table, tcs, hasLoop, loopArray, tcs_1, tcs_1_1, tc, ts, ts_1, ts_1_1, t, text, arrayNameMatch, arrayMatchResult, arrayName, array, loopArray_1, loopArray_1_1, item, newTr, ts, rowData, ts_2, ts_2_1, t, _a, _b, cNvPr, e_1_1, e_2_1;
        var e_3, _c, e_4, _d, e_2, _e, e_5, _f, e_1, _g;
        return tslib.__generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    evalVar = word.renderOptions.evalVar;
                    data = word.renderOptions.data;
                    table = tr.parentNode;
                    tcs = tr.getElementsByTagName('w:tc');
                    hasLoop = false;
                    loopArray = [];
                    try {
                        // 查找对应的循环
                        for (tcs_1 = tslib.__values(tcs), tcs_1_1 = tcs_1.next(); !tcs_1_1.done; tcs_1_1 = tcs_1.next()) {
                            tc = tcs_1_1.value;
                            ts = tc.getElementsByTagName('w:t');
                            try {
                                for (ts_1 = (e_4 = void 0, tslib.__values(ts)), ts_1_1 = ts_1.next(); !ts_1_1.done; ts_1_1 = ts_1.next()) {
                                    t = ts_1_1.value;
                                    text = t.textContent || '';
                                    if (text.startsWith('{{#')) {
                                        arrayNameMatch = /{{#([^\}]+)}}/;
                                        arrayMatchResult = arrayNameMatch.exec(text);
                                        if (arrayMatchResult && arrayMatchResult.length > 0) {
                                            hasLoop = true;
                                            arrayName = arrayMatchResult[1];
                                            array = evalVar(arrayName, data);
                                            if (Array.isArray(array)) {
                                                loopArray = array;
                                            }
                                            // 去掉这个循环变量
                                            t.textContent = t.textContent.replace("{{#".concat(arrayName, "}}"), '');
                                        }
                                    }
                                    if (text.indexOf('{{/}}') !== -1) {
                                        // 去掉结束变量
                                        t.textContent = t.textContent.replace('{{/}}', '');
                                    }
                                }
                            }
                            catch (e_4_1) { e_4 = { error: e_4_1 }; }
                            finally {
                                try {
                                    if (ts_1_1 && !ts_1_1.done && (_d = ts_1.return)) _d.call(ts_1);
                                }
                                finally { if (e_4) throw e_4.error; }
                            }
                        }
                    }
                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                    finally {
                        try {
                            if (tcs_1_1 && !tcs_1_1.done && (_c = tcs_1.return)) _c.call(tcs_1);
                        }
                        finally { if (e_3) throw e_3.error; }
                    }
                    if (!hasLoop) return [3 /*break*/, 16];
                    _h.label = 1;
                case 1:
                    _h.trys.push([1, 13, 14, 15]);
                    loopArray_1 = tslib.__values(loopArray), loopArray_1_1 = loopArray_1.next();
                    _h.label = 2;
                case 2:
                    if (!!loopArray_1_1.done) return [3 /*break*/, 12];
                    item = loopArray_1_1.value;
                    newTr = cloneTr(tr);
                    ts = newTr.getElementsByTagName('w:t');
                    rowData = createObject.createObject(data, item);
                    try {
                        for (ts_2 = (e_5 = void 0, tslib.__values(ts)), ts_2_1 = ts_2.next(); !ts_2_1.done; ts_2_1 = ts_2.next()) {
                            t = ts_2_1.value;
                            replaceT(word, t, rowData);
                        }
                    }
                    catch (e_5_1) { e_5 = { error: e_5_1 }; }
                    finally {
                        try {
                            if (ts_2_1 && !ts_2_1.done && (_f = ts_2.return)) _f.call(ts_2);
                        }
                        finally { if (e_5) throw e_5.error; }
                    }
                    _h.label = 3;
                case 3:
                    _h.trys.push([3, 8, 9, 10]);
                    _a = (e_1 = void 0, tslib.__values(newTr.getElementsByTagName('pic:cNvPr'))), _b = _a.next();
                    _h.label = 4;
                case 4:
                    if (!!_b.done) return [3 /*break*/, 7];
                    cNvPr = _b.value;
                    return [4 /*yield*/, replaceAlt(word, cNvPr, rowData, replaceImage)];
                case 5:
                    _h.sent();
                    _h.label = 6;
                case 6:
                    _b = _a.next();
                    return [3 /*break*/, 4];
                case 7: return [3 /*break*/, 10];
                case 8:
                    e_1_1 = _h.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 10];
                case 9:
                    try {
                        if (_b && !_b.done && (_g = _a.return)) _g.call(_a);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 10:
                    table.insertBefore(newTr, tr);
                    _h.label = 11;
                case 11:
                    loopArray_1_1 = loopArray_1.next();
                    return [3 /*break*/, 2];
                case 12: return [3 /*break*/, 15];
                case 13:
                    e_2_1 = _h.sent();
                    e_2 = { error: e_2_1 };
                    return [3 /*break*/, 15];
                case 14:
                    try {
                        if (loopArray_1_1 && !loopArray_1_1.done && (_e = loopArray_1.return)) _e.call(loopArray_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                    return [7 /*endfinally*/];
                case 15:
                    // 删除原来的行
                    table.removeChild(tr);
                    _h.label = 16;
                case 16: return [2 /*return*/];
            }
        });
    });
}
/**
 * 克隆行，并进行一些清理
 */
function cloneTr(tr) {
    var e_6, _a, e_7, _b;
    var _c;
    var newTr = tr.cloneNode(true);
    // 去掉 tr 里的属性，感觉可能会有问题
    removeAllAttr(newTr);
    var ps = [].slice.call(newTr.getElementsByTagName('w:p'));
    try {
        for (var ps_1 = tslib.__values(ps), ps_1_1 = ps_1.next(); !ps_1_1.done; ps_1_1 = ps_1.next()) {
            var p = ps_1_1.value;
            removeAllAttr(p);
        }
    }
    catch (e_6_1) { e_6 = { error: e_6_1 }; }
    finally {
        try {
            if (ps_1_1 && !ps_1_1.done && (_a = ps_1.return)) _a.call(ps_1);
        }
        finally { if (e_6) throw e_6.error; }
    }
    // cnfStyles 基本上都是错的所以删了
    var cnfStyles = [].slice.call(newTr.getElementsByTagName('w:cnfStyle'));
    try {
        for (var cnfStyles_1 = tslib.__values(cnfStyles), cnfStyles_1_1 = cnfStyles_1.next(); !cnfStyles_1_1.done; cnfStyles_1_1 = cnfStyles_1.next()) {
            var cnfStyle = cnfStyles_1_1.value;
            (_c = cnfStyle.parentElement) === null || _c === void 0 ? void 0 : _c.removeChild(cnfStyle);
        }
    }
    catch (e_7_1) { e_7 = { error: e_7_1 }; }
    finally {
        try {
            if (cnfStyles_1_1 && !cnfStyles_1_1.done && (_b = cnfStyles_1.return)) _b.call(cnfStyles_1);
        }
        finally { if (e_7) throw e_7.error; }
    }
    return newTr;
}
/**
 * 删掉所有属性，虽然不知道为啥有些不生效
 */
function removeAllAttr(node) {
    while (node.attributes.length > 0) {
        node.removeAttributeNode(node.attributes[0]);
    }
}
/**
 * 替换表格，目前只支持行
 */
function replaceTable(word, documentData, replaceImage) {
    if (replaceImage === void 0) { replaceImage = false; }
    return tslib.__awaiter(this, void 0, void 0, function () {
        var trs, trs_1, trs_1_1, tr, e_8_1;
        var e_8, _a;
        return tslib.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    trs = [].slice.call(documentData.getElementsByTagName('w:tr'));
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 6, 7, 8]);
                    trs_1 = tslib.__values(trs), trs_1_1 = trs_1.next();
                    _b.label = 2;
                case 2:
                    if (!!trs_1_1.done) return [3 /*break*/, 5];
                    tr = trs_1_1.value;
                    return [4 /*yield*/, replaceTableRow(word, tr, replaceImage)];
                case 3:
                    _b.sent();
                    _b.label = 4;
                case 4:
                    trs_1_1 = trs_1.next();
                    return [3 /*break*/, 2];
                case 5: return [3 /*break*/, 8];
                case 6:
                    e_8_1 = _b.sent();
                    e_8 = { error: e_8_1 };
                    return [3 /*break*/, 8];
                case 7:
                    try {
                        if (trs_1_1 && !trs_1_1.done && (_a = trs_1.return)) _a.call(trs_1);
                    }
                    finally { if (e_8) throw e_8.error; }
                    return [7 /*endfinally*/];
                case 8: return [2 /*return*/];
            }
        });
    });
}
/**
 * 替换单个图片，必须是不在表格里的
 * @param word
 * @param documentData
 */
function replaceSingleImage(word, documentData) {
    return tslib.__awaiter(this, void 0, void 0, function () {
        var _a, _b, cNvPr, e_9_1;
        var e_9, _c;
        return tslib.__generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    _d.trys.push([0, 5, 6, 7]);
                    _a = tslib.__values(documentData.getElementsByTagName('pic:cNvPr')), _b = _a.next();
                    _d.label = 1;
                case 1:
                    if (!!_b.done) return [3 /*break*/, 4];
                    cNvPr = _b.value;
                    return [4 /*yield*/, replaceAlt(word, cNvPr, word.renderOptions.data, true)];
                case 2:
                    _d.sent();
                    _d.label = 3;
                case 3:
                    _b = _a.next();
                    return [3 /*break*/, 1];
                case 4: return [3 /*break*/, 7];
                case 5:
                    e_9_1 = _d.sent();
                    e_9 = { error: e_9_1 };
                    return [3 /*break*/, 7];
                case 6:
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    }
                    finally { if (e_9) throw e_9.error; }
                    return [7 /*endfinally*/];
                case 7: return [2 /*return*/];
            }
        });
    });
}
/**
 * 变量替换主入口
 * @param word
 * @param documentData
 * @param replaceImage 是否替换掉图片，只有下载时才替换，避免性能问题
 */
function replaceVar(word, documentData, replaceImage) {
    if (replaceImage === void 0) { replaceImage = false; }
    return tslib.__awaiter(this, void 0, void 0, function () {
        return tslib.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, replaceTable(word, documentData, replaceImage)];
                case 1:
                    _a.sent();
                    if (!replaceImage) return [3 /*break*/, 3];
                    return [4 /*yield*/, replaceSingleImage(word, documentData)];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3: return [2 /*return*/];
            }
        });
    });
}

exports.replaceT = replaceT;
exports.replaceVar = replaceVar;
