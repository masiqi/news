'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var isObject = require('./isObject.js');

/**
 * 创建 DOM 的小工具
 * @param tagName 标签名
 * @param attrs 属性
 * @returns 创建的 dom
 */
function isNode(el) {
    return el && el.nodeName && el.nodeType;
}
function H(tagName, attrs) {
    var e_1, _a;
    var children = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        children[_i - 2] = arguments[_i];
    }
    var element = document.createElement(tagName);
    for (var key in attrs) {
        if (Object.prototype.hasOwnProperty.call(attrs, key)) {
            var value = attrs[key];
            if (key === 'className') {
                element.setAttribute('class', value);
            }
            else if (key === 'style') {
                if (isObject.isObject(value)) {
                    for (var styleName in value) {
                        var styleValue = value[styleName];
                        element.style.setProperty(styleName, styleValue);
                    }
                }
            }
            else if (key === 'innerText') {
                element.innerText = value;
            }
            else if (key === 'innerHTML') {
                element.innerHTML = value;
            }
            else if (key === 'parent') {
                value.appendChild(element);
            }
            else if (key.startsWith('on') && typeof value === 'function') {
                element.addEventListener(key.slice(2), value);
            }
            else {
                element.setAttribute(key, value);
            }
        }
    }
    try {
        for (var children_1 = tslib.__values(children), children_1_1 = children_1.next(); !children_1_1.done; children_1_1 = children_1.next()) {
            var child = children_1_1.value;
            if (isNode(child)) {
                element.appendChild(child);
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (children_1_1 && !children_1_1.done && (_a = children_1.return)) _a.call(children_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return element;
}

exports.H = H;
