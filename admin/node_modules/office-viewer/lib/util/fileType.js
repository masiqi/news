'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');

/**
 * 自动识别文件类型，只支持少数几种，参考了 file-type 项目里的实现
 */
function check(buffer, headers, options) {
    var e_1, _a;
    if (options === void 0) { options = {}; }
    var offset = options.offset || 0;
    try {
        for (var _b = tslib.__values(headers.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
            var _d = tslib.__read(_c.value, 2), index = _d[0], header = _d[1];
            // If a bitmask is set
            if (options.mask) {
                // If header doesn't equal `buf` with bits masked off
                if (header !== (options.mask[index] & buffer[index + offset])) {
                    return false;
                }
            }
            else if (header !== buffer[index + offset]) {
                return false;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return true;
}
function stringToBytes(string) {
    return tslib.__spreadArray([], tslib.__read(string), false).map(function (character) { return character.charCodeAt(0); });
}
function checkString(buffer, string, options) {
    if (options === void 0) { options = {}; }
    return check(buffer, stringToBytes(string), options);
}
function fileTypeFromArrayBuffer(arrayBuffer) {
    return fileTypeFromBuffer(new Uint8Array(arrayBuffer.slice(0, 20)));
}
function fileTypeFromBuffer(buffer) {
    if (check(buffer, [0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a])) {
        return { ext: 'png', mime: 'image/png' };
    }
    if (check(buffer, [0xff, 0xd8, 0xff])) {
        return { ext: 'jpg', mime: 'image/jpeg' };
    }
    if (check(buffer, [0x47, 0x49, 0x46])) {
        return { ext: 'gif', mime: 'image/gif' };
    }
    if (check(buffer, [0x42, 0x4d])) {
        return { ext: 'bmp', mime: 'image/bmp' };
    }
    if (check(buffer, [0xc5, 0xd0, 0xd3, 0xc6])) {
        return { ext: 'eps', mime: 'application/eps' };
    }
    if (checkString(buffer, '8BPS')) {
        return { ext: 'psd', mime: 'image/vnd.adobe.photoshop' };
    }
    if (checkString(buffer, '%PDF')) {
        return { ext: 'pdf', mime: 'application/pdf' };
    }
    if (checkString(buffer, '<?xml ')) {
        return {
            ext: 'xml',
            mime: 'application/xml'
        };
    }
    if (check(buffer, [0xd0, 0xcf, 0x11, 0xe0, 0xa1, 0xb1, 0x1a, 0xe1])) {
        // Detected Microsoft Compound File Binary File (MS-CFB) Format.
        return {
            ext: 'cfb',
            mime: 'application/x-cfb'
        };
    }
    if (check(buffer, [0x50, 0x4b, 0x3, 0x4])) {
        return {
            ext: 'zip',
            mime: 'application/zip'
        };
    }
    return null;
}

exports.fileTypeFromArrayBuffer = fileTypeFromArrayBuffer;
exports.fileTypeFromBuffer = fileTypeFromBuffer;
