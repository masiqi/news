'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');

/**
 * 基于 tsee 删减了不需要的功能
 */
/** Implemented event emitter */
var EventEmitter = /** @class */ (function () {
    function EventEmitter() {
        var _this = this;
        this.debug = false;
        this.events = {};
        this.emit = function (event) {
            var e_1, _a;
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            if (_this.events[event]) {
                var len = _this.events[event].length;
                var events = Array.from(_this.events[event]);
                if (_this.debug) {
                    console.log.apply(console, tslib.__spreadArray(["EventEmitter: emit event ".concat(String(event))], tslib.__read(args), false));
                }
                try {
                    for (var events_1 = tslib.__values(events), events_1_1 = events_1.next(); !events_1_1.done; events_1_1 = events_1.next()) {
                        var e = events_1_1.value;
                        e.apply(void 0, tslib.__spreadArray([], tslib.__read(args), false));
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (events_1_1 && !events_1_1.done && (_a = events_1.return)) _a.call(events_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                return !!len;
            }
            return false;
        };
        this.on = function (event, listener) {
            _this.addListener(event, listener);
            return _this;
        };
        this.once = function (event, listener) {
            var onceListener = (function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                listener.apply(void 0, tslib.__spreadArray([], tslib.__read(args), false));
                _this.removeListener(event, onceListener);
            });
            _this.addListener(event, onceListener);
            return _this;
        };
        this.addListener = function (event, listener) {
            if (!(event in _this.events)) {
                _this.events[event] = [listener];
            }
            else {
                _this.events[event].push(listener);
            }
            return _this;
        };
        this.removeListener = function (event, listener) {
            if (event in _this.events) {
                var i = _this.events[event].indexOf(listener);
                if (i !== -1) {
                    _this.events[event].splice(i, 1);
                }
            }
            return _this;
        };
        this.prependListener = function (event, listener) {
            if (!(event in _this.events)) {
                _this.events[event] = [listener];
            }
            else {
                _this.events[event].unshift(listener);
            }
            return _this;
        };
        this.prependOnceListener = function (event, listener) {
            var onceListener = (function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                listener.apply(void 0, tslib.__spreadArray([], tslib.__read(args), false));
                _this.removeListener(event, onceListener);
            });
            _this.prependListener(event, onceListener);
            return _this;
        };
        this.off = function (event, listener) {
            return _this.removeListener(event, listener);
        };
        this.removeAllListeners = function (event) {
            if (event) {
                delete _this.events[event];
            }
            return _this;
        };
        if (window && window.OFFICE_VIEWER_DEBUG === true) {
            this.debug = true;
        }
    }
    return EventEmitter;
}());

exports.EventEmitter = EventEmitter;
