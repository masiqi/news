'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var OpenXML = require('../../OpenXML.js');
var color = require('../../util/color.js');
var parseSize = require('./parseSize.js');

// 处理颜色变化
// 20.1.2.3
function modifyColor(element, colorStr) {
    var e_1, _a;
    var color$1 = new color.Color(colorStr);
    if (color$1.isValid) {
        var alpha = 1;
        try {
            for (var _b = tslib.__values(element.children), _c = _b.next(); !_c.done; _c = _b.next()) {
                var child = _c.value;
                var tagName = child.tagName;
                switch (tagName) {
                    case 'a:alpha':
                    case 'w14:alpha':
                        alpha = OpenXML.getAttrPercent(child, 'val');
                        break;
                    case 'a:blue':
                        color$1.b = 256 * OpenXML.getAttrPercent(child, 'val');
                        break;
                    case 'a:blueMod':
                        color$1.b = color$1.b * OpenXML.getAttrPercent(child, 'val');
                        break;
                    case 'a:blueOff':
                        color$1.b += color$1.b * OpenXML.getAttrPercent(child, 'val');
                        break;
                    case 'a:comp':
                        color$1.comp();
                        break;
                    case 'a:green':
                        color$1.g = 256 * OpenXML.getAttrPercent(child, 'val');
                        break;
                    case 'a:greenMod':
                        color$1.g = color$1.g * OpenXML.getAttrPercent(child, 'val');
                        break;
                    case 'a:greenOff':
                        color$1.g += color$1.g * OpenXML.getAttrPercent(child, 'val');
                        break;
                    case 'a:red':
                        color$1.r = 256 * OpenXML.getAttrPercent(child, 'val');
                        break;
                    case 'a:redMod':
                        color$1.r = color$1.r * OpenXML.getAttrPercent(child, 'val');
                        break;
                    case 'a:redOff':
                        color$1.r += color$1.r * OpenXML.getAttrPercent(child, 'val');
                        break;
                    case 'a:lum':
                        color$1.lum(OpenXML.getAttrPercent(child, 'val'));
                        break;
                    case 'a:lumMod':
                        color$1.lumMod(OpenXML.getAttrPercent(child, 'val'));
                        break;
                    case 'a:lumOff':
                        color$1.lumOff(OpenXML.getAttrPercent(child, 'val'));
                        break;
                    case 'a:hue':
                        color$1.hue(parseSize.convertAngle(child.getAttribute('hue')) / 360);
                        break;
                    case 'a:hueMod':
                        color$1.hueMod(OpenXML.getAttrPercent(child, 'val'));
                        break;
                    case 'a:hueOff':
                        color$1.hueOff(OpenXML.getAttrPercent(child, 'val'));
                        break;
                    case 'a:sat':
                        color$1.sat(OpenXML.getAttrPercent(child, 'val'));
                        break;
                    case 'a:satMod':
                        color$1.satMod(OpenXML.getAttrPercent(child, 'val'));
                        break;
                    case 'a:satOff':
                        color$1.satOff(OpenXML.getAttrPercent(child, 'val'));
                        break;
                    case 'a:shade':
                        color$1.shade(OpenXML.getAttrPercent(child, 'val'));
                        break;
                    case 'a:tint':
                        color$1.tint(OpenXML.getAttrPercent(child, 'val'));
                        break;
                    default:
                        console.log('unknown color modify', child);
                        break;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (alpha !== 1) {
            return color$1.toRgba(alpha);
        }
        return color$1.toHex();
    }
    return colorStr;
}

exports.modifyColor = modifyColor;
