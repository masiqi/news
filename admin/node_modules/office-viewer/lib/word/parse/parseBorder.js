'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var OpenXML = require('../../OpenXML.js');
var parseColor = require('./parseColor.js');
var parseSize = require('./parseSize.js');

// 默认边框颜色
var DEFAULT_BORDER_COLOR = 'black';
/**
 * 解析单个边框样式
 */
function parseBorder(word, element) {
    var type = OpenXML.getVal(element);
    if (type === 'nil' || type === 'none') {
        return 'none';
    }
    var color = parseColor.parseColorAttr(word, element);
    var size = parseSize.parseSize(element, 'w:sz', parseSize.LengthUsage.Border);
    return "".concat(size, " solid ").concat(color == 'auto' ? DEFAULT_BORDER_COLOR : color);
}
/**
 * 解析边框
 */
function parseBorders(word, element, style) {
    var e_1, _a;
    try {
        for (var _b = tslib.__values(element.children), _c = _b.next(); !_c.done; _c = _b.next()) {
            var child = _c.value;
            var tagName = child.tagName;
            switch (tagName) {
                case 'w:start':
                case 'w:left':
                    style['border-left'] = parseBorder(word, child);
                    break;
                case 'w:end':
                case 'w:right':
                    style['border-right'] = parseBorder(word, child);
                    break;
                case 'w:top':
                    style['border-top'] = parseBorder(word, child);
                    break;
                case 'w:bottom':
                    style['border-bottom'] = parseBorder(word, child);
                    break;
                // TODO: 还有个 between 不知道是干啥的
                default:
                    break;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
}

exports.parseBorder = parseBorder;
exports.parseBorders = parseBorders;
