'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var Tc = require('../../openxml/word/table/Tc.js');
var parseTcPr = require('./parseTcPr.js');
var Paragraph = require('../../openxml/word/Paragraph.js');
var parseTable = require('./parseTable.js');

/**
 * 拆分出来主要是为了避免循环引用
 */
function parseTc(word, element, currentCol, rowSpanMap) {
    var e_1, _a;
    var tc = new Tc.Tc();
    try {
        for (var _b = tslib.__values(element.children), _c = _b.next(); !_c.done; _c = _b.next()) {
            var child = _c.value;
            var tagName = child.tagName;
            switch (tagName) {
                case 'w:tcPr':
                    tc.properties = parseTcPr.parseTcPr(word, child);
                    break;
                case 'w:p':
                    tc.add(Paragraph.Paragraph.fromXML(word, child));
                    break;
                case 'w:tbl':
                    tc.add(parseTable.parseTable(word, child));
                    break;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    var lastCol = rowSpanMap[currentCol.index];
    // 如果是 continue 意味着这个被合并了
    if (tc.properties.vMerge) {
        if (tc.properties.vMerge === 'restart') {
            tc.properties.rowSpan = 1;
            rowSpanMap[currentCol.index] = tc;
        }
        else if (lastCol) {
            if (lastCol.properties && lastCol.properties.rowSpan) {
                lastCol.properties.rowSpan = lastCol.properties.rowSpan + 1;
                var colSpan_1 = tc.properties.gridSpan || 1;
                currentCol.index += colSpan_1;
                return null;
            }
            else {
                console.warn('Tc.fromXML: continue but not found lastCol', currentCol.index, tc, rowSpanMap);
            }
        }
    }
    else {
        delete rowSpanMap[currentCol.index];
    }
    var colSpan = tc.properties.gridSpan || 1;
    currentCol.index += colSpan;
    return tc;
}

exports.parseTc = parseTc;
