'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var parseSize = require('../../word/parse/parseSize.js');
var OpenXML = require('../../OpenXML.js');
var Header = require('./Header.js');

/**
 * section 属性
 * word 文档是按 section 组织的
 * 参考了 docx 里的类型定义
 */
function parseHeader(word, element, type) {
    var headerType = element.getAttribute('w:type');
    var headerId = element.getAttribute('r:id');
    if (headerType && headerId) {
        var headerRel = word.getDocumentRels(headerId);
        if (headerRel) {
            var headerDoc = word.getXML('/word/' + headerRel.target);
            if (headerDoc) {
                var header = Header.Header.fromXML(word, headerDoc);
                return {
                    headerType: headerType,
                    header: header
                };
            }
        }
    }
    return null;
}
var Section = /** @class */ (function () {
    function Section() {
        this.properties = {};
        this.children = [];
    }
    Section.prototype.addChild = function (child) {
        this.children.push(child);
    };
    Section.parsePr = function (word, element, body) {
        var e_1, _a;
        var properties = {};
        properties.headers = {};
        properties.footers = {};
        try {
            for (var _b = tslib.__values(element.children), _c = _b.next(); !_c.done; _c = _b.next()) {
                var child = _c.value;
                var tagName = child.tagName;
                switch (tagName) {
                    case 'w:pgSz':
                        properties.pageSize = {
                            width: parseSize.parseSize(child, 'w:w'),
                            height: parseSize.parseSize(child, 'w:h')
                        };
                        break;
                    case 'w:pgMar':
                        properties.pageMargin = {
                            left: parseSize.parseSize(child, 'w:left'),
                            right: parseSize.parseSize(child, 'w:right'),
                            top: parseSize.parseSize(child, 'w:top'),
                            bottom: parseSize.parseSize(child, 'w:bottom'),
                            header: parseSize.parseSize(child, 'w:header'),
                            footer: parseSize.parseSize(child, 'w:footer'),
                            gutter: parseSize.parseSize(child, 'w:gutter')
                        };
                        break;
                    case 'w:headerReference':
                        var header = parseHeader(word, child, 'header');
                        if (header) {
                            properties.headers[header.headerType] = header.header;
                        }
                        break;
                    case 'w:footerReference':
                        var footer = parseHeader(word, child, 'footer');
                        if (footer) {
                            properties.footers[footer.headerType] = footer.header;
                        }
                        break;
                    case 'w:cols':
                        var cols = {};
                        var num = OpenXML.getAttrNumber(child, 'w:num', 1);
                        cols.num = num;
                        var space = parseSize.parseSize(child, 'w:space');
                        if (space) {
                            cols.space = space;
                        }
                        properties.cols = cols;
                        break;
                    default:
                        break;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return properties;
    };
    return Section;
}());

exports.Section = Section;
