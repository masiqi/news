'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var OpenXML = require('../../OpenXML.js');

/**
 * 内嵌字体
 * http://webapp.docx4java.org/OnlineDemo/ecma376/WordML/Font%20Embedding.html
 */
/**
 * 这是来自 docxjs 里的代码，参考了规范 17.8.1 里的算法
 */
function deobfuscate(data, guidKey) {
    var len = 16;
    var trimmed = guidKey.replace(/{|}|-/g, '');
    var numbers = new Array(len);
    for (var i = 0; i < len; i++)
        numbers[len - i - 1] = parseInt(trimmed.substr(i * 2, 2), 16);
    for (var i = 0; i < 32; i++)
        data[i] = data[i] ^ numbers[i % len];
    return data;
}
var Font = /** @class */ (function () {
    function Font() {
    }
    Font.fromXML = function (word, element) {
        var e_1, _a;
        var font = new Font();
        font.name = element.getAttribute('w:name') || '';
        try {
            for (var _b = tslib.__values(element.children), _c = _b.next(); !_c.done; _c = _b.next()) {
                var child = _c.value;
                var tagName = child.tagName;
                switch (tagName) {
                    case 'w:family':
                        font.family = OpenXML.getVal(child);
                        break;
                    case 'w:altName':
                        font.altName = OpenXML.getVal(child);
                        break;
                    case 'w:panose1':
                        // 不知道是啥
                        // http://webapp.docx4java.org/OnlineDemo/ecma376/WordML/panose1.html
                        break;
                    case 'w:charset':
                    case 'w:sig':
                    case 'w:pitch':
                        // 用不上
                        break;
                    case 'w:embedRegular':
                    case 'w:embedBold':
                    case 'w:embedItalic':
                    case 'w:embedBoldItalic':
                    case 'w:embedSystemFonts':
                    case 'w:embedTrueTypeFonts':
                        var id = child.getAttribute('r:id') || '';
                        var fontKey = child.getAttribute('w:fontKey') || '';
                        var fontURL = word.loadFont(id, fontKey);
                        if (fontURL) {
                            font.url = fontURL;
                        }
                        break;
                    default:
                        console.warn('parse Font: Unknown key', tagName, child);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return font;
    };
    return Font;
}());

exports.Font = Font;
exports.deobfuscate = deobfuscate;
