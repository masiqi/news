'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var parseSize = require('../word/parse/parseSize.js');
var OpenXML = require('../OpenXML.js');

/**
 * 主要参考 14.2.7 Theme Part
 */
// http://webapp.docx4java.org/OnlineDemo/ecma376/DrawingML/clrScheme.html
var ClrScheme = /** @class */ (function () {
    function ClrScheme() {
        this.colors = {};
    }
    return ClrScheme;
}());
function parseClrScheme(doc) {
    var e_1, _a;
    var scheme = new ClrScheme();
    if (!doc) {
        return scheme;
    }
    scheme.name = doc.getAttribute('name') || '';
    try {
        for (var _b = tslib.__values(doc.children), _c = _b.next(); !_c.done; _c = _b.next()) {
            var child = _c.value;
            var colorName = child.tagName.replace('a:', '');
            var clr = child.firstElementChild;
            if (clr) {
                var clrName = clr.nodeName.replace('a:', '');
                if (clrName === 'sysClr') {
                    scheme.colors[colorName] = clr.getAttribute('lastClr') || '';
                }
                else if (clrName === 'srgbClr') {
                    scheme.colors[colorName] = '#' + clr.getAttribute('val') || '';
                }
                else if (clrName === 'scrgbClr') {
                    // https://c-rex.net/projects/samples/ooxml/e1/Part4/OOXML_P4_DOCX_scrgbClr_topic_ID0EOOPJB.html
                    // 没测过
                    var r = OpenXML.getAttrPercent(child, 'r') * 256;
                    var g = OpenXML.getAttrPercent(child, 'g') * 256;
                    var b = OpenXML.getAttrPercent(child, 'b') * 256;
                    scheme.colors[colorName] = "rgb(".concat(r, ", ").concat(g, ", ").concat(b, ")");
                }
                else if (clrName === 'hslClr') {
                    // https://c-rex.net/projects/samples/ooxml/e1/Part4/OOXML_P4_DOCX_hslClr_topic_ID0EQ5FJB.html
                    // 没测过
                    var h = parseSize.convertAngle(child.getAttribute('hue'));
                    var s = OpenXML.getAttrPercent(child, 'sat') * 100;
                    var l = OpenXML.getAttrPercent(child, 'lum') * 100;
                    scheme.colors[colorName] = "hsl(".concat(h, ", ").concat(s, "%, ").concat(l, "%)");
                }
                else if (clrName === 'prstClr') {
                    scheme.colors[colorName] = OpenXML.getVal(child);
                }
                else {
                    console.error('unknown clr name', clrName);
                }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return scheme;
}
// TODO: 字体解析
function parseFontScheme(doc) {
    var scheme = {};
    return scheme;
}
function parseFmtScheme(data) {
    var scheme = {};
    return scheme;
}
function parseThemeElements(element) {
    var themeElements = {};
    if (element) {
        themeElements.clrScheme = parseClrScheme(element.getElementsByTagName('a:clrScheme').item(0));
        themeElements.fontScheme = parseFontScheme(element.getElementsByTagName('a:fontScheme').item(0));
        themeElements.fmtScheme = parseFmtScheme(element.getElementsByTagName('a:fmtScheme').item(0));
    }
    return themeElements;
}
function parseTheme(doc) {
    var theme = {};
    theme.themeElements = parseThemeElements(doc.getElementsByTagName('a:themeElements').item(0));
    return theme;
}

exports.parseTheme = parseTheme;
