'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var Transform = require('./Transform.js');
var parseSize = require('../../word/parse/parseSize.js');
var Geom = require('./Geom.js');
var parseChildColor = require('../../word/parse/parseChildColor.js');
var CustomGeom = require('./CustomGeom.js');

/**
 * http://webapp.docx4java.org/OnlineDemo/ecma376/DrawingML/spPr_2.html
 */
function prstDashToCSSBorderType(prstDash) {
    var borderType = 'solid';
    switch (prstDash) {
        case 'dash':
        case 'dashDot':
        case 'lgDash':
        case 'lgDashDot':
        case 'lgDashDotDot':
        case 'sysDash':
        case 'sysDashDot':
        case 'sysDashDotDot':
            borderType = 'dashed';
            break;
        case 'dot':
        case 'sysDot':
            borderType = 'dotted';
            break;
    }
    return borderType;
}
function parseOutline(getThemeColor, element) {
    var e_1, _a;
    var borderWidth = parseSize.parseSize(element, 'w', parseSize.LengthUsage.Emu);
    var outline = {
        width: borderWidth
    };
    outline.style = 'solid';
    try {
        for (var _b = tslib.__values(element.children), _c = _b.next(); !_c.done; _c = _b.next()) {
            var child = _c.value;
            var tagName = child.tagName;
            switch (tagName) {
                case 'a:solidFill':
                    outline.color = parseChildColor.parseChildColor(getThemeColor, child);
                    break;
                case 'a:noFill':
                    outline.style = 'none';
                    break;
                case 'a:round':
                    // 瞎写的，规范里也没写是多少
                    outline.radius = '8%';
                    break;
                case 'a:prstDash':
                    outline.style = prstDashToCSSBorderType(child.getAttribute('val'));
                    break;
                default:
                    console.warn('parseOutline: Unknown tag ', tagName, child);
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return outline;
}
var ShapePr = /** @class */ (function () {
    function ShapePr() {
    }
    ShapePr.fromXML = function (word, element) {
        var e_2, _a;
        var shapePr = new ShapePr();
        if (element) {
            try {
                for (var _b = tslib.__values(element.children), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var child = _c.value;
                    var tagName = child.tagName;
                    switch (tagName) {
                        case 'a:xfrm':
                            shapePr.xfrm = Transform.Transform.fromXML(word, child);
                            break;
                        case 'a:prstGeom':
                            shapePr.geom = Geom.Geom.fromXML(word, child);
                            break;
                        case 'a:custGeom':
                            shapePr.custGeom = CustomGeom.CustomGeom.fromXML(word, child);
                            break;
                        case 'a:ln':
                            // http://officeopenxml.com/drwSp-outline.php
                            shapePr.outline = parseOutline(function (c) { return word.getThemeColor(c); }, child);
                            break;
                        case 'a:noFill':
                            shapePr.noFill = true;
                            break;
                        case 'a:solidFill':
                            shapePr.fillColor = parseChildColor.parseChildColor(function (c) { return word.getThemeColor(c); }, child);
                            break;
                        default:
                            console.warn('ShapePr: Unknown tag ', tagName, child);
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        return shapePr;
    };
    return ShapePr;
}());

exports.ShapePr = ShapePr;
exports.parseOutline = parseOutline;
