'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var color = require('../../../util/color.js');
var dom = require('../../../util/dom.js');
var formulas = require('./formulas.js');
var generateDefines = require('./generateDefines.js');
var presetVal = require('./presetVal.js');

/**
 * 将 shape 转成 svg 格式
 *
 * https://wiki.documentfoundation.org/Development/Improve_handles_of_DrawingML_shapes
 */
function shapeToSVG(shape, avLst, shapePr, width, height, wpsStyle) {
    var e_1, _a, e_2, _b, e_3, _c, e_4, _d;
    var svg = dom.createSVGElement('svg');
    svg.style.display = 'block';
    // 边框有时候会超过
    // block 是为了避免被 text-align 影响
    // z-index 是因为后面可能会有文字，避免遮挡
    svg.setAttribute('style', 'display: block; overflow: visible; position: absolute; z-index: -1');
    svg.setAttribute('width', width.toString() + 'px');
    svg.setAttribute('height', height.toString() + 'px');
    // 变量值
    var vars = presetVal.presetVal(width, height);
    try {
        // 先执行 avLst 定义初始变量
        for (var _e = tslib.__values(shape.avLst || []), _f = _e.next(); !_f.done; _f = _e.next()) {
            var gd = _f.value;
            formulas.evalFmla(gd.n, gd.f, vars);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
        }
        finally { if (e_1) throw e_1.error; }
    }
    try {
        // 自定义 avLst
        for (var avLst_1 = tslib.__values(avLst), avLst_1_1 = avLst_1.next(); !avLst_1_1.done; avLst_1_1 = avLst_1.next()) {
            var gd = avLst_1_1.value;
            formulas.evalFmla(gd.n, gd.f, vars);
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (avLst_1_1 && !avLst_1_1.done && (_b = avLst_1.return)) _b.call(avLst_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
    try {
        // 执行 gdLst
        for (var _g = tslib.__values(shape.gdLst || []), _h = _g.next(); !_h.done; _h = _g.next()) {
            var gd = _h.value;
            formulas.evalFmla(gd.n, gd.f, vars);
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (_h && !_h.done && (_c = _g.return)) _c.call(_g);
        }
        finally { if (e_3) throw e_3.error; }
    }
    var outline = shapePr.outline;
    var prevPoint = [];
    try {
        for (var _j = tslib.__values(shape.pathLst || []), _k = _j.next(); !_k.done; _k = _j.next()) {
            var path = _k.value;
            var pathEl = dom.createSVGElement('path');
            var d = generateDefines.generateDefines(path, vars, prevPoint);
            pathEl.setAttribute('d', d);
            if (shapePr.fillColor) {
                pathEl.setAttribute('fill', shapePr.fillColor);
            }
            else if (wpsStyle && wpsStyle.fillColor) {
                pathEl.setAttribute('fill', wpsStyle.fillColor);
            }
            else {
                pathEl.setAttribute('fill', 'none');
            }
            if (outline) {
                if (outline.color) {
                    pathEl.setAttribute('stroke', outline.color);
                }
                if (outline.width) {
                    pathEl.setAttribute('stroke-width', outline.width);
                }
                if (outline.style === 'none') {
                    pathEl.setAttribute('stroke', 'none');
                }
            }
            else if (wpsStyle && wpsStyle.lineColor) {
                pathEl.setAttribute('stroke', wpsStyle.lineColor);
            }
            else {
                pathEl.setAttribute('stroke', 'none');
            }
            var fillColor = pathEl.getAttribute('fill');
            if (fillColor && fillColor !== 'none') {
                var color$1 = new color.Color(fillColor);
                var fillMode = path.fill;
                var changeColor = '';
                switch (fillMode) {
                    // 这些值目前是瞎编的，官方规范里没说
                    // http://webapp.docx4java.org/OnlineDemo/ecma376/DrawingML/ST_PathFillMode.html
                    case 'darken':
                        changeColor = color$1.lumOff(-0.5).toHex();
                        break;
                    case 'darkenLess':
                        changeColor = color$1.lumOff(-0.2).toHex();
                        break;
                    case 'lighten':
                        changeColor = color$1.lumOff(0.5).toHex();
                        break;
                    case 'lightenLess':
                        changeColor = color$1.lumOff(0.2).toHex();
                        break;
                }
                if (changeColor) {
                    pathEl.setAttribute('fill', changeColor);
                }
            }
            if (path.fill === 'none') {
                pathEl.setAttribute('fill', 'none');
            }
            if (path.stroke === false) {
                pathEl.setAttribute('stroke', 'none');
                if (!path.fill) {
                    pathEl.setAttribute('fill', 'none');
                }
            }
            if (shapePr.noFill) {
                pathEl.setAttribute('fill', 'none');
            }
            svg.appendChild(pathEl);
        }
    }
    catch (e_4_1) { e_4 = { error: e_4_1 }; }
    finally {
        try {
            if (_k && !_k.done && (_d = _j.return)) _d.call(_j);
        }
        finally { if (e_4) throw e_4.error; }
    }
    return svg;
}

exports.shapeToSVG = shapeToSVG;
