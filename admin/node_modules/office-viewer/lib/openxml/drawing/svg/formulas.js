'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/**
 * 计算公式 20.1.9.11
 */
var angleFactor = (1 / 60000 / 180) * Math.PI;
var formulas = {
    '*/': function (x, y, z) {
        return (x * y) / z;
    },
    '+-': function (x, y, z) {
        return x + y - z;
    },
    '+/': function (x, y, z) {
        return (x + y) / z;
    },
    '?:': function (x, y, z) {
        return x > 0 ? y : z;
    },
    'abs': function (x) {
        return Math.abs(x);
    },
    'at2': function (x, y) {
        // 转回角度，因为后续的计算是基于角度的
        return (Math.atan2(y, x) * 180 * 60000) / Math.PI;
    },
    'cat2': function (x, y, z) {
        return x * Math.cos(Math.atan2(z, y));
    },
    'cos': function (x, y) {
        return x * Math.cos(y * angleFactor);
    },
    'max': function (x, y) {
        return Math.max(x, y);
    },
    'min': function (x, y) {
        return Math.min(x, y);
    },
    'mod': function (x, y, z) {
        return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));
    },
    'pin': function (x, y, z) {
        return y < x ? x : y > z ? z : y;
    },
    'sat2': function (x, y, z) {
        return x * Math.sin(Math.atan2(z, y));
    },
    'sin': function (x, y) {
        return x * Math.sin(y * angleFactor);
    },
    'sqrt': function (x) {
        return Math.sqrt(x);
    },
    'tan': function (x, y) {
        return x * Math.tan(y * angleFactor);
    },
    'val': function (a) {
        var parse = parseInt(a, 10);
        if (isNaN(parse)) {
            return parse;
        }
        return parse;
    }
};
/**
 * 执行公式计算并返回结果
 * @param fmla 公式
 * @param vars 变量值
 * @returns
 */
function evalFmla(name, fmla, vars) {
    var fmlaArr = fmla.split(/[ ]+/);
    if (fmlaArr.length <= 1) {
        console.warn('fmla format error', fmla);
    }
    var fmlaName = fmlaArr[0];
    var fmlaArgs = fmlaArr.slice(1);
    // 这里要求 gd 定义必须顺序，不然就找不到之前的值了
    var fmlaArgsNum = fmlaArgs.map(function (arg) {
        if (arg in vars) {
            return vars[arg];
        }
        var parse = parseInt(arg, 10);
        if (isNaN(parse)) {
            console.warn('fmla arg error', arg, fmla);
            return 0;
        }
        else {
            return parse;
        }
    });
    if (fmlaName in formulas) {
        var val = formulas[fmlaName].apply(null, fmlaArgsNum);
        if (isNaN(val)) {
            console.warn('fmla eval error', fmla, name);
            return 0;
        }
        else {
            vars[name] = val;
        }
    }
    return 0;
}

exports.evalFmla = evalFmla;
exports.formulas = formulas;
