'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var number = require('../../../util/number.js');

/**
 * 判断是否匹配
 * @param operator
 * @param val
 * @param cellValueNum
 */
function evalCustomFilter(operator, val, cellValueNum) {
    val = val.toLowerCase();
    var value = cellValueNum.value.toLowerCase();
    var num = cellValueNum.num;
    operator = operator || 'equal';
    switch (operator) {
        case 'equal':
            if (val.startsWith('*') && val.endsWith('*')) {
                return value.includes(val.slice(1, -1));
            }
            if (val.endsWith('*')) {
                return value.startsWith(val.slice(0, -1));
            }
            if (val.startsWith('*')) {
                return value.endsWith(val.slice(1));
            }
            return value === val;
        case 'notEqual':
            if (val.startsWith('*') && val.endsWith('*')) {
                return !value.includes(val.slice(1, -1));
            }
            if (val.endsWith('*')) {
                return !value.startsWith(val.slice(0, -1));
            }
            if (val.startsWith('*')) {
                return !value.endsWith(val.slice(1));
            }
            return value !== val;
        case 'lessThan':
            if (num === undefined) {
                return false;
            }
            return number.lt(num, parseFloat(val));
        case 'lessThanOrEqual':
            if (num === undefined) {
                return false;
            }
            return number.lte(num, parseFloat(val));
        case 'greaterThan':
            if (num === undefined) {
                return false;
            }
            return number.gt(num, parseFloat(val));
        case 'greaterThanOrEqual':
            if (num === undefined) {
                return false;
            }
            return number.gte(num, parseFloat(val));
    }
    return false;
}

exports.evalCustomFilter = evalCustomFilter;
