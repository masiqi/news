'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var ptToPx = require('../../util/ptToPx.js');
var ColWidth = require('../sheet/ColWidth.js');
var CellData = require('../types/worksheet/CellData.js');
var defaultFont = require('./defaultFont.js');
var numfmt = require('numfmt');
var BuiltInNumFmt = require('../sheet/BuiltInNumFmt.js');
var color = require('../../util/color.js');
var Consts = require('../render/Consts.js');
var measureTextWithCache = require('../render/cell/measureTextWithCache.js');
var genFontStr = require('../render/cell/genFontStr.js');
var IndexedColors = require('../render/IndexedColors.js');
var colorNameMap = require('../../openxml/colorNameMap.js');
var applyAutoFilter = require('./applyAutoFilter.js');
var numfmtExtend = require('./numfmtExtend.js');
var getThemeColor = require('./getThemeColor.js');
var sortByRange = require('./autoFilter/sortByRange.js');
var px2pt = require('../../util/px2pt.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var numfmt__default = /*#__PURE__*/_interopDefaultLegacy(numfmt);

/**
 * 本地数据，这个主要用于不远程协作的情况
 */
var LocalDataProvider = /** @class */ (function () {
    function LocalDataProvider(workbook, renderOptions) {
        /**
         * numfmt 实例，用于提升性能
         */
        this.numfmtInstances = [];
        this.sheetTotalHeightCache = new Map();
        this.sheetTotalWidthCache = new Map();
        this.workbook = workbook;
        this.renderOptions = renderOptions;
        this.initNumfmt();
        this.defaultFont = this.getDefaultFont();
        this.defaultFontStyle = this.getFontStyle(this.defaultFont);
        this.applyFilter();
    }
    /**
     * 初始化 numfmt 实例
     */
    LocalDataProvider.prototype.initNumfmt = function () {
        var e_1, _a;
        var _this = this;
        var _b, _c, _d;
        var locale = this.renderOptions.locale;
        BuiltInNumFmt["default"].forEach(function (numFmt, index) {
            var instance = numfmt__default["default"](numFmt, {
                locale: locale
            });
            _this.numfmtInstances[index] = instance;
        });
        try {
            for (var _e = tslib.__values(((_c = (_b = this.workbook.styleSheet) === null || _b === void 0 ? void 0 : _b.numFmts) === null || _c === void 0 ? void 0 : _c.numFmt) || []), _f = _e.next(); !_f.done; _f = _e.next()) {
                var numFmt = _f.value;
                var instance = void 0;
                try {
                    // 不知为啥还有 aaaa 这种写法，在稻壳里比较常见
                    instance = numfmt__default["default"]((_d = numFmt.formatCode) === null || _d === void 0 ? void 0 : _d.replace('aaaa', 'dddd').replace('aaa', 'ddd'), {
                        locale: locale
                    });
                }
                catch (error) {
                    console.warn('numfmt error', error);
                    instance = numfmtExtend.numfmtExtend(numFmt.formatCode);
                }
                var numFmtId = numFmt.numFmtId || 0;
                this.numfmtInstances[numFmtId] = instance;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * 应用自动过滤
     */
    LocalDataProvider.prototype.applyFilter = function () {
        var e_2, _a, e_3, _b;
        var _c, _d;
        try {
            for (var _e = tslib.__values(this.workbook.sheets.entries()), _f = _e.next(); !_f.done; _f = _e.next()) {
                var _g = tslib.__read(_f.value, 2), sheetIndex = _g[0], sheet = _g[1];
                // sheet 本身的 autoFilter 配置
                if ((_c = sheet.worksheet) === null || _c === void 0 ? void 0 : _c.autoFilter) {
                    var autoFilter = sheet.worksheet.autoFilter;
                    applyAutoFilter.applyAutoFilter(sheetIndex, this.workbook, sheet, this, autoFilter);
                }
                try {
                    // 应用表格中的自动过滤
                    for (var _h = (e_3 = void 0, tslib.__values(((_d = sheet.worksheet) === null || _d === void 0 ? void 0 : _d.tableParts) || [])), _j = _h.next(); !_j.done; _j = _h.next()) {
                        var tableParts = _j.value;
                        if (tableParts.autoFilter) {
                            var headerRowCount = tableParts.headerRowCount || 1;
                            applyAutoFilter.applyAutoFilter(sheetIndex, this.workbook, sheet, this, tableParts.autoFilter, headerRowCount);
                        }
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (_j && !_j.done && (_b = _h.return)) _b.call(_h);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    LocalDataProvider.prototype.getSheets = function () {
        return this.workbook.sheets;
    };
    /**
     * 获取指定行的数据
     * @param sheetName 表名
     * @param row
     */
    LocalDataProvider.prototype.getSheetRowData = function (sheetIndex, row) {
        var _a;
        var sheet = this.getSheetByIndex(sheetIndex);
        if (sheet) {
            var rowData = ((_a = sheet.worksheet) === null || _a === void 0 ? void 0 : _a.cellData[row]) || [];
            return rowData;
        }
        return [];
    };
    LocalDataProvider.prototype.getCellData = function (sheetIndex, row, col) {
        var _a, _b;
        var sheet = this.getSheetByIndex(sheetIndex);
        if (sheet) {
            return ((_b = (_a = sheet.worksheet) === null || _a === void 0 ? void 0 : _a.cellData[row]) === null || _b === void 0 ? void 0 : _b[col]) || undefined;
        }
        return undefined;
    };
    /**
     * 更新单元格数据
     */
    LocalDataProvider.prototype.updateCellData = function (sheetIndex, row, col, data) {
        var sheet = this.getSheetByIndex(sheetIndex);
        if (sheet && sheet.worksheet) {
            if (!sheet.worksheet.cellData[row]) {
                sheet.worksheet.cellData[row] = [];
            }
            sheet.worksheet.cellData[row][col] = data;
        }
    };
    /**
     * 获取指定行高
     * TODO: 加缓存
     * @param sheetIndex
     * @param rowIndex
     * @returns px 为单位的行高
     */
    LocalDataProvider.prototype.getRowHeight = function (sheetIndex, rowIndex) {
        var _a, _b, _c;
        var sheet = this.getSheetByIndex(sheetIndex);
        if (sheet) {
            var row = (_a = sheet.worksheet) === null || _a === void 0 ? void 0 : _a.rows[rowIndex];
            if (row === null || row === void 0 ? void 0 : row.hidden) {
                return 0;
            }
            var rowHeight = row === null || row === void 0 ? void 0 : row.ht;
            if (!rowHeight) {
                rowHeight = ((_c = (_b = sheet.worksheet) === null || _b === void 0 ? void 0 : _b.sheetFormatPr) === null || _c === void 0 ? void 0 : _c.defaultRowHeight) || 16;
            }
            return ptToPx.pt2px(rowHeight);
        }
        return 0;
    };
    LocalDataProvider.prototype.setRowHeight = function (sheetIndex, row, height) {
        var _a;
        var sheet = this.getSheetByIndex(sheetIndex);
        if (sheet && sheet.worksheet) {
            if (!((_a = sheet.worksheet) === null || _a === void 0 ? void 0 : _a.rows[row])) {
                sheet.worksheet.rows[row] = {};
            }
            sheet.worksheet.rows[row].ht = px2pt.px2pt(height);
        }
    };
    /**
     * 这个行是否隐藏
     */
    LocalDataProvider.prototype.isRowHidden = function (sheetIndex, rowIndex) {
        var _a;
        var sheet = this.getSheetByIndex(sheetIndex);
        if (sheet) {
            var row = (_a = sheet.worksheet) === null || _a === void 0 ? void 0 : _a.rows[rowIndex];
            if (row === null || row === void 0 ? void 0 : row.hidden) {
                return true;
            }
        }
        return false;
    };
    /**
     * 获取隐藏的列
     * @param sheetIndex
     * @returns
     */
    LocalDataProvider.prototype.getColHiddenRange = function (sheetIndex) {
        var e_4, _a;
        var _b;
        var sheet = this.getSheetByIndex(sheetIndex);
        if (sheet) {
            var cols = ((_b = sheet.worksheet) === null || _b === void 0 ? void 0 : _b.cols) || [];
            var ranges = [];
            try {
                for (var cols_1 = tslib.__values(cols), cols_1_1 = cols_1.next(); !cols_1_1.done; cols_1_1 = cols_1.next()) {
                    var col = cols_1_1.value;
                    if (col && col.hidden) {
                        ranges.push({ min: col.min || 0, max: col.max || 0 });
                    }
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (cols_1_1 && !cols_1_1.done && (_a = cols_1.return)) _a.call(cols_1);
                }
                finally { if (e_4) throw e_4.error; }
            }
            return ranges;
        }
        return [];
    };
    /**
     * 这个列是否隐藏
     */
    LocalDataProvider.prototype.isColHidden = function (sheetIndex, colIndex) {
        var e_5, _a;
        var _b;
        var sheet = this.getSheetByIndex(sheetIndex);
        if (sheet) {
            var cols = ((_b = sheet.worksheet) === null || _b === void 0 ? void 0 : _b.cols) || [];
            try {
                for (var cols_2 = tslib.__values(cols), cols_2_1 = cols_2.next(); !cols_2_1.done; cols_2_1 = cols_2.next()) {
                    var col = cols_2_1.value;
                    if (col && col.hidden) {
                        if (colIndex >= (col.min || 0) && colIndex <= (col.max || 0)) {
                            return true;
                        }
                    }
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (cols_2_1 && !cols_2_1.done && (_a = cols_2.return)) _a.call(cols_2);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        return false;
    };
    /**
     * 获取指定列宽，这个一开始就能确定
     * @param sheetIndex
     * @param colIndex
     * @returns px 为单位的列宽
     */
    LocalDataProvider.prototype.getColWidth = function (sheetIndex, colIndex) {
        var e_6, _a;
        var _b, _c, _d;
        var sheet = this.getSheetByIndex(sheetIndex);
        if (sheet) {
            var cols = ((_b = sheet.worksheet) === null || _b === void 0 ? void 0 : _b.cols) || [];
            try {
                for (var _e = tslib.__values(cols.entries()), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var _g = tslib.__read(_f.value, 2), index = _g[0], col = _g[1];
                    if (!col) {
                        continue;
                    }
                    var min = (_c = col.min) !== null && _c !== void 0 ? _c : index;
                    var max = (_d = col.max) !== null && _d !== void 0 ? _d : index;
                    if (colIndex >= min && colIndex <= max) {
                        if (col.hidden) {
                            return 0;
                        }
                        var colWidth = col.width;
                        if (colWidth) {
                            if (colWidth === 0) {
                                return 0;
                            }
                            var defaultFontSize = this.getDefaultFontSize();
                            return ColWidth.colWidth2px(colWidth, defaultFontSize.width);
                        }
                        return this.getDefaultWidth(sheet);
                    }
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
                }
                finally { if (e_6) throw e_6.error; }
            }
            return this.getDefaultWidth(sheet);
        }
        // 默认必须有个值，不然可能导致死循环
        return 71.73828125;
    };
    LocalDataProvider.prototype.setColWidth = function (sheetIndex, col, width) {
        var _a;
        var sheet = this.getSheetByIndex(sheetIndex);
        if (sheet && sheet.worksheet) {
            if (!((_a = sheet.worksheet) === null || _a === void 0 ? void 0 : _a.cols[col])) {
                sheet.worksheet.cols[col] = {};
            }
            var defaultFontSize = this.getDefaultFontSize();
            sheet.worksheet.cols[col].width = ColWidth.px2colWidth(width, defaultFontSize.width);
        }
    };
    LocalDataProvider.prototype.getDefaultWidth = function (sheet) {
        var _a, _b, _c, _d;
        var defaultColWidth = (_b = (_a = sheet.worksheet) === null || _a === void 0 ? void 0 : _a.sheetFormatPr) === null || _b === void 0 ? void 0 : _b.defaultColWidth;
        if (!defaultColWidth) {
            var defaultFontSize = this.getDefaultFontSize();
            // 虽然 xsd 里的默认值是 8，但用 Excel 生成的默认值是 10，所以用 10 作为默认值
            var baseColWidth = ((_d = (_c = sheet.worksheet) === null || _c === void 0 ? void 0 : _c.sheetFormatPr) === null || _d === void 0 ? void 0 : _d.baseColWidth) || 10;
            return ColWidth.baseColWidth2px(baseColWidth, defaultFontSize.width);
        }
        return defaultColWidth * 8;
    };
    LocalDataProvider.prototype.getMaxRow = function (sheetIndex) {
        var _a;
        var sheet = this.getSheetByIndex(sheetIndex);
        if (sheet) {
            var cellData = ((_a = sheet.worksheet) === null || _a === void 0 ? void 0 : _a.cellData) || [];
            return cellData.length;
        }
        return 0;
    };
    /**
     * 获取表的中数据高度，这个可能会返回预估值
     * @param sheetIndex 表索引
     */
    LocalDataProvider.prototype.getTotalHeight = function (sheetIndex) {
        if (this.sheetTotalHeightCache.has(sheetIndex)) {
            return this.sheetTotalHeightCache.get(sheetIndex);
        }
        var sheet = this.getSheetByIndex(sheetIndex);
        if (sheet) {
            var maxRow = this.getMaxRow(sheetIndex);
            var totalHeight = 0;
            for (var i = 0; i < maxRow; i++) {
                totalHeight += this.getRowHeight(sheetIndex, i);
            }
            this.sheetTotalHeightCache.set(sheetIndex, totalHeight);
            return totalHeight;
        }
        return 0;
    };
    /**
     * 获取最大列数
     */
    LocalDataProvider.prototype.getMaxCol = function (sheetIndex) {
        var e_7, _a;
        var _b;
        var sheet = this.getSheetByIndex(sheetIndex);
        if (sheet) {
            var cellData = ((_b = sheet.worksheet) === null || _b === void 0 ? void 0 : _b.cellData) || [];
            var maxCol = 0;
            var index = 0;
            try {
                for (var cellData_1 = tslib.__values(cellData), cellData_1_1 = cellData_1.next(); !cellData_1_1.done; cellData_1_1 = cellData_1.next()) {
                    var rowData = cellData_1_1.value;
                    maxCol = Math.max((rowData === null || rowData === void 0 ? void 0 : rowData.length) || 0, maxCol);
                    index++;
                    // 就测试 100 行
                    if (index > 100) {
                        break;
                    }
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (cellData_1_1 && !cellData_1_1.done && (_a = cellData_1.return)) _a.call(cellData_1);
                }
                finally { if (e_7) throw e_7.error; }
            }
            return maxCol;
        }
        return 0;
    };
    /**
     * 获取表的中数据宽度，这个可能会返回预估值
     * @param sheetIndex 表索引
     */
    LocalDataProvider.prototype.getTotalWidth = function (sheetIndex) {
        if (this.sheetTotalWidthCache.has(sheetIndex)) {
            return this.sheetTotalWidthCache.get(sheetIndex);
        }
        var sheet = this.getSheetByIndex(sheetIndex);
        if (sheet) {
            var maxCol = this.getMaxCol(sheetIndex);
            var totalWidth = 0;
            for (var i = 0; i < maxCol; i++) {
                totalWidth += this.getColWidth(sheetIndex, i);
            }
            this.sheetTotalWidthCache.set(sheetIndex, totalWidth);
            return totalWidth;
        }
        return 0;
    };
    /**
     * 根据索引获取表
     * @param sheetIndex
     * @returns 对应的表
     */
    LocalDataProvider.prototype.getSheetByIndex = function (sheetIndex) {
        return this.workbook.sheets[sheetIndex];
    };
    /**
     *
     * @param sheetName
     * @returns
     */
    LocalDataProvider.prototype.getSheetByName = function (sheetName) {
        return this.workbook.sheets.find(function (sheet) { return sheet.name === sheetName; });
    };
    /**
     * 获取默认字体
     */
    LocalDataProvider.prototype.getDefaultFont = function () {
        var _a, _b, _c;
        return ((_c = (_b = (_a = this.workbook.styleSheet) === null || _a === void 0 ? void 0 : _a.fonts) === null || _b === void 0 ? void 0 : _b.font) === null || _c === void 0 ? void 0 : _c[0]) || defaultFont["default"];
    };
    LocalDataProvider.prototype.getColor = function (color$1, defaultColor) {
        if (defaultColor === void 0) { defaultColor = 'none'; }
        if (!color$1) {
            return defaultColor;
        }
        if (color$1.rgb) {
            var rgb = color$1.rgb;
            if (rgb in colorNameMap.PresetColorMap) {
                return colorNameMap.PresetColorMap[rgb];
            }
            if (rgb.length === 8) {
                return '#' + rgb.slice(2);
            }
            // 兼容带 # 的情况
            if (rgb.length === 7 && rgb[0] === '#') {
                return rgb;
            }
            return '#' + color$1.rgb;
        }
        if (typeof color$1.theme !== 'undefined') {
            var themeColor = this.getThemeColor(color$1.theme);
            if (color$1.tint) {
                return '#' + color.rgbTint(themeColor, color$1.tint);
            }
            return '#' + themeColor;
        }
        if (color$1.auto) {
            return Consts.AUTO_COLOR;
        }
        if (typeof color$1.indexed !== 'undefined') {
            if (IndexedColors.IndexedColors[color$1.indexed]) {
                return '#' + IndexedColors.IndexedColors[color$1.indexed];
            }
        }
        console.warn('unknown color', color$1);
        return 'none';
    };
    LocalDataProvider.prototype.getFontStyle = function (font) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
        var defaultFont = this.defaultFont;
        var family = ((_a = font === null || font === void 0 ? void 0 : font.name) === null || _a === void 0 ? void 0 : _a.val) || ((_b = defaultFont.name) === null || _b === void 0 ? void 0 : _b.val) || 'Arial';
        var size = ((_c = font === null || font === void 0 ? void 0 : font.sz) === null || _c === void 0 ? void 0 : _c.val) || ((_d = defaultFont.sz) === null || _d === void 0 ? void 0 : _d.val) || Consts.DEFAULT_FONT_SIZE;
        var defaultColor = this.getColor(defaultFont.color, '#000000');
        var color = this.getColor(font === null || font === void 0 ? void 0 : font.color, defaultColor);
        var b = !!((font === null || font === void 0 ? void 0 : font.b) || defaultFont.b) || false;
        var i = !!((font === null || font === void 0 ? void 0 : font.i) || defaultFont.i) || false;
        var u = ((_e = font === null || font === void 0 ? void 0 : font.u) === null || _e === void 0 ? void 0 : _e.val) || ((_f = defaultFont.u) === null || _f === void 0 ? void 0 : _f.val) || 'none';
        var strike = ((_g = font === null || font === void 0 ? void 0 : font.strike) === null || _g === void 0 ? void 0 : _g.val) || ((_h = defaultFont.strike) === null || _h === void 0 ? void 0 : _h.val) || false;
        var outline = ((_j = font === null || font === void 0 ? void 0 : font.outline) === null || _j === void 0 ? void 0 : _j.val) || ((_k = defaultFont.outline) === null || _k === void 0 ? void 0 : _k.val) || false;
        var shadow = ((_l = font === null || font === void 0 ? void 0 : font.shadow) === null || _l === void 0 ? void 0 : _l.val) || ((_m = defaultFont.shadow) === null || _m === void 0 ? void 0 : _m.val) || false;
        var condense = ((_o = font === null || font === void 0 ? void 0 : font.condense) === null || _o === void 0 ? void 0 : _o.val) || ((_p = defaultFont.condense) === null || _p === void 0 ? void 0 : _p.val) || false;
        return {
            family: family,
            size: size,
            color: color,
            b: b,
            i: i,
            u: u,
            strike: strike,
            outline: outline,
            shadow: shadow,
            condense: condense
        };
    };
    /**
     * 获取单元格信息
     */
    LocalDataProvider.prototype.getCellInfo = function (sheetIndex, row, col) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u;
        // 获取默认样式
        var font = this.defaultFont;
        var sheet = this.getSheetByIndex(sheetIndex);
        var text = '';
        var cellData = '';
        var fill;
        var border;
        var alignment;
        var value = '';
        if (sheet) {
            var cellValue = this.getCellValueByData(((_a = sheet.worksheet) === null || _a === void 0 ? void 0 : _a.cellData) || [], row, col);
            var cell = (_c = (_b = sheet.worksheet) === null || _b === void 0 ? void 0 : _b.cellData[row]) === null || _c === void 0 ? void 0 : _c[col];
            if (cell) {
                text = cellValue.text;
                value = cellValue.value + '';
                cellData = cell;
                if (typeof cell === 'object' && 's' in cell) {
                    var cellXfxIndex = cell.s || 0;
                    var cellXfx = (_g = (_f = (_e = (_d = this.workbook) === null || _d === void 0 ? void 0 : _d.styleSheet) === null || _e === void 0 ? void 0 : _e.cellXfs) === null || _f === void 0 ? void 0 : _f.xf) === null || _g === void 0 ? void 0 : _g[cellXfxIndex];
                    if (cellXfx) {
                        var fontId = cellXfx.fontId || 0;
                        var customFont = (_l = (_k = (_j = (_h = this.workbook) === null || _h === void 0 ? void 0 : _h.styleSheet) === null || _j === void 0 ? void 0 : _j.fonts) === null || _k === void 0 ? void 0 : _k.font) === null || _l === void 0 ? void 0 : _l[fontId];
                        if (customFont) {
                            font = customFont;
                        }
                        // numfmt 带来的颜色
                        if (cellValue.color) {
                            font.color = {
                                rgb: cellValue.color
                            };
                        }
                        var fillId = cellXfx.fillId || 0;
                        fill = (_q = (_p = (_o = (_m = this.workbook) === null || _m === void 0 ? void 0 : _m.styleSheet) === null || _o === void 0 ? void 0 : _o.fills) === null || _p === void 0 ? void 0 : _p.fill) === null || _q === void 0 ? void 0 : _q[fillId];
                        var borderId = cellXfx.borderId || 0;
                        border = (_u = (_t = (_s = (_r = this.workbook) === null || _r === void 0 ? void 0 : _r.styleSheet) === null || _s === void 0 ? void 0 : _s.borders) === null || _t === void 0 ? void 0 : _t.border) === null || _u === void 0 ? void 0 : _u[borderId];
                        alignment = cellXfx.alignment;
                    }
                    else {
                        console.warn("\u6CA1\u6709\u627E\u5230 cellXfxIndex \u4E3A ".concat(cellXfxIndex, " \u7684\u6837\u5F0F"));
                    }
                }
                else if (typeof cell === 'string') {
                    text = cell;
                    // 这种情况下默认值会变成 center
                    alignment = {
                        vertical: 'center'
                    };
                }
            }
        }
        return {
            row: row,
            col: col,
            font: font,
            value: value,
            text: text,
            fill: fill,
            border: border,
            cellData: cellData,
            alignment: alignment
        };
    };
    LocalDataProvider.prototype.getCellValue = function (sheetIndex, row, col) {
        var _a;
        var sheet = this.getSheetByIndex(sheetIndex);
        var text = '';
        var value = '';
        var color = '';
        if (sheet) {
            return this.getCellValueByData(((_a = sheet.worksheet) === null || _a === void 0 ? void 0 : _a.cellData) || [], row, col);
        }
        return {
            row: row,
            col: col,
            color: color,
            text: text,
            value: value
        };
    };
    LocalDataProvider.prototype.getCellValueByData = function (cellData, row, col) {
        var _a, _b, _c, _d, _e;
        var text = '';
        var value = '';
        var isDate1904 = this.is1904();
        var color = '';
        var isDate;
        var cell = (_a = cellData[row]) === null || _a === void 0 ? void 0 : _a[col];
        if (cell) {
            if (typeof cell === 'object' && 's' in cell) {
                var cellXfxIndex = cell.s || 0;
                var cellXfx = (_e = (_d = (_c = (_b = this.workbook) === null || _b === void 0 ? void 0 : _b.styleSheet) === null || _c === void 0 ? void 0 : _c.cellXfs) === null || _d === void 0 ? void 0 : _d.xf) === null || _e === void 0 ? void 0 : _e[cellXfxIndex];
                if (cellXfx) {
                    var numFmtId = cellXfx.numFmtId || 0;
                    if (numFmtId !== 0) {
                        var numFmt = this.numfmtInstances[numFmtId];
                        if ((numFmt === null || numFmt === void 0 ? void 0 : numFmt.pattern) === 'General') {
                            // 不知道为何有时候会出现这种情况，这时不能做解析
                            if (typeof cell === 'string') {
                                text = cell;
                                value = text;
                            }
                            else if (typeof cell === 'object' && 'value' in cell) {
                                // 公式等其它情况
                                text = cell.value;
                                value = text;
                            }
                        }
                        else {
                            if (numFmt && 'value' in cell) {
                                var cellValue = parseFloat(cell.value);
                                if (isNaN(cellValue)) {
                                    value = cell.value;
                                    text = cell.value;
                                }
                                else {
                                    if (numFmt.isDate()) {
                                        isDate = true;
                                        var dateValue = cellValue;
                                        if (isDate1904) {
                                            dateValue += 1462;
                                        }
                                        text = numFmt(dateValue);
                                    }
                                    else {
                                        text = numFmt(cellValue);
                                    }
                                    if (numFmt.info.color) {
                                        color = numFmt.color(cellValue);
                                    }
                                }
                            }
                        }
                    }
                    else if ('value' in cell) {
                        text = cell.value || '';
                        value = text;
                    }
                }
                else {
                    console.warn("\u6CA1\u6709\u627E\u5230 cellXfxIndex \u4E3A ".concat(cellXfxIndex, " \u7684\u6837\u5F0F"));
                }
            }
            else if (typeof cell === 'string') {
                text = cell;
                value = text;
            }
            else if (typeof cell === 'object' && 'value' in cell) {
                // 公式等其它情况
                text = cell.value;
                value = text;
            }
        }
        return {
            row: row,
            col: col,
            color: color,
            text: text,
            value: value,
            isDate: isDate
        };
    };
    /**
     * 获取范围内的数据
     */
    LocalDataProvider.prototype.getCellValueByRange = function (sheetIndex, range, includeHidden) {
        var result = [];
        var endRow = range.endRow;
        if (endRow === Consts.MAX_ROW) {
            endRow = this.getMaxRow(sheetIndex);
        }
        var endCol = range.endCol;
        if (endCol === Consts.MAX_ROW) {
            endCol = this.getMaxCol(sheetIndex);
        }
        for (var row = range.startRow; row <= endRow; row++) {
            if (!includeHidden && this.isRowHidden(sheetIndex, row)) {
                continue;
            }
            for (var col = range.startCol; col <= range.endCol; col++) {
                if (!includeHidden && this.isColHidden(sheetIndex, col)) {
                    continue;
                }
                var cellValue = this.getCellValue(sheetIndex, row, col);
                if (CellData.hasValue(cellValue.text)) {
                    result.push(cellValue);
                }
            }
        }
        return result;
    };
    LocalDataProvider.prototype.searchText = function (sheetIndex, text) {
        var _this = this;
        var _a;
        var result = [];
        var sheet = this.getSheetByIndex(sheetIndex);
        if (sheet) {
            var cellData = ((_a = sheet.worksheet) === null || _a === void 0 ? void 0 : _a.cellData) || [];
            cellData.forEach(function (rowData, rowIndex) {
                (rowData || []).forEach(function (cell, colIndex) {
                    var cellValue = _this.getCellValue(sheetIndex, rowIndex, colIndex);
                    if (cellValue.text.includes(text)) {
                        result.push(cellValue);
                    }
                });
            });
        }
        return result;
    };
    LocalDataProvider.prototype.getThemeColor = function (themeId) {
        return getThemeColor.getThemeColor(themeId, this.workbook);
    };
    /**
     * 获取默认字体高宽
     * @param ctx
     * @returns
     */
    LocalDataProvider.prototype.getDefaultFontSize = function () {
        if (this.defaultFontSize) {
            return this.defaultFontSize;
        }
        var offscreen = new OffscreenCanvas(256, 256);
        var ctx = offscreen.getContext('2d');
        var defaultFont = genFontStr.genFontStr(this.defaultFontStyle);
        ctx.font = defaultFont;
        var size = measureTextWithCache.measureTextWithCache(ctx, defaultFont, '1');
        this.defaultFontSize = size;
        return this.defaultFontSize;
    };
    LocalDataProvider.prototype.clearDefaultFontSizeCache = function () {
        this.defaultFontSize = undefined;
    };
    LocalDataProvider.prototype.getDefaultFontStyle = function () {
        return this.defaultFontStyle;
    };
    LocalDataProvider.prototype.getMergeCells = function (sheetIndex) {
        var _a;
        var sheet = this.getSheetByIndex(sheetIndex);
        if (sheet) {
            return ((_a = sheet.worksheet) === null || _a === void 0 ? void 0 : _a.mergeCells) || [];
        }
        return [];
    };
    LocalDataProvider.prototype.getDrawing = function (sheetIndex) {
        var _a;
        var sheet = this.getSheetByIndex(sheetIndex);
        if (sheet) {
            return ((_a = sheet.worksheet) === null || _a === void 0 ? void 0 : _a.drawing) || null;
        }
        return null;
    };
    LocalDataProvider.prototype.getConditionalFormatting = function (sheetIndex) {
        var _a;
        var sheet = this.getSheetByIndex(sheetIndex);
        if (sheet) {
            return ((_a = sheet.worksheet) === null || _a === void 0 ? void 0 : _a.conditionalFormatting) || [];
        }
        return [];
    };
    LocalDataProvider.prototype.getDxf = function (index) {
        var _a, _b, _c;
        return ((_c = (_b = (_a = this.workbook.styleSheet) === null || _a === void 0 ? void 0 : _a.dxfs) === null || _b === void 0 ? void 0 : _b.dxf) === null || _c === void 0 ? void 0 : _c[index]) || null;
    };
    LocalDataProvider.prototype.is1904 = function () {
        var _a;
        return ((_a = this.workbook.workbookPr) === null || _a === void 0 ? void 0 : _a.date1904) || false;
    };
    /**
     * 设置行排序
     */
    LocalDataProvider.prototype.sortColumn = function (sheetIndex, range, sortOrder) {
        var _a;
        var sheet = this.getSheetByIndex(sheetIndex);
        if (sheet) {
            var cellData = ((_a = sheet.worksheet) === null || _a === void 0 ? void 0 : _a.cellData) || [];
            sortByRange.sortByRange(cellData, range, sortOrder);
        }
    };
    return LocalDataProvider;
}());

exports.LocalDataProvider = LocalDataProvider;
