'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/**
 * 缓存解析结果
 */
var addressCache = {};
/**
 * 将 A1 转成 {col: 0, row: 0}
 * 从 exceljs 中拷贝过来的方法
 * 简单进行了修改，必须同时有行和列，如果只有一个就用 lettersToNumber
 * 返回结果是从 0 开始的
 * @param value
 */
function decodeAddress(value) {
    var addr = value.length < 5 && addressCache[value];
    if (addr) {
        return addr;
    }
    var hasCol = false;
    var col = '';
    var colNumber = 0;
    var hasRow = false;
    var row = '';
    var rowNumber = 0;
    for (var i = 0, char = void 0; i < value.length; i++) {
        char = value.charCodeAt(i);
        // col should before row
        if (!hasRow && char >= 65 && char <= 90) {
            // 65 = 'A'.charCodeAt(0)
            // 90 = 'Z'.charCodeAt(0)
            hasCol = true;
            col += value[i];
            // colNumber starts from 1
            colNumber = colNumber * 26 + char - 64;
        }
        else if (char >= 48 && char <= 57) {
            // 48 = '0'.charCodeAt(0)
            // 57 = '9'.charCodeAt(0)
            hasRow = true;
            row += value[i];
            // rowNumber starts from 0
            rowNumber = rowNumber * 10 + char - 48;
        }
        else if (hasRow && hasCol && char !== 36) {
            // 36 = '$'.charCodeAt(0)
            break;
        }
    }
    if (colNumber > 16384) {
        throw new Error("Out of bounds. Invalid column letter: ".concat(col));
    }
    // in case $row$col
    value = col + row;
    var address = {
        col: colNumber - 1,
        row: rowNumber - 1
    };
    // mem fix - cache only the tl 100x100 square
    if (colNumber && colNumber <= 100 && rowNumber && rowNumber <= 100) {
        addressCache[value] = address;
    }
    return address;
}
/**
 * 将 A 转成 0
 * @param columnName
 * @returns
 */
function columnNameToNumber(columnName) {
    columnName = columnName.toUpperCase();
    var len = columnName.length;
    var number = 0;
    for (var i = 0; i < len; i++) {
        var code = columnName.charCodeAt(i);
        if (!isNaN(code)) {
            number += (code - 64) * Math.pow(26, (len - i - 1));
        }
    }
    return number - 1;
}

exports.columnNameToNumber = columnNameToNumber;
exports.decodeAddress = decodeAddress;
