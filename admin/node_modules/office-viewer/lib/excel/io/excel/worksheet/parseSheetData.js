'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var ExcelTypes = require('../../../../openxml/ExcelTypes.js');
var ICell = require('../../../types/worksheet/ICell.js');
var decodeAddress = require('../util/decodeAddress.js');
var autoParse = require('../../../../common/autoParse.js');

/**
 * 解析 sheetData
 */
function parseSheetData(sheetDataNode, sharedStrings) {
    var e_1, _a, e_2, _b, e_3, _c, e_4, _d;
    var rows = [];
    var cellData = [];
    try {
        for (var _e = tslib.__values(sheetDataNode.children || []), _f = _e.next(); !_f.done; _f = _e.next()) {
            var rowNode = _f.value;
            // 这里不自动填充默认值，因为数据量可能很大，后面代码里判断
            var row = autoParse.autoParse(rowNode, ExcelTypes.CT_Row_Attributes);
            // 行号，改成从 0 开始
            var r = (row.r || 1) - 1;
            rows[r] = row;
            try {
                for (var _g = (e_2 = void 0, tslib.__values(rowNode.children || [])), _h = _g.next(); !_h.done; _h = _g.next()) {
                    var cellNode = _h.value;
                    var cell = autoParse.autoParse(cellNode, ICell.CT_Cell_Attributes);
                    var cellType = cell.t;
                    var styleIndex = cell.s;
                    /**
                     * 列号，改成从 0 开始
                     */
                    var colNumber = decodeAddress.decodeAddress(cell.r).col;
                    // 开始解析 cell 里的数据
                    var value = '';
                    var formula = '';
                    try {
                        for (var _j = (e_3 = void 0, tslib.__values(cellNode.children || [])), _k = _j.next(); !_k.done; _k = _j.next()) {
                            var cellNodeChild = _k.value;
                            var tag = cellNodeChild.tag;
                            switch (tag) {
                                case 'v':
                                    // shared string
                                    if (cellType === 's') {
                                        var index = parseInt(cellNodeChild.text || '');
                                        value = sharedStrings[index];
                                    }
                                    else if (cellType == 'd') {
                                        value = {
                                            type: 'date',
                                            value: cellNodeChild.text || ''
                                        };
                                    }
                                    else {
                                        value = cellNodeChild.text || '';
                                    }
                                    break;
                                case 'f':
                                    formula = cellNodeChild.text || '';
                                    break;
                                case 'is':
                                    try {
                                        // 这种基本上是 inlineStr
                                        for (var _l = (e_4 = void 0, tslib.__values(cellNodeChild.children || [])), _m = _l.next(); !_m.done; _m = _l.next()) {
                                            var isNode = _m.value;
                                            var tag_1 = isNode.tag;
                                            if (tag_1 === 't' && cellType === 'inlineStr') {
                                                value = isNode.text || '';
                                            }
                                        }
                                    }
                                    catch (e_4_1) { e_4 = { error: e_4_1 }; }
                                    finally {
                                        try {
                                            if (_m && !_m.done && (_d = _l.return)) _d.call(_l);
                                        }
                                        finally { if (e_4) throw e_4.error; }
                                    }
                                    break;
                                default:
                                    break;
                            }
                            if (formula && typeof value === 'string') {
                                value = {
                                    type: 'formula',
                                    formula: formula,
                                    value: value
                                };
                            }
                            if (styleIndex) {
                                if (typeof value === 'string') {
                                    value = {
                                        type: 'style',
                                        s: styleIndex,
                                        value: value
                                    };
                                }
                                else if (typeof value === 'object') {
                                    value.s = styleIndex;
                                }
                            }
                            if (cellData[r]) {
                                cellData[r][colNumber] = value;
                            }
                            else {
                                cellData[r] = [];
                                cellData[r][colNumber] = value;
                            }
                        }
                    }
                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                    finally {
                        try {
                            if (_k && !_k.done && (_c = _j.return)) _c.call(_j);
                        }
                        finally { if (e_3) throw e_3.error; }
                    }
                    // 有些节点没数据，就只有边框样式或合并单元格
                    if (!cellNode.children || cellNode.children.length === 0) {
                        var emptyValue = {
                            type: 'blank',
                            s: styleIndex
                        };
                        if (cellData[r]) {
                            cellData[r][colNumber] = emptyValue;
                        }
                        else {
                            cellData[r] = [];
                            cellData[r][colNumber] = emptyValue;
                        }
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return {
        rows: rows,
        cellData: cellData
    };
}

exports.parseSheetData = parseSheetData;
