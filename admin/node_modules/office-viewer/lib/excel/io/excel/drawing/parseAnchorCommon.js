'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var xml = require('../../../../util/xml.js');
var getRelationPath = require('./getRelationPath.js');
var parseChart = require('./parseChart.js');
var parsePic = require('./parsePic.js');
var parseShape = require('./parseShape.js');

/**
 * 解析一些 anchor 的通用属性，这些属性大多需要读取另一个文件，所以直接在这里解析简化后续操作
 */
function parseAnchorCommon(workbook, parser, drawingPath, drawingNode, relationships, anchorCommon, element) {
    return tslib.__awaiter(this, void 0, void 0, function () {
        var _a, _b, child, tag, _c, chartNode, chartPath, chartXML, e_1_1;
        var e_1, _d;
        return tslib.__generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    _e.trys.push([0, 11, 12, 13]);
                    _a = tslib.__values(drawingNode.children || []), _b = _a.next();
                    _e.label = 1;
                case 1:
                    if (!!_b.done) return [3 /*break*/, 10];
                    child = _b.value;
                    tag = child.tag;
                    _c = tag;
                    switch (_c) {
                        case 'xdr:pic': return [3 /*break*/, 2];
                        case 'xdr:sp': return [3 /*break*/, 3];
                        case 'xdr:from': return [3 /*break*/, 4];
                        case 'xdr:to': return [3 /*break*/, 4];
                        case 'xdr:clientData': return [3 /*break*/, 4];
                        case 'xdr:graphicFrame': return [3 /*break*/, 5];
                    }
                    return [3 /*break*/, 8];
                case 2:
                    anchorCommon.pic = parsePic.parsePic(child, relationships, parser, drawingPath);
                    return [3 /*break*/, 9];
                case 3:
                    anchorCommon.shape = parseShape.parseShape(workbook, child, element);
                    return [3 /*break*/, 9];
                case 4: 
                // 这些前面已经自动解析了
                return [3 /*break*/, 9];
                case 5:
                    chartNode = xml.getNodeByTagName(child, 'c:chart', true);
                    if (!chartNode) return [3 /*break*/, 7];
                    chartPath = getRelationPath.getRelationPath(drawingPath, relationships, chartNode.attrs['r:id']);
                    if (!chartPath) return [3 /*break*/, 7];
                    return [4 /*yield*/, xml.xml2json(parser.getString(chartPath))];
                case 6:
                    chartXML = _e.sent();
                    anchorCommon.chartSpace = parseChart.parseChart(chartXML);
                    _e.label = 7;
                case 7: return [3 /*break*/, 9];
                case 8:
                    console.warn("unhandled tag: ".concat(tag));
                    _e.label = 9;
                case 9:
                    _b = _a.next();
                    return [3 /*break*/, 1];
                case 10: return [3 /*break*/, 13];
                case 11:
                    e_1_1 = _e.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 13];
                case 12:
                    try {
                        if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 13: return [2 /*return*/];
            }
        });
    });
}

exports.parseAnchorCommon = parseAnchorCommon;
