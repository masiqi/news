'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var EventEmitter = require('../util/EventEmitter.js');
var StyleSheet = require('./StyleSheet.js');
var ExcelRender = require('./render/ExcelRender.js');
var Sheet = require('./sheet/Sheet.js');
var handleKeydown = require('./render/keyboard/handleKeydown.js');
var handlePaste = require('./render/keyboard/handlePaste.js');
var FormulaBar = require('./render/formulaBar/FormulaBar.js');
var SheetTabBar = require('./render/sheetTab/SheetTabBar.js');
var H = require('../util/H.js');
var lang = require('./lang/lang.js');
var renderInIframe = require('./print/renderInIframe.js');

/**
 * 这个类作为主要入口，包含运行时数据及相关操作
 */
var Workbook = /** @class */ (function () {
    function Workbook(container, workbookData, dataProvider, renderOptions, sheetName) {
        var _this = this;
        /**
         * 所有的工作表
         */
        this.sheets = [];
        /**
         * UI 交互事件监听，主要是和数据无关的变化
         */
        this.uiEvent = new EventEmitter.EventEmitter();
        this.renderOptions = renderOptions;
        this.container = container;
        this.dataProvider = dataProvider;
        dataProvider.getSheets().forEach(function (sheetData, index) {
            _this.sheets.push(new Sheet.Sheet(index, dataProvider, sheetData, _this, renderOptions));
        });
        this.workbookData = workbookData;
        this.initActiveSheet();
        this.initDom(container);
        // 公式栏
        this.formulaBar = new FormulaBar.FormulaBar(this.formulaBarContainer, this, renderOptions);
        this.styleSheet = new StyleSheet.StyleSheet(dataProvider);
        this.excelRender = new ExcelRender.ExcelRender(this.contentContainer, this.dataContainer, this, dataProvider, renderOptions);
        // 底部 sheet 切换
        this.sheetTabBar = new SheetTabBar.SheetTabBar(this.sheetTabBarContainer, this, renderOptions);
        this.handleKeydown = this.handleKeydown.bind(this);
        document.addEventListener('keydown', this.handleKeydown);
        this.handlePaste = this.handlePaste.bind(this);
        document.addEventListener('paste', this.handlePaste);
        this.translator = lang.getTranslate(this.renderOptions.locale);
    }
    Workbook.prototype.initActiveSheet = function () {
        var _a;
        var activeTabIndex = 0;
        if ((_a = this.workbookData.workbookView) === null || _a === void 0 ? void 0 : _a.activeTab) {
            activeTabIndex = this.workbookData.workbookView.activeTab;
        }
        this.currentSheet = this.sheets[activeTabIndex];
    };
    /**
     * 初始化 dom 结构，这个要先运行才能保证后面 Canvas 能正确拿到高宽
     */
    Workbook.prototype.initDom = function (container) {
        // 清空容器
        container.innerHTML = '';
        container.classList.add('ov-excel');
        if (this.renderOptions.showFormulaBar) {
            this.formulaBarContainer = H.H('div', {
                className: 'ov-excel-formula-bar',
                parent: container
            });
        }
        this.contentContainer = H.H('div', {
            className: 'ov-excel-content',
            parent: container
        });
        this.dataContainer = H.H('div', {
            className: 'ov-excel-data',
            parent: this.contentContainer
        });
        if (this.renderOptions.showSheetTabBar) {
            this.sheetTabBarContainer = H.H('div', {
                className: 'ov-excel-sheet-tab-bar',
                parent: container
            });
        }
    };
    /**
     * 销毁
     */
    Workbook.prototype.destroy = function () {
        document.removeEventListener('keydown', this.handleKeydown);
    };
    Workbook.prototype.handleKeydown = function (e) {
        handleKeydown.handleKeydown(e, this);
    };
    Workbook.prototype.handlePaste = function (e) {
        handlePaste.handlePaste(e);
    };
    /**
     * 初始渲染
     */
    Workbook.prototype.render = function () {
        this.excelRender.draw();
    };
    /**
     * 设置当前显示的 sheet
     */
    Workbook.prototype.setActiveSheet = function (sheetName) {
        var e_1, _a;
        if (!sheetName) {
            this.currentSheet = this.sheets[0];
            this.uiEvent.emit('SWITCH_SHEET', this.currentSheet);
        }
        else {
            try {
                for (var _b = tslib.__values(this.sheets), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var sheet = _c.value;
                    if (sheet.getSheetName() === sheetName && this.currentSheet !== sheet) {
                        this.currentSheet = sheet;
                        this.uiEvent.emit('SWITCH_SHEET', this.currentSheet);
                        break;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (!this.currentSheet) {
                console.warn("Workbook \u4E2D\u6CA1\u6709\u627E\u5230 ".concat(sheetName, " \u5BF9\u5E94\u7684 sheet\uFF0C\u6240\u4EE5\u4F7F\u7528\u7B2C\u4E00\u4E2A sheet"));
            }
        }
    };
    /**
     * 获取当前的 sheet
     */
    Workbook.prototype.getActiveSheet = function () {
        return this.currentSheet;
    };
    /**
     * 查找对应的 sheet
     */
    Workbook.prototype.getSheetByName = function (sheet) {
        var e_2, _a;
        try {
            for (var _b = tslib.__values(this.sheets), _c = _b.next(); !_c.done; _c = _b.next()) {
                var s = _c.value;
                if (s.getSheetName() === sheet) {
                    return s;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return null;
    };
    /**
     * 获取样式表
     */
    Workbook.prototype.getStyleSheet = function () {
        return this.styleSheet;
    };
    /**
     * 获取可视区域大小
     */
    Workbook.prototype.getViewpointSize = function () {
        var _a = this.contentContainer.getBoundingClientRect(), width = _a.width, height = _a.height;
        var currentSheet = this.currentSheet;
        var zoom = currentSheet.getZoomLevel();
        return {
            width: width / zoom,
            height: height / zoom
        };
    };
    Workbook.prototype.getDataProvider = function () {
        return this.dataProvider;
    };
    Workbook.prototype.is1904 = function () {
        return this.dataProvider.is1904();
    };
    Workbook.prototype.getContainer = function () {
        return this.container;
    };
    Workbook.prototype.getDataContainer = function () {
        return this.dataContainer;
    };
    Workbook.prototype.updateDataContainerSize = function (rowHeaderWidth, colHeaderHeight) {
        this.dataContainer.style.left = "".concat(rowHeaderWidth, "px");
        this.dataContainer.style.top = "".concat(colHeaderHeight, "px");
    };
    Workbook.prototype.getWorkbookData = function () {
        return this.workbookData;
    };
    /**
     * 在 iframe 中打印
     */
    Workbook.prototype.renderInIframe = function (iframe) {
        renderInIframe.renderInIframe(iframe, this);
    };
    return Workbook;
}());

exports.Workbook = Workbook;
