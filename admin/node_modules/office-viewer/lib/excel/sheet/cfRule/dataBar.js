'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var getMinMax = require('./getMinMax.js');
var color = require('../../../util/color.js');
var number = require('../../../util/number.js');

/**
 * 查找对应的扩展
 */
function findExt(extLst, sheetExtLst) {
    var e_1, _a, e_2, _b, e_3, _c, e_4, _d, e_5, _e;
    var _f;
    if (!sheetExtLst) {
        return null;
    }
    try {
        for (var _g = tslib.__values(extLst || []), _h = _g.next(); !_h.done; _h = _g.next()) {
            var exts = _h.value;
            try {
                for (var _j = (e_2 = void 0, tslib.__values(exts.ext || [])), _k = _j.next(); !_k.done; _k = _j.next()) {
                    var ext = _k.value;
                    var x14Id = ext['x14:id'];
                    if (x14Id) {
                        try {
                            for (var _l = (e_3 = void 0, tslib.__values(sheetExtLst.ext || [])), _m = _l.next(); !_m.done; _m = _l.next()) {
                                var sheetExt = _m.value;
                                var x14CFs = (_f = sheetExt['x14:conditionalFormattings']) === null || _f === void 0 ? void 0 : _f['x14:conditionalFormatting'];
                                try {
                                    for (var _o = (e_4 = void 0, tslib.__values(x14CFs || [])), _p = _o.next(); !_p.done; _p = _o.next()) {
                                        var x14CFItem = _p.value;
                                        var x14CfRules = x14CFItem['x14:cfRule'];
                                        try {
                                            for (var _q = (e_5 = void 0, tslib.__values(x14CfRules || [])), _r = _q.next(); !_r.done; _r = _q.next()) {
                                                var x14CfRule = _r.value;
                                                if (x14CfRule.id === x14Id) {
                                                    return x14CfRule['x14:dataBar'];
                                                }
                                            }
                                        }
                                        catch (e_5_1) { e_5 = { error: e_5_1 }; }
                                        finally {
                                            try {
                                                if (_r && !_r.done && (_e = _q.return)) _e.call(_q);
                                            }
                                            finally { if (e_5) throw e_5.error; }
                                        }
                                    }
                                }
                                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                                finally {
                                    try {
                                        if (_p && !_p.done && (_d = _o.return)) _d.call(_o);
                                    }
                                    finally { if (e_4) throw e_4.error; }
                                }
                            }
                        }
                        catch (e_3_1) { e_3 = { error: e_3_1 }; }
                        finally {
                            try {
                                if (_m && !_m.done && (_c = _l.return)) _c.call(_l);
                            }
                            finally { if (e_3) throw e_3.error; }
                        }
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_k && !_k.done && (_b = _j.return)) _b.call(_j);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_h && !_h.done && (_a = _g.return)) _a.call(_g);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return null;
}
function getGradientColor(c) {
    var color$1 = new color.Color(c);
    // 根据 Excel 里的展现判断的
    color$1.changeHsl(0.93, 'l', 'set');
    return color$1.toHex();
}
/**
 * 构建展现配置
 */
function buildDataBarDisplay(min, max, worksheet, cfRule) {
    var dataBarDisplay = {
        showValue: true,
        gradient: true,
        border: false,
        percent: 0,
        color: '',
        colorGradient: '',
        borderColor: '',
        negativeFillColor: '',
        negativeFillColorGradient: '',
        negativeBorderColor: '',
        axisColor: '',
        direction: 'leftToRight',
        biDirectional: false
    };
    var dataBar = cfRule.dataBar;
    var dataProvider = worksheet.workbook.getDataProvider();
    if (dataBar.color) {
        dataBarDisplay.color = dataProvider.getColor(dataBar.color);
        if (dataBarDisplay.color !== 'none') {
            dataBarDisplay.colorGradient = getGradientColor(dataBarDisplay.color);
        }
    }
    if (dataBar.showValue === false) {
        dataBarDisplay.showValue = false;
    }
    // Excel 2010 之后的版本才有的扩展
    if (cfRule.extLst) {
        var x14DataBar = findExt(cfRule.extLst, worksheet.getExtLst());
        if (!x14DataBar) {
            console.warn('cx14DataBar not found', cfRule.extLst);
            return dataBarDisplay;
        }
        if (x14DataBar.gradient === false) {
            dataBarDisplay.gradient = false;
        }
        if (number.lt(min, 0) && number.gt(max, 0)) {
            dataBarDisplay.biDirectional = true;
        }
        if (x14DataBar.direction) {
            dataBarDisplay.direction = x14DataBar.direction;
        }
        if (x14DataBar.border === true) {
            dataBarDisplay.border = true;
        }
        if (x14DataBar['x14:borderColor']) {
            dataBarDisplay.borderColor = dataProvider.getColor(x14DataBar['x14:borderColor']);
        }
        if (x14DataBar['x14:negativeFillColor']) {
            dataBarDisplay.negativeFillColor = dataProvider.getColor(x14DataBar['x14:negativeFillColor']);
            if (dataBarDisplay.negativeFillColor !== 'none') {
                dataBarDisplay.negativeFillColorGradient = getGradientColor(dataBarDisplay.negativeFillColor);
            }
        }
        if (x14DataBar.negativeBarColorSameAsPositive === true) {
            dataBarDisplay.negativeFillColor = dataBarDisplay.color;
            dataBarDisplay.negativeFillColorGradient = dataBarDisplay.colorGradient;
        }
        if (x14DataBar.negativeBarBorderColorSameAsPositive === false) {
            if (x14DataBar['x14:negativeBorderColor']) {
                dataBarDisplay.negativeBorderColor = dataProvider.getColor(x14DataBar['x14:negativeBorderColor']);
            }
        }
        else {
            dataBarDisplay.negativeBorderColor = dataBarDisplay.borderColor;
        }
        if (x14DataBar['x14:axisColor']) {
            dataBarDisplay.axisColor = dataProvider.getColor(x14DataBar['x14:axisColor']);
        }
    }
    return dataBarDisplay;
}
/**
 * dataBar
 */
function dataBar(sheet, cellInfo, ranges, cfRule) {
    var _a, _b, _c;
    if (!cfRule.dataBar) {
        return false;
    }
    if (((_a = cfRule.dataBar.cfvo) === null || _a === void 0 ? void 0 : _a.length) !== 2) {
        console.warn('dataBar cfvo length !== 2', cfRule.dataBar.cfvo);
        return false;
    }
    var rangeCache = sheet.getRangeCache();
    var ruleKey = JSON.stringify(cfRule);
    var dataBarCache = rangeCache.get(ranges, ruleKey);
    if (!dataBarCache) {
        var rangeValues = sheet.getCellValueByRanges(ranges);
        var _d = getMinMax.getMinMax(rangeValues), min = _d.min, max = _d.max;
        var cfvo1 = (_b = cfRule.dataBar.cfvo) === null || _b === void 0 ? void 0 : _b[0];
        var cfvo2 = (_c = cfRule.dataBar.cfvo) === null || _c === void 0 ? void 0 : _c[1];
        if (cfvo1.type === 'num') {
            min = parseFloat(cfvo1.val || '0');
        }
        if (cfvo2.type === 'num') {
            max = parseFloat(cfvo2.val || '1');
        }
        // todo，还得支持 percent percentile formula
        if (min === undefined || max === undefined) {
            return false;
        }
        // 避免除数为 0
        if (min === max) {
            return false;
        }
        var dataBarDisplay_1 = buildDataBarDisplay(min, max, sheet, cfRule);
        dataBarCache = {
            min: min,
            max: max,
            dataBarDisplay: dataBarDisplay_1
        };
        rangeCache.set(ranges, ruleKey, dataBarCache);
    }
    var value = parseFloat(cellInfo.value);
    var dataBarDisplay = dataBarCache.dataBarDisplay;
    if (dataBarDisplay.biDirectional) {
        if (number.lt(value, 0)) {
            var percent = value / dataBarCache.min;
            dataBarDisplay.percent = -percent;
        }
        else if (number.gt(value, 0)) {
            var percent = value / dataBarCache.max;
            dataBarDisplay.percent = percent;
        }
        else {
            dataBarDisplay.percent = 0;
        }
    }
    else {
        var percent = (value - dataBarCache.min) / (dataBarCache.max - dataBarCache.min);
        dataBarDisplay.percent = percent;
    }
    cellInfo.dataBarDisplay = dataBarDisplay;
    return true;
}

exports.dataBar = dataBar;
