'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var color = require('../../../util/color.js');
var getMinMax = require('./getMinMax.js');

/**
 * 色阶
 */
function colorScale(sheet, cellInfo, ranges, cfRule) {
    var e_1, _a, e_2, _b;
    var rangeCache = sheet.getRangeCache();
    var ruleKey = JSON.stringify(cfRule);
    var rangeColorScale = rangeCache.get(ranges, ruleKey);
    var colorScale = cfRule.colorScale;
    if (!colorScale) {
        return false;
    }
    if (!rangeColorScale) {
        var dataProvider = sheet.workbook.getDataProvider();
        var cfvo = colorScale.cfvo;
        var color$1 = colorScale.color;
        if (!cfvo || !color$1) {
            console.warn('色阶规则不完整');
            return false;
        }
        if (cfvo.length !== color$1.length) {
            console.warn('色阶规则不匹配');
            return false;
        }
        var rangeValues = sheet.getCellValueByRanges(ranges);
        var _c = getMinMax.getMinMax(rangeValues), min = _c.min, max = _c.max;
        if (min === undefined || max === undefined) {
            return false;
        }
        var colors = [];
        try {
            for (var _d = tslib.__values(cfvo.entries()), _e = _d.next(); !_e.done; _e = _d.next()) {
                var _f = tslib.__read(_e.value, 2), i = _f[0], cfvoItem = _f[1];
                var type = cfvoItem.type;
                switch (type) {
                    case 'min': {
                        var colorValue = dataProvider.getColor(color$1[i]);
                        if (colorValue !== 'none') {
                            colors.push({
                                percent: 0,
                                color: new color.Color(colorValue)
                            });
                        }
                        break;
                    }
                    case 'max': {
                        var colorValue = dataProvider.getColor(color$1[i]);
                        if (colorValue !== 'none') {
                            colors.push({
                                percent: 1,
                                color: new color.Color(colorValue)
                            });
                        }
                        break;
                    }
                    case 'percentile': {
                        var val = parseInt(cfvoItem.val || '50', 10);
                        var percent_1 = val / 100;
                        var colorValue = dataProvider.getColor(color$1[i]);
                        if (colorValue !== 'none') {
                            colors.push({
                                percent: percent_1,
                                color: new color.Color(colorValue)
                            });
                        }
                        break;
                    }
                    default:
                        console.warn('未知的 cfvo type', type);
                        break;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (colors.length < 2) {
            console.warn('色彩数量不足');
        }
        // 排序一下避免 xml 里乱序
        colors.sort(function (a, b) { return a.percent - b.percent; });
        rangeColorScale = {
            min: min,
            max: max,
            colors: colors
        };
        rangeCache.set(ranges, ruleKey, rangeColorScale);
    }
    var value = parseFloat(cellInfo.value);
    // 当前值所在的百分比
    var percent = (value - rangeColorScale.min) / (rangeColorScale.max - rangeColorScale.min);
    // 查找所属色阶
    var endColor;
    var endPercent = 1;
    var startPercent = 0;
    var startColor = rangeColorScale.colors[0].color;
    try {
        for (var _g = tslib.__values(rangeColorScale.colors), _h = _g.next(); !_h.done; _h = _g.next()) {
            var color$1 = _h.value;
            if (percent >= startPercent && percent < color$1.percent) {
                endColor = color$1.color;
                endPercent = color$1.percent;
                break;
            }
            startColor = color$1.color;
            startPercent = color$1.percent;
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
        }
        finally { if (e_2) throw e_2.error; }
    }
    if (endColor === undefined) {
        endColor = rangeColorScale.colors[rangeColorScale.colors.length - 1].color;
    }
    var percentRange = endPercent - startPercent;
    // 避免除 0
    if (percentRange === 0) {
        percentRange = 1;
    }
    var backgroundColor = color.interpolateColor(startColor, endColor, (percent - startPercent) / percentRange);
    cellInfo.fill = {
        patternFill: {
            bgColor: { rgb: 'FF' + backgroundColor }
        }
    };
    return true;
}

exports.colorScale = colorScale;
