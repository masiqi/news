'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');

var radioId = 0;
/**
 * radio 的简单封装
 */
var Radio = /** @class */ (function () {
    function Radio(container, options, defaultValue, onChange) {
        var e_1, _a;
        var radioWrapper = document.createElement('div');
        container.appendChild(radioWrapper);
        radioWrapper.className = 'excel-radio-wrapper';
        var _loop_1 = function (option) {
            var id = "".concat(radioId++, "-").concat(option.value);
            var radio = document.createElement('input');
            radio.type = 'radio';
            radio.value = option.value;
            radio.checked = option.value === defaultValue;
            radio.name = 'excel-radio';
            radio.id = id;
            radio.onchange = function () {
                onChange === null || onChange === void 0 ? void 0 : onChange(radio.value);
            };
            radioWrapper.appendChild(radio);
            var label = document.createElement('label');
            label.innerText = option.text;
            label.htmlFor = id;
            radioWrapper.appendChild(label);
        };
        try {
            for (var options_1 = tslib.__values(options), options_1_1 = options_1.next(); !options_1_1.done; options_1_1 = options_1.next()) {
                var option = options_1_1.value;
                _loop_1(option);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (options_1_1 && !options_1_1.done && (_a = options_1.return)) _a.call(options_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.element = radioWrapper;
    }
    Radio.prototype.getValue = function () {
        var radio = this.element.querySelector('input:checked');
        return radio === null || radio === void 0 ? void 0 : radio.value;
    };
    return Radio;
}());

exports.Radio = Radio;
