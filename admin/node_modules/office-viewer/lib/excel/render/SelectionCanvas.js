'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var Canvas = require('./Canvas.js');
var drawCellRanges = require('./selection/drawCellRanges.js');

/**
 * 选区使用的 canvas，独立是为了提高渲染性能，在选取变的时候只有这里变化
 */
var SelectionCanvas = /** @class */ (function (_super) {
    tslib.__extends(SelectionCanvas, _super);
    function SelectionCanvas(workbook, dataProvider) {
        var _this = this;
        var _a = workbook.getViewpointSize(), width = _a.width, height = _a.height;
        _this = _super.call(this, width, height, workbook.renderOptions.scale || 1, 'ov-excel-selection-canvas ov-excel-canvas') || this;
        _this.workbook = workbook;
        _this.renderOptions = workbook.renderOptions;
        _this.dataProvider = dataProvider;
        workbook.uiEvent.on('CHANGE_SELECTION', _this.handleChangeSelection.bind(_this));
        workbook.uiEvent.on('AFTER_SCROLL', _this.draw.bind(_this));
        workbook.uiEvent.on('SWITCH_SHEET', _this.draw.bind(_this));
        workbook.uiEvent.on('DRAG_ROW_GRID_LINE', _this.dragRowGridLine.bind(_this));
        workbook.uiEvent.on('DRAG_COL_GRID_LINE', _this.dragColGridLine.bind(_this));
        workbook.uiEvent.on('DRAG_COL_GRID_LINE_END', function (col, width) {
            var sheet = _this.workbook.getActiveSheet();
            sheet.setColWidth(col, width);
            _this.clearTmpGridLine();
            workbook.uiEvent.emit('UPDATE_COL_WIDTH', col, width);
            _this.draw();
        });
        workbook.uiEvent.on('DRAG_ROW_GRID_LINE_END', function (row, height) {
            var sheet = _this.workbook.getActiveSheet();
            sheet.setRowHeight(row, height);
            _this.clearTmpGridLine();
            workbook.uiEvent.emit('UPDATE_ROW_HEIGHT', row, height);
            _this.draw();
        });
        return _this;
    }
    SelectionCanvas.prototype.handleChangeSelection = function (selection) {
        this.selection = selection;
        this.draw();
    };
    SelectionCanvas.prototype.dragRowGridLine = function (y) {
        if (y !== this.tmpRowGridLineY) {
            this.tmpRowGridLineY = y;
            this.draw();
        }
    };
    SelectionCanvas.prototype.dragColGridLine = function (x) {
        if (x !== this.tmpColGridLineX) {
            this.tmpColGridLineX = x;
            this.draw();
        }
    };
    SelectionCanvas.prototype.clearTmpGridLine = function () {
        this.tmpRowGridLineY = 0;
        this.tmpColGridLineX = 0;
        this.draw();
    };
    SelectionCanvas.prototype.draw = function () {
        this.clear();
        this.drawTmpGridLine();
        if (this.selection) {
            drawCellRanges.drawCellRanges(this.workbook, this, this.selection);
        }
    };
    SelectionCanvas.prototype.clearSelection = function () {
        this.selection = undefined;
        this.draw();
    };
    SelectionCanvas.prototype.drawTmpGridLine = function () {
        var _a = this.workbook.getViewpointSize(), width = _a.width, height = _a.height;
        if (this.tmpColGridLineX) {
            this.drawLine({
                x1: this.tmpColGridLineX,
                y1: 0,
                x2: this.tmpColGridLineX,
                y2: height
            }, this.renderOptions.dragGridLineColor);
        }
        if (this.tmpRowGridLineY) {
            this.drawLine({
                x1: 0,
                y1: this.tmpRowGridLineY,
                x2: width,
                y2: this.tmpRowGridLineY
            }, this.renderOptions.dragGridLineColor);
        }
    };
    return SelectionCanvas;
}(Canvas.Canvas));

exports.SelectionCanvas = SelectionCanvas;
