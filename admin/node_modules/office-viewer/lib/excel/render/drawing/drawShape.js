'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var presetShape = require('../../../openxml/drawing/presetShape.js');
var shapeToSVG = require('../../../openxml/drawing/svg/shapeToSVG.js');
var Rect = require('../Rect.js');
var drawTextInCell = require('../cell/drawTextInCell.js');

function convertIShapePropertiesToShapePr(shapePr) {
    var outline = shapePr.outline;
    var fillColor = shapePr.fillColor;
    var noFill = undefined;
    if (shapePr.noFill) {
        noFill = true;
    }
    return {
        outline: outline,
        fillColor: fillColor,
        noFill: noFill
    };
}
/**
 * 绘制 sheet 里的形状及文本框
 */
function drawShape(excelRender, currentSheet, canvas, displayRect, drawingRect, rowHeaderWidth, colHeaderHeight, sp) {
    var _a, _b, _c, _d, _e, _f, _g;
    return tslib.__awaiter(this, void 0, void 0, function () {
        var relativeDisplayRect, renderRect, workbook, dataProvider, spPr, prstGeom, prst, shape, avLst, _h, _j, gd, _k, _l, gd, svg, svgContent, svgURL, richText, alignment, anchor, cellInfo;
        var e_1, _m, e_2, _o;
        return tslib.__generator(this, function (_p) {
            switch (_p.label) {
                case 0:
                    relativeDisplayRect = {
                        x: 0,
                        y: 0,
                        width: displayRect.width,
                        height: displayRect.height
                    };
                    renderRect = {
                        x: drawingRect.x - rowHeaderWidth,
                        y: drawingRect.y - colHeaderHeight,
                        width: drawingRect.width,
                        height: drawingRect.height
                    };
                    if (!Rect.rectIntersect(renderRect, relativeDisplayRect)) return [3 /*break*/, 3];
                    workbook = currentSheet.getWorkbook();
                    dataProvider = workbook.getDataProvider();
                    spPr = sp.spPr;
                    prstGeom = spPr.prstGeom;
                    if (!(prstGeom && prstGeom.prst)) return [3 /*break*/, 2];
                    prst = prstGeom.prst;
                    shape = presetShape.presetShape[prst];
                    if (!shape) return [3 /*break*/, 2];
                    avLst = [];
                    try {
                        // 将自动解析的 avLst 转成之前手动解析的 ShapeGuide
                        for (_h = tslib.__values(((_a = prstGeom.avLst) === null || _a === void 0 ? void 0 : _a.gd) || []), _j = _h.next(); !_j.done; _j = _h.next()) {
                            gd = _j.value;
                            avLst.push({
                                n: gd.name,
                                f: gd.fmla
                            });
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_j && !_j.done && (_m = _h.return)) _m.call(_h);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    try {
                        // 将自动解析的 avLst 转成之前手动解析的 ShapeGuide
                        for (_k = tslib.__values(((_b = prstGeom.avLst) === null || _b === void 0 ? void 0 : _b.gd) || []), _l = _k.next(); !_l.done; _l = _k.next()) {
                            gd = _l.value;
                            avLst.push({
                                n: gd.name,
                                f: gd.fmla
                            });
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_l && !_l.done && (_o = _k.return)) _o.call(_k);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    svg = shapeToSVG.shapeToSVG(shape, avLst, convertIShapePropertiesToShapePr(spPr), drawingRect.width, drawingRect.height, {
                        lineColor: (_c = sp.styleColor) === null || _c === void 0 ? void 0 : _c.lnRefColor,
                        fillColor: (_d = sp.styleColor) === null || _d === void 0 ? void 0 : _d.fillRefColor,
                        fontColor: (_e = sp.styleColor) === null || _e === void 0 ? void 0 : _e.fontRefColor
                    });
                    svgContent = new XMLSerializer().serializeToString(svg);
                    svgURL = 'data:image/svg+xml;base64,' + btoa(svgContent);
                    return [4 /*yield*/, canvas.drawImageWithCache(svgURL, drawingRect.x - displayRect.x, drawingRect.y - displayRect.y, drawingRect.width, drawingRect.height)];
                case 1:
                    _p.sent();
                    _p.label = 2;
                case 2:
                    richText = sp.richText;
                    if (richText) {
                        alignment = {};
                        anchor = (_g = (_f = sp.txBody) === null || _f === void 0 ? void 0 : _f.bodyPr) === null || _g === void 0 ? void 0 : _g.anchor;
                        if (anchor) {
                            switch (anchor) {
                                case 't':
                                    alignment.vertical = 'top';
                                    break;
                                case 'ctr':
                                    alignment.vertical = 'center';
                                    break;
                                case 'b':
                                    alignment.vertical = 'bottom';
                                    break;
                            }
                        }
                        cellInfo = {
                            row: 0,
                            col: 0,
                            font: {},
                            text: '',
                            value: '',
                            alignment: alignment,
                            cellData: richText
                        };
                        drawTextInCell.drawTextInCell(excelRender, currentSheet, canvas.getContext(), dataProvider, cellInfo, drawingRect.x - displayRect.x, drawingRect.y - displayRect.y, drawingRect.width, drawingRect.height, 0, 0);
                    }
                    _p.label = 3;
                case 3: return [2 /*return*/];
            }
        });
    });
}

exports.drawShape = drawShape;
