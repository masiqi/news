'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var fromBarChart = require('./chart/fromBarChart.js');
var fromAreaChart = require('./chart/fromAreaChart.js');
var convertAxis = require('./chart/convertAxis.js');
var convertLegend = require('./chart/convertLegend.js');
var convertTitle = require('./chart/convertTitle.js');
var fromDoughnutChart = require('./chart/fromDoughnutChart.js');
var fromLineChart = require('./chart/fromLineChart.js');
var fromPieChart = require('./chart/fromPieChart.js');

/**
 * 将 chartSpace 配置转成 EChartOptions
 * P3365
 */
function convertToEChartOptions(workbook, chartSpace) {
    var chart = chartSpace.chart;
    console.log('chart', chart);
    if (!chart) {
        return null;
    }
    var title = convertTitle.convertTitle(chart.title);
    var grid = {
        backgroundColor: 'white',
        show: true
    };
    var echartsOptions = {
        title: title,
        grid: grid
    };
    var plotArea = chart.plotArea;
    if (!plotArea) {
        return null;
    }
    var categories = [];
    var series = [];
    if (plotArea.lineChart) {
        var result = fromLineChart.fromLineChart(workbook, plotArea.lineChart);
        categories = result.categories;
        series = series.concat(result.series);
    }
    if (plotArea.barChart) {
        var result = fromBarChart.fromBarChart(workbook, plotArea.barChart);
        categories = result.categories;
        series = series.concat(result.series);
    }
    if (plotArea.areaChart) {
        var result = fromAreaChart.fromAreaChart(workbook, plotArea.areaChart);
        categories = result.categories;
        series = series.concat(result.series);
    }
    if (plotArea.pieChart) {
        var result = fromPieChart.fromPieChart(workbook, plotArea.pieChart);
        categories = result.categories;
        series = series.concat(result.series);
    }
    if (plotArea.doughnutChart) {
        var result = fromDoughnutChart.fromDoughnutChart(workbook, plotArea.doughnutChart);
        categories = result.categories;
        series = series.concat(result.series);
    }
    var _a = convertAxis.convertAxis(categories, plotArea.catAx, plotArea.valAx), xAxis = _a.xAxis, yAxis = _a.yAxis;
    var legend = convertLegend.convertLegend(categories, chart.legend);
    return tslib.__assign(tslib.__assign({}, echartsOptions), { legend: legend, xAxis: xAxis, yAxis: yAxis, series: series });
}

exports.convertToEChartOptions = convertToEChartOptions;
