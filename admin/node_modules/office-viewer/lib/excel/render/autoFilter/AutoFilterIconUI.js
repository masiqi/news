'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var H = require('../../../util/H.js');
var onClickOutside = require('../../../util/onClickOutside.js');
var Icons = require('../Icons.js');
var AutoFilterMenuUI = require('./AutoFilterMenuUI.js');
var hasFilterColumn = require('./filterColumn/hasFilterColumn.js');
var getColumnSortOrder = require('./sortState/getColumnSortOrder.js');

var AutoFilterIconUI = /** @class */ (function () {
    function AutoFilterIconUI(sheet, dataContainer, autoFilter, rangeRef, colIndex, fid, headerRowCount) {
        if (headerRowCount === void 0) { headerRowCount = 1; }
        var _this = this;
        this.sheet = sheet;
        this.rangeRef = rangeRef;
        this.colIndex = colIndex;
        this.autoFilter = autoFilter;
        var filterIconContainer = H.H('div', {
            className: 'ov-excel-auto-filter-icon-container',
            parent: dataContainer
        });
        filterIconContainer.dataset.fid = fid;
        this.filterIconContainer = filterIconContainer;
        // 默认隐藏
        filterIconContainer.style.display = 'none';
        var filterIcon = H.H('div', {
            className: 'ov-excel-auto-filter-icon',
            parent: filterIconContainer
        });
        filterIcon.innerHTML = this.getFilterIcon();
        this.filterIcon = filterIcon;
        this.filterMenu = new AutoFilterMenuUI.AutoFilterMenuUI(this, filterIconContainer, sheet, autoFilter, rangeRef, colIndex, headerRowCount);
        filterIcon.addEventListener('click', this.handleClick.bind(this));
        this.removeClickOutsideEvent = onClickOutside.onClickOutside(filterIconContainer, function () {
            _this.hideMenu();
        });
    }
    /**
     * 更新过滤图标
     */
    AutoFilterIconUI.prototype.syncFilterIcon = function () {
        this.filterIcon.innerHTML = this.getFilterIcon();
    };
    AutoFilterIconUI.prototype.getFilterIcon = function () {
        var columnSortState = getColumnSortOrder.getColumnSortOrder(this.colIndex, this.rangeRef, this.autoFilter.sortState);
        var filterIconSrc = Icons.Icons.filter;
        var filterColumn = hasFilterColumn.hasFilterColumn(this.autoFilter, this.colIndex);
        if (filterColumn) {
            filterIconSrc = Icons.Icons.hasFilter;
        }
        if (columnSortState === 'asc') {
            filterIconSrc = Icons.Icons.filterUp;
        }
        else if (columnSortState === 'desc') {
            filterIconSrc = Icons.Icons.filterDown;
        }
        return filterIconSrc;
    };
    AutoFilterIconUI.prototype.updatePosition = function (x, y, height, width) {
        this.filterIconContainer.style.display = 'block';
        this.filterIconContainer.style.left = "".concat(x, "px");
        this.filterIconContainer.style.top = "".concat(y, "px");
        this.filterIconContainer.style.width = "".concat(width, "px");
        this.filterIconContainer.style.height = "".concat(height, "px");
        this.filterIcon.style.width = "".concat(height - 4, "px");
    };
    AutoFilterIconUI.prototype.handleClick = function () {
        var lastAutoFilter = this.sheet.getLastAutoFilterIcon();
        if (lastAutoFilter) {
            lastAutoFilter.hideMenu();
        }
        this.sheet.setLastAutoFilterIcon(this);
        this.showMenu();
    };
    AutoFilterIconUI.prototype.showMenu = function () {
        this.filterMenu.show();
    };
    AutoFilterIconUI.prototype.hideMenu = function () {
        this.filterMenu.hide();
    };
    AutoFilterIconUI.prototype.hide = function () {
        this.filterIconContainer.style.display = 'none';
    };
    AutoFilterIconUI.prototype.destroy = function () {
        this.filterIconContainer.remove();
        this.removeClickOutsideEvent();
    };
    return AutoFilterIconUI;
}());

exports.AutoFilterIconUI = AutoFilterIconUI;
