'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var H = require('../../../../util/H.js');
var Icons = require('../../Icons.js');
var SortButtonUI = require('./SortButtonUI.js');
var getColumnSortOrder = require('./getColumnSortOrder.js');
var setColumnSortOrder = require('./setColumnSortOrder.js');

/**
 * 排序相关的操作
 */
var SortStateUI = /** @class */ (function () {
    function SortStateUI(autoFilterIcon, container, sheet, autoFilter, rangeRef, colIndex, headerRowCount) {
        if (headerRowCount === void 0) { headerRowCount = 1; }
        var _this = this;
        this.autoFilterIcon = autoFilterIcon;
        this.rangeRef = rangeRef;
        var sortContainer = H.H('div', {
            className: 'excel-auto-filter__menu-sort',
            parent: container
        });
        this.sortContainer = sortContainer;
        this.colIndex = colIndex;
        this.autoFilter = autoFilter;
        this.headerRowCount = headerRowCount;
        this.sheet = sheet;
        var sortAscButton = new SortButtonUI.SortButtonUI(sortContainer, sheet.translate('autoFilter.sortAscending'), function (checked) {
            _this.clickButton('asc');
        }, false, Icons.Icons.sortUP);
        this.sortAscButton = sortAscButton;
        var sortDescButton = new SortButtonUI.SortButtonUI(sortContainer, sheet.translate('autoFilter.sortDescending'), function (checked) {
            _this.clickButton('desc');
        }, false, Icons.Icons.sortDown);
        this.sortDescButton = sortDescButton;
        this.syncButtonActive();
    }
    SortStateUI.prototype.clickButton = function (sortState) {
        var sheet = this.sheet;
        var colIndex = this.colIndex;
        var rangeRef = this.rangeRef;
        var autoFilter = this.autoFilter;
        var headerRowCount = this.headerRowCount;
        setColumnSortOrder.setColumnSortOrder(sheet, colIndex, rangeRef, autoFilter, sortState, headerRowCount);
        this.sheet
            .getWorkbook()
            .uiEvent.emit('APPLY_AUTO_FILTER', this.sheet.getIndex());
        this.syncButtonActive();
        this.autoFilterIcon.syncFilterIcon();
    };
    SortStateUI.prototype.syncButtonActive = function () {
        var colIndex = this.colIndex;
        var rangeRef = this.rangeRef;
        var autoFilter = this.autoFilter;
        var columnSortState = getColumnSortOrder.getColumnSortOrder(colIndex, rangeRef, autoFilter.sortState);
        if (columnSortState === 'asc') {
            this.sortAscButton.setActive(true);
            this.sortDescButton.setActive(false);
        }
        else if (columnSortState === 'desc') {
            this.sortAscButton.setActive(false);
            this.sortDescButton.setActive(true);
        }
    };
    return SortStateUI;
}());

exports.SortStateUI = SortStateUI;
