'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var getMouseRelativePosition = require('./getMouseRelativePosition.js');
var handleDragCell = require('./handleDragCell.js');
var handleDragColGrid = require('./handleDragColGrid.js');
var handleDragColHeader = require('./handleDragColHeader.js');
var handleDragRowGrid = require('./handleDragRowGrid.js');
var handleDragRowHeader = require('./handleDragRowHeader.js');
var handleMousedown = require('./handleMousedown.js');

/**
 * 鼠标拖拽过程中
 */
function handleMousemove(mouseEvent) {
    handleMousedown.dragState.isDragging = true;
    var _a = getMouseRelativePosition.getMouseRelativePosition(handleMousedown.dragState.container, mouseEvent), offsetX = _a.offsetX, offsetY = _a.offsetY;
    var zoomLevel = handleMousedown.dragState.workbook.getActiveSheet().getZoomLevel();
    offsetX = offsetX / zoomLevel;
    offsetY = offsetY / zoomLevel;
    offsetX = Math.round(offsetX);
    offsetY = Math.round(offsetY);
    var dragType = handleMousedown.dragState.dragType;
    if (dragType === 'cell') {
        handleDragCell.handleDragCell(offsetX, offsetY);
    }
    if (dragType === 'row-grid') {
        handleDragRowGrid.handleDragRowGrid(mouseEvent);
    }
    if (dragType === 'col-grid') {
        handleDragColGrid.handleDragColGrid(mouseEvent);
    }
    if (dragType === 'row-header') {
        handleDragRowHeader.handleDragRowHeader(offsetX, offsetY);
    }
    if (dragType === 'col-header') {
        handleDragColHeader.handleDragColHeader(offsetX, offsetY);
    }
}

exports.handleMousemove = handleMousemove;
