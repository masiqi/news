'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var stringToArray = require('../../../util/stringToArray.js');

// 需要合并的字符，也就是当成一个 token，主要是英文单词和数字，后面几个是拉丁语，虽然不知道是不是对的
// 可能还有其它语言的情况，知道了再加
var wordReg = /['a-zA-Z0-9\u00C0-\u00D6\u00D8-\u00f6\u00f8-\u00ff]/;
// 连字符，如果遇到可以折行
var hyphenReg = /[\u002D\u2010\u2010\u2014]/;
var spaceReg = /\s/;
var lineBreakReg = /\n/;
/**
 * 将文本拆分为 token，主要是保证英文单词不被截断
 * @param text
 */
function tokenizer(text) {
    var e_1, _a;
    if (!text) {
        return [];
    }
    // 这里不能用 split，避免表情符号被分开
    var chars = stringToArray.stringToArray(text.replace(/\r\n?/g, '\n'));
    var tokens = [];
    var currentWord = '';
    function saveWord() {
        if (currentWord) {
            tokens.push({
                type: 'w',
                t: currentWord
            });
            currentWord = '';
        }
    }
    try {
        for (var chars_1 = tslib.__values(chars), chars_1_1 = chars_1.next(); !chars_1_1.done; chars_1_1 = chars_1.next()) {
            var char = chars_1_1.value;
            if (wordReg.test(char)) {
                currentWord += char;
                // 换行要放前面，因为后面的 space 会包含换行
            }
            else if (lineBreakReg.test(char)) {
                if (currentWord) {
                    saveWord();
                }
                tokens.push({
                    type: 'br',
                    t: char
                });
            }
            else if (spaceReg.test(char)) {
                if (currentWord) {
                    saveWord();
                }
                tokens.push({
                    type: 's',
                    t: char
                });
            }
            else if (hyphenReg.test(char)) {
                if (currentWord) {
                    saveWord();
                }
                tokens.push({
                    type: 'h',
                    t: char
                });
            }
            else {
                if (currentWord) {
                    saveWord();
                }
                tokens.push({
                    type: 'w',
                    t: char
                });
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (chars_1_1 && !chars_1_1.done && (_a = chars_1.return)) _a.call(chars_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    if (currentWord) {
        tokens.push({
            type: 'w',
            t: currentWord
        });
    }
    return tokens;
}

exports.tokenizer = tokenizer;
