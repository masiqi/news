'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var autoWrapText = require('./autoWrapText.js');
var measureTextWithCache = require('./measureTextWithCache.js');
var drawMultiLineText = require('./drawMultiLineText.js');
var drawSingleLineRichText = require('./drawSingleLineRichText.js');
var drawSingleLineText = require('./drawSingleLineText.js');
var genFontStr = require('./genFontStr.js');

var NUMBER_RE = /^-?[\d\.]+$/;
/**
 * 绘制单元格里的文字
 * @param cellInfo
 * @param x
 * @param y
 * @param width 单元格宽度
 * @param height 单元格高度
 * @param padding 内边距
 */
function drawTextInCell(excelRender, sheet, ctx, dataProvider, cellInfo, x, y, width, height, indentSize, padding, linkPositionCache) {
    if (linkPositionCache === void 0) { linkPositionCache = []; }
    if (cellInfo.cellData &&
        typeof cellInfo.cellData === 'object' &&
        cellInfo.cellData.type === 'blank') {
        return;
    }
    var wrapText = false;
    var horizontal = 'left';
    // 数字默认右对齐
    if (typeof cellInfo.cellData === 'string') {
        if (NUMBER_RE.test(cellInfo.cellData)) {
            horizontal = 'right';
        }
    }
    // 默认值其实是 bottom
    var vertical = 'bottom';
    var alignment = cellInfo.alignment;
    // 缩进
    var indent = 0;
    var displayWidth = width - padding * 2;
    var fontStyle = dataProvider.getFontStyle(cellInfo.font);
    if (alignment) {
        if (alignment.wrapText) {
            wrapText = true;
        }
        if (alignment.horizontal) {
            horizontal = alignment.horizontal;
        }
        if (alignment.vertical) {
            vertical = alignment.vertical;
        }
        if (alignment.indent) {
            indent = alignment.indent;
        }
        if (alignment.textRotation) {
            // 按文档里说最大值只有 180，目前是基于 wrapText 和限制 width 实现的
            if (alignment.textRotation === 255) {
                wrapText = true;
                var defaultFont = genFontStr.genFontStr(fontStyle);
                var defaultFontSize = measureTextWithCache.measureTextWithCache(ctx, defaultFont, '1');
                // 这个保证会拆分
                displayWidth = defaultFontSize.width;
            }
        }
    }
    // 限制一下，后面得可配
    if (indent > 5) {
        indent = 5;
    }
    // fill 或 wrap 都可能需要截断
    var needClip = cellInfo.needClip || horizontal === 'fill' || wrapText;
    if (needClip) {
        ctx.save();
        ctx.rect(x, y, width, height);
        ctx.clip();
    }
    // 有多行文本的时候 Excel 会自动设置 wrapText 为 true
    if (wrapText) {
        var lines = [];
        if (cellInfo.text) {
            lines = autoWrapText.autoWrapText(ctx, cellInfo.text, displayWidth, fontStyle);
        }
        else if (typeof cellInfo.cellData === 'object' &&
            'richText' in cellInfo.cellData) {
            lines = autoWrapText.autoWrapText(ctx, cellInfo.cellData.richText, displayWidth, fontStyle);
        }
        else {
            console.warn('unknown cell data', cellInfo);
        }
        drawMultiLineText.drawMultiLineText(excelRender, sheet, ctx, dataProvider, fontStyle, lines, x + padding, y + padding, displayWidth, height - padding * 2, padding, horizontal, vertical, cellInfo.text, cellInfo.row, linkPositionCache);
    }
    else {
        // 为了提升性能这个单独实现，因为是最常见的情况
        if (cellInfo.text) {
            drawSingleLineText.drawSingleLineText(ctx, fontStyle, cellInfo.text, fontStyle.color, x + padding, y + padding, displayWidth, height - padding * 2, indent * indentSize, horizontal, vertical, linkPositionCache);
        }
        else if (typeof cellInfo.cellData === 'object' &&
            'richText' in cellInfo.cellData) {
            drawSingleLineRichText.drawSingleLineRichText(excelRender, sheet, ctx, dataProvider, fontStyle, cellInfo.cellData.richText, x + padding, y + padding, displayWidth, height - padding * 2, horizontal, vertical, cellInfo.row);
        }
    }
    if (needClip) {
        ctx.restore();
    }
}

exports.drawTextInCell = drawTextInCell;
