'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Consts = require('../Consts.js');
var drawDoubleBorder = require('./border/drawDoubleBorder.js');
var setLineStyle = require('./border/setLineStyle.js');

/**
 * 绘制单个边框
 */
function drawSingleBorder(ctx, dataProvider, border, borderPr, position, startX, startY, endX, endY) {
    if (borderPr && borderPr.style && borderPr.style !== 'none') {
        ctx.beginPath();
        ctx.strokeStyle = dataProvider.getColor(borderPr.color, Consts.AUTO_COLOR);
        if (borderPr.style === 'double') {
            drawDoubleBorder.drawDoubleBorder(ctx, border, position, startX, startY, endX, endY);
        }
        else {
            setLineStyle.setLineStyle(ctx, borderPr.style);
            ctx.moveTo(startX, startY);
            ctx.lineTo(endX, endY);
        }
        ctx.stroke();
    }
}
/**
 * 绘制单元格边框
 */
function drawCellBorder(ctx, dataProvider, cellInfo, x, y, width, height) {
    var border = cellInfo.border;
    if (!border) {
        return;
    }
    // 绘制边框
    ctx.save();
    ctx.lineWidth = 1;
    drawSingleBorder(ctx, dataProvider, border, border.top, 'top', x, y, x + width, y);
    drawSingleBorder(ctx, dataProvider, border, border.bottom, 'bottom', x, y + height, x + width, y + height);
    drawSingleBorder(ctx, dataProvider, border, border.left, 'left', x, y, x, y + height);
    drawSingleBorder(ctx, dataProvider, border, border.right, 'right', x + width, y, x + width, y + height);
    if (border.diagonalDown) {
        drawSingleBorder(ctx, dataProvider, border, border.diagonal, 'diagonalDown', x, y, x + width, y + height);
    }
    if (border.diagonalUp) {
        drawSingleBorder(ctx, dataProvider, border, border.diagonal, 'diagonalUp', x, y + height, x + width, y);
    }
    ctx.restore();
}

exports.drawCellBorder = drawCellBorder;
