'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var FontTable = require('./openxml/word/FontTable.js');
var parseRelationship = require('./word/parse/parseRelationship.js');
var ContentType = require('./openxml/ContentType.js');
var Style = require('./openxml/Style.js');
var Theme = require('./openxml/Theme.js');
var renderDocument = require('./word/render/renderDocument.js');
var blob = require('./util/blob.js');
var Numbering = require('./openxml/word/numbering/Numbering.js');
var dom = require('./util/dom.js');
var renderStyle = require('./word/render/renderStyle.js');
var mergeRun = require('./util/mergeRun.js');
var WDocument = require('./openxml/word/WDocument.js');
var renderRun = require('./word/render/renderRun.js');
var ZipPackageParser = require('./package/ZipPackageParser.js');
var xml = require('./util/xml.js');
var Font = require('./openxml/word/Font.js');
var renderFont = require('./word/render/renderFont.js');
var replaceVar = require('./util/replaceVar.js');
var Footnotes = require('./word/parse/Footnotes.js');
var parseEndnotes = require('./word/parse/parseEndnotes.js');
var renderNotes = require('./word/render/renderNotes.js');
var print = require('./util/print.js');
var Settings = require('./openxml/Settings.js');
var get = require('./util/get.js');
var fileType = require('./util/fileType.js');
var stylesXML = require('./word/parse/defaultXML/stylesXML.js');
var themeXML = require('./word/parse/defaultXML/themeXML.js');
var settingsXML = require('./word/parse/defaultXML/settingsXML.js');

var defaultRenderOptions = {
    classPrefix: 'docx-viewer',
    page: false,
    pageWrap: true,
    bulletUseFont: true,
    ignoreHeight: true,
    ignoreWidth: false,
    minLineHeight: 1.0,
    enableVar: false,
    debug: false,
    pageWrapPadding: 20,
    pageMarginBottom: 20,
    pageShadow: true,
    pageBackground: '#FFFFFF',
    pageWrapBackground: '#ECECEC',
    printWaitTime: 100,
    zoomFitWidth: false,
    renderHeader: true,
    renderFooter: true,
    data: {},
    evalVar: function (path, data) {
        return get.get(data, path);
    }
};
var Word = /** @class */ (function () {
    /**
     * 构建 word
     *
     * @param docxFile docx 文件
     * @param options 渲染配置
     * @param packaParser 包解析器
     */
    function Word(docFile, renderOptions, parser) {
        if (parser === void 0) { parser = new ZipPackageParser["default"](); }
        /**
         * 解析 theme 目录里的数据
         */
        this.themes = [];
        /**
         * 样式名映射，因为自定义样式名有可能不符合 css 命名规范，因此实际使用这个名字
         */
        this.styleIdMap = {};
        /**
         * 用于自动生成样式名时的计数，保证每次都是唯一的
         */
        this.styleIdNum = 0;
        this.wrapClassName = 'docx-viewer-wrapper';
        this.footNotes = {};
        this.endNotes = {};
        this.inited = false;
        /**
         * 分页标记，如果为 true，那么在渲染的时候会强制分页
         */
        this.breakPage = false;
        this.DOCUMENT_RELS = '/word/_rels/document.xml.rels';
        parser.load(docFile);
        this.id = Word.globalId++;
        this.parser = parser;
        this.updateOptions(renderOptions);
    }
    /**
     * 初始化一些公共资源，比如
     */
    Word.prototype.init = function () {
        if (this.inited) {
            return;
        }
        // 这个必须在最前面，因为后面很多依赖它来查找文件的
        this.initContentType();
        // relation 需要排第二
        this.initRelation();
        this.initSettings();
        this.initTheme();
        this.initFontTable();
        this.initStyle();
        this.initNumbering();
        this.initNotes();
        this.inited = true;
    };
    Word.prototype.updateOptions = function (options) {
        this.renderOptions = tslib.__assign(tslib.__assign({}, defaultRenderOptions), options);
        if (this.renderOptions.page) {
            this.renderOptions.ignoreHeight = false;
            this.renderOptions.ignoreWidth = false;
        }
    };
    /**
     * 解析全局主题配置
     */
    Word.prototype.initTheme = function () {
        var e_1, _a;
        try {
            for (var _b = tslib.__values(this.contentTypes.overrides), _c = _b.next(); !_c.done; _c = _b.next()) {
                var override = _c.value;
                if (override.partName.startsWith('/word/theme')) {
                    var theme = this.parser.getXML(override.partName);
                    this.themes.push(Theme.parseTheme(theme));
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (this.themes.length === 0) {
            this.themes.push(Theme.parseTheme(themeXML.themeXML));
        }
    };
    /**
     * 解析全局样式
     */
    Word.prototype.initStyle = function () {
        var e_2, _a;
        try {
            for (var _b = tslib.__values(this.contentTypes.overrides), _c = _b.next(); !_c.done; _c = _b.next()) {
                var override = _c.value;
                if (override.partName.startsWith('/word/styles.xml')) {
                    this.styles = Style.parseStyles(this, this.parser.getXML('/word/styles.xml'));
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        // 没有样式表的情况
        if (!this.styles) {
            this.styles = Style.parseStyles(this, stylesXML.stylesXML);
        }
    };
    /**
     * 解析全局配置
     */
    Word.prototype.initSettings = function () {
        var e_3, _a;
        try {
            for (var _b = tslib.__values(this.contentTypes.overrides), _c = _b.next(); !_c.done; _c = _b.next()) {
                var override = _c.value;
                if (override.partName.startsWith('/word/settings.xml')) {
                    this.settings = Settings.Settings.parse(this, this.parser.getXML('/word/settings.xml'));
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        if (!this.settings) {
            this.settings = Settings.Settings.parse(this, settingsXML.settingsXML);
        }
    };
    /**
     * 解析字体表
     */
    Word.prototype.initFontTable = function () {
        var e_4, _a;
        try {
            for (var _b = tslib.__values(this.contentTypes.overrides), _c = _b.next(); !_c.done; _c = _b.next()) {
                var override = _c.value;
                if (override.partName.startsWith('/word/fontTable.xml')) {
                    this.fontTable = FontTable.FontTable.fromXML(this, this.parser.getXML('/word/fontTable.xml'));
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_4) throw e_4.error; }
        }
    };
    /**
     * 解析关系
     */
    Word.prototype.initRelation = function () {
        var rels = {};
        if (this.parser.fileExists('/_rels/.rels')) {
            rels = parseRelationship.parseRelationships(this.parser.getXML('/_rels/.rels'), 'root');
        }
        this.relationships = rels;
        var documentRels = {};
        if (this.parser.fileExists(this.DOCUMENT_RELS)) {
            documentRels = parseRelationship.parseRelationships(this.parser.getXML(this.DOCUMENT_RELS), 'word');
        }
        this.documentRels = documentRels;
        var fontTableRels = {};
        if (this.parser.fileExists('/word/_rels/fontTable.xml.rels')) {
            fontTableRels = parseRelationship.parseRelationships(this.parser.getXML('/word/_rels/fontTable.xml.rels'), 'word');
        }
        this.fontTableRels = fontTableRels;
    };
    /**
     * 解析全局配置
     */
    Word.prototype.initContentType = function () {
        var contentType = this.parser.getXML('[Content_Types].xml');
        this.contentTypes = ContentType.parseContentType(contentType);
    };
    /**
     * 解析 numbering
     */
    Word.prototype.initNumbering = function () {
        var e_5, _a;
        try {
            for (var _b = tslib.__values(this.contentTypes.overrides), _c = _b.next(); !_c.done; _c = _b.next()) {
                var override = _c.value;
                if (override.partName.startsWith('/word/numbering')) {
                    var numberingData = this.parser.getXML(override.partName);
                    this.numbering = Numbering.Numbering.fromXML(this, numberingData);
                }
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_5) throw e_5.error; }
        }
    };
    Word.prototype.initNotes = function () {
        var e_6, _a;
        try {
            for (var _b = tslib.__values(this.contentTypes.overrides), _c = _b.next(); !_c.done; _c = _b.next()) {
                var override = _c.value;
                if (override.partName.startsWith('/word/footnotes.xml')) {
                    var notesData = this.parser.getXML(override.partName);
                    this.footNotes = Footnotes.parseFootnotes(this, notesData);
                }
                if (override.partName.startsWith('/word/endnotes.xml')) {
                    var notesData = this.parser.getXML(override.partName);
                    this.endNotes = parseEndnotes.parseEndnotes(this, notesData);
                }
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_6) throw e_6.error; }
        }
    };
    /**
     * 获取全局关系
     */
    Word.prototype.getRelationship = function (id) {
        if (id && this.relationships) {
            return this.relationships[id];
        }
        return null;
    };
    /**
     * 获取文档对应的关系
     */
    Word.prototype.getDocumentRels = function (id) {
        if (id && this.documentRels) {
            return this.documentRels[id];
        }
        return null;
    };
    /**
     * 获取字体对应的关系
     */
    Word.prototype.getFontTableRels = function (id) {
        if (id && this.fontTableRels) {
            return this.fontTableRels[id];
        }
        return null;
    };
    /**
     * 进行单个文本替换
     */
    Word.prototype.replaceText = function (text) {
        var _this = this;
        if (this.renderOptions.enableVar === false) {
            return text;
        }
        var data = this.renderOptions.data;
        if (text.indexOf('{{') !== -1) {
            text = text.replace(/{{([^{}]+)}}/g, function (all, group) {
                var result = _this.renderOptions.evalVar(group, data);
                if (typeof result === 'undefined') {
                    return '';
                }
                return String(result);
            });
        }
        return text;
    };
    Word.prototype.loadWordRelXML = function (relation) {
        var path = relation.target;
        if (relation.part === 'word') {
            path = 'word/' + path;
        }
        return this.getXML(path);
    };
    /**
     * 加载图片
     */
    Word.prototype.loadImage = function (relation) {
        var path = relation.target;
        if (relation.part === 'word') {
            path = 'word/' + path;
        }
        var data = this.parser.getFileByType(path, 'blob');
        if (data) {
            return URL.createObjectURL(data);
        }
        return null;
    };
    /**
     * 保存新图片，这个方法主要用于图片变量，需要生成新的 relation
     * @param newRelId 关系 id
     * @param blob 文件数据
     * @param ext 扩展名
     */
    Word.prototype.saveNewImage = function (newRelId, data) {
        if (this.parser.fileExists(this.DOCUMENT_RELS)) {
            var documentRels = this.parser.getXML(this.DOCUMENT_RELS);
            // 基于一个克隆更稳妥
            var newRelation = documentRels
                .getElementsByTagName('Relationship')
                .item(0)
                .cloneNode(true);
            newRelation.setAttributeNS(null, 'Id', newRelId);
            newRelation.setAttributeNS(null, 'Type', 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/image');
            var ext = '';
            var fileType$1 = fileType.fileTypeFromBuffer(data);
            if (fileType$1) {
                ext = '.' + fileType$1.ext;
            }
            var imagePath = 'media/image' + newRelId + ext;
            newRelation.setAttributeNS(null, 'Target', imagePath);
            documentRels
                .getElementsByTagName('Relationships')[0]
                .appendChild(newRelation);
            // 需要使用相对路径
            this.parser.saveFile(this.DOCUMENT_RELS.replace(/^\//, ''), xml.buildXML(documentRels));
            this.parser.saveFile('word/' + imagePath, data);
        }
    };
    Word.prototype.loadFont = function (rId, key) {
        var relation = this.getFontTableRels(rId);
        if (!relation) {
            return null;
        }
        var path = relation.target;
        if (relation.part === 'word') {
            path = 'word/' + path;
        }
        var data = this.parser.getFileByType(path, 'uint8array');
        if (data) {
            return URL.createObjectURL(new Blob([Font.deobfuscate(data, key)]));
        }
        return null;
    };
    /**
     * 解析 html
     */
    Word.prototype.getXML = function (filePath) {
        return this.parser.getXML(filePath);
    };
    /**
     * 获取 styleId 的显示名称，因为这里可以自定义，理论上会出现 css 不支持的语法
     */
    Word.prototype.getStyleIdDisplayName = function (styleId) {
        /**
         * 简单判断一下，如果是合法的 css 名称，就直接返回
         * In CSS, identifiers (including element names, classes, and IDs in selectors) can contain only the characters [a-zA-Z0-9] and ISO 10646 characters U+00A0 and higher, plus the hyphen (-) and the underscore (_); they cannot start with a digit, two hyphens, or a hyphen followed by a digit. Identifiers can also contain escaped characters and any ISO 10646 character as a numeric code (see next item). For instance, the identifier "B&W?" may be written as "B\&W\?" or "B\26 W\3F".
         */
        if (styleId.match(/^[a-zA-Z]+[a-zA-Z0-9\-\_]*$/)) {
            return this.getClassPrefix() + '-' + styleId;
        }
        if (styleId in this.styleIdMap) {
            return this.styleIdMap[styleId];
        }
        else {
            this.styleIdMap[styleId] = this.genClassName();
            return this.styleIdMap[styleId];
        }
    };
    /**
     * 生成个新的唯一的 class 名称
     */
    Word.prototype.genClassName = function () {
        return 'docx-classname-' + this.styleIdNum++;
    };
    /**
     * 添加新样式，主要用于表格的单元格样式
     */
    Word.prototype.appendStyle = function (style) {
        if (style === void 0) { style = ''; }
        var styleElement = dom.createElement('style');
        styleElement.textContent = style;
        this.rootElement.appendChild(styleElement);
    };
    /**
     * 返回样式表名及它的父级样式表名
     * @param styleId 样式表里的 style 名称
     * @returns 返回 className 数组
     */
    Word.prototype.getStyleClassName = function (stylId) {
        var style = this.styles.styleMap[stylId];
        if (!style) {
            return [];
        }
        var classNames = [this.getStyleIdDisplayName(stylId)];
        if (style.basedOn) {
            classNames.unshift(this.getStyleIdDisplayName(style.basedOn));
        }
        return classNames;
    };
    /**
     * 根据 id 获取样式
     * @param styleId
     */
    Word.prototype.getStyle = function (styleId) {
        return this.styles.styleMap[styleId];
    };
    /**
     * 渲染时的 css 类前缀
     */
    Word.prototype.getClassPrefix = function () {
        return "".concat(this.renderOptions.classPrefix, "-").concat(this.id);
    };
    /**
     * 获取主题色
     */
    Word.prototype.getThemeColor = function (name) {
        var _a, _b;
        if (this.settings.clrSchemeMapping) {
            name = this.settings.clrSchemeMapping[name] || name;
        }
        if (this.themes && this.themes.length > 0) {
            var theme = this.themes[0];
            var colors = (_b = (_a = theme.themeElements) === null || _a === void 0 ? void 0 : _a.clrScheme) === null || _b === void 0 ? void 0 : _b.colors;
            var color = colors === null || colors === void 0 ? void 0 : colors[name];
            if (color) {
                return color;
            }
            else {
                // 找不到可能是从其它地方拷贝过来的，这时取 accent1
                console.warn('unknown theme color: ' + name);
                return (colors === null || colors === void 0 ? void 0 : colors['accent1']) || '';
            }
        }
        return '';
    };
    /**
     * 添加类，自动加上前缀
     */
    Word.prototype.addClass = function (element, className) {
        element.classList.add("".concat(this.getClassPrefix(), "-").concat(className));
    };
    /**
     * 更新页面中的变量，这个要在 render 后运行
     */
    Word.prototype.updateVariable = function () {
        if (!this.rootElement || this.renderOptions.enableVar === false) {
            return;
        }
        renderRun.updateVariableText(this);
    };
    /**
     * 下载生成的文档，会对 word/document.xml 进行处理，替换文本
     */
    Word.prototype.download = function (fileName) {
        if (fileName === void 0) { fileName = 'document.docx'; }
        return tslib.__awaiter(this, void 0, void 0, function () {
            var documentData, ts, i, blob$1;
            return tslib.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        documentData = this.getXML('word/document.xml');
                        if (!this.renderOptions.enableVar) return [3 /*break*/, 2];
                        mergeRun.mergeRun(this, documentData);
                        return [4 /*yield*/, replaceVar.replaceVar(this, documentData, true)];
                    case 1:
                        _a.sent();
                        ts = documentData.getElementsByTagName('w:t');
                        for (i = 0; i < ts.length; i++) {
                            replaceVar.replaceT(this, ts[i], this.renderOptions.data);
                        }
                        _a.label = 2;
                    case 2:
                        blob$1 = this.parser.generateZipBlob(xml.buildXML(documentData));
                        blob.downloadBlob(blob$1, fileName);
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * 打印功能
     */
    Word.prototype.print = function () {
        return tslib.__awaiter(this, void 0, void 0, function () {
            var iframe, printDocument;
            return tslib.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        iframe = document.createElement('iframe');
                        iframe.style.position = 'absolute';
                        iframe.style.top = '-10000px';
                        document.body.appendChild(iframe);
                        printDocument = iframe.contentDocument;
                        if (!printDocument) {
                            console.warn('printDocument is null');
                            return [2 /*return*/, null];
                        }
                        printDocument.write("<style>\n      html, body { margin:0; padding:0 }\n      @page { size: auto; margin: 0mm; }\n      </style>\n      <div id=\"print\"></div>");
                        return [4 /*yield*/, this.render(printDocument.getElementById('print'), tslib.__assign({ pageWrap: false, pageShadow: false, pageMarginBottom: 0, pageWrapPadding: undefined, zoom: 1 }, this.renderOptions.printOptions))];
                    case 1:
                        _a.sent();
                        setTimeout(function () {
                            iframe.focus();
                            print.printIframe(iframe);
                        }, this.renderOptions.printWaitTime || 100); // 需要等一下图片渲染
                        window.focus();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * 渲染文档入口
     *
     * @param root 渲染的根节点
     * @param renderOptionsOverride 临时覆盖某些渲选项
     */
    Word.prototype.render = function (root, renderOptionsOverride) {
        if (renderOptionsOverride === void 0) { renderOptionsOverride = {}; }
        return tslib.__awaiter(this, void 0, void 0, function () {
            var renderOptions, isDebug, documentData, document, documentElement;
            return tslib.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.init();
                        this.currentPage = 0;
                        renderOptions = tslib.__assign(tslib.__assign({}, this.renderOptions), renderOptionsOverride);
                        isDebug = renderOptions.debug;
                        isDebug && console.log('init', this);
                        this.rootElement = root;
                        root.innerHTML = '';
                        documentData = this.getXML('word/document.xml');
                        isDebug && console.log('documentData', documentData);
                        if (!renderOptions.enableVar) return [3 /*break*/, 2];
                        mergeRun.mergeRun(this, documentData);
                        return [4 /*yield*/, replaceVar.replaceVar(this, documentData)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        document = WDocument.WDocument.fromXML(this, documentData);
                        isDebug && console.log('document', document);
                        documentElement = renderDocument["default"](root, this, document, renderOptions);
                        root.classList.add(this.getClassPrefix());
                        if (renderOptions.page && renderOptions.pageWrap) {
                            root.classList.add(this.wrapClassName);
                            root.style.padding = "".concat(renderOptions.pageWrapPadding || 0, "pt");
                            root.style.background = renderOptions.pageWrapBackground || '#ECECEC';
                        }
                        dom.appendChild(root, renderStyle.renderStyle(this));
                        dom.appendChild(root, renderFont.renderFont(this.fontTable));
                        dom.appendChild(root, documentElement);
                        dom.appendChild(root, renderNotes.renderNotes(this));
                        return [2 /*return*/];
                }
            });
        });
    };
    Word.prototype.destroy = function () { };
    /**
     * 全局 id，用于一个页面渲染多个 word 文档
     */
    Word.globalId = 0;
    return Word;
}());

exports["default"] = Word;
