import { __values } from 'tslib';
import { getStack } from './getStack.js';
import { calcPercentStacked } from './calcPercentStacked.js';
import { getData } from './getData.js';

function fromBarChart(workbook, barChart) {
    var e_1, _a;
    var _b, _c, _d, _e, _f;
    var categories = [];
    var series = [];
    var barSer = barChart.ser || [];
    var isPercentStacked = false;
    try {
        for (var barSer_1 = __values(barSer), barSer_1_1 = barSer_1.next(); !barSer_1_1.done; barSer_1_1 = barSer_1.next()) {
            var barSeries = barSer_1_1.value;
            var seriesData = getData(workbook, barSeries.val);
            var name_1 = ((_f = (_e = (_d = (_c = (_b = barSeries.tx) === null || _b === void 0 ? void 0 : _b.strRef) === null || _c === void 0 ? void 0 : _c.strCache) === null || _d === void 0 ? void 0 : _d.pt) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f.v) || '';
            if (name_1) {
                categories.push(name_1);
            }
            var stack = getStack(barChart.grouping);
            isPercentStacked = stack.isPercentStacked;
            series.push({
                name: name_1,
                type: 'bar',
                stack: stack.stack,
                data: seriesData
            });
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (barSer_1_1 && !barSer_1_1.done && (_a = barSer_1.return)) _a.call(barSer_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    if (isPercentStacked) {
        calcPercentStacked(series);
    }
    return { categories: categories, series: series };
}

export { fromBarChart };
