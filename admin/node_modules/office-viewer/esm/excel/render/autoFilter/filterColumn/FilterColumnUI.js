import { __assign, __values } from 'tslib';
import { Divider } from '../../ui/Divider.js';
import { CustomFiltersUI } from './CustomFiltersUI.js';
import { FiltersUI } from './FiltersUI.js';

/**
 * 对应 filterColumn 配置项
 */
var FilterColumnUI = /** @class */ (function () {
    function FilterColumnUI(autoFilterIcon, container, sheet, autoFilter, rangeRef, colIndex, headerRowCount) {
        var e_1, _a;
        var columnDataRange = __assign({}, rangeRef);
        columnDataRange.startRow += headerRowCount;
        columnDataRange.startCol += colIndex;
        columnDataRange.endCol = columnDataRange.startCol;
        var values = sheet.getCellValueByRange(columnDataRange, true);
        var uniqueTexts = new Set();
        var isDate = false;
        try {
            for (var values_1 = __values(values), values_1_1 = values_1.next(); !values_1_1.done; values_1_1 = values_1.next()) {
                var value = values_1_1.value;
                if (value === null || value === undefined || value.text === '') {
                    continue;
                }
                if (value.isDate) {
                    isDate = true;
                }
                uniqueTexts.add(value.text);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (values_1_1 && !values_1_1.done && (_a = values_1.return)) _a.call(values_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var texts = Array.from(uniqueTexts).sort();
        new Divider(container);
        new CustomFiltersUI(autoFilterIcon, container, sheet, autoFilter, colIndex, headerRowCount, texts, isDate);
        new Divider(container);
        new FiltersUI(autoFilterIcon, container, sheet, autoFilter, colIndex, headerRowCount, texts);
    }
    return FilterColumnUI;
}());

export { FilterColumnUI };
