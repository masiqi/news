import { __values } from 'tslib';
import { H } from '../../../../util/H.js';
import { isNumeric } from '../../../../util/isNumeric.js';
import { Input } from '../../ui/Input.js';
import { Radio } from '../../ui/Radio.js';
import { Select } from '../../ui/Select.js';
import { buildOperatorOptions } from './buildOperatorOptions.js';
import { fromOperatorUI } from './fromOperatorUI.js';
import { getCustomFilters } from './getCustomFilters.js';
import { setCustomFilters } from './setCustomFilters.js';
import { toOperatorUI } from './toOperatorUI.js';

var CustomFiltersUI = /** @class */ (function () {
    function CustomFiltersUI(autoFilterIcon, container, sheet, autoFilter, colIndex, headerRowCount, texts, isDate) {
        var e_1, _a;
        /**
         * 操作符选项，会根据值不同类型变化
         */
        this.operatorOptions = [];
        /**
         * 值类型
         */
        this.valueType = 'text';
        this.customFilterItems = [];
        this.sheet = sheet;
        this.colIndex = colIndex;
        this.autoFilter = autoFilter;
        this.headerRowCount = headerRowCount;
        this.autoFilterIcon = autoFilterIcon;
        this.texts = texts;
        if (texts.every(isNumeric)) {
            this.valueType = 'number';
        }
        if (isDate) {
            this.valueType = 'date';
        }
        this.buildOperatorOptions();
        var customFiltersContainer = H('div', {
            className: 'ov-excel-auto-filter-menu__custom-filters',
            parent: container
        });
        this.customFiltersContainer = customFiltersContainer;
        var customFilters = getCustomFilters(autoFilter, colIndex);
        var customFilter = (customFilters === null || customFilters === void 0 ? void 0 : customFilters.customFilter) || [];
        if (customFilter.length) {
            if (customFilter.length === 1) {
                this.buildCustomFilterItem(customFilter[0]);
                this.buildCustomFilterItemAnd();
                // 生成一个空的
                this.buildCustomFilterItem();
            }
            else if (customFilter.length === 2) {
                this.buildCustomFilterItem(customFilter[0]);
                this.buildCustomFilterItemAnd();
                this.buildCustomFilterItem(customFilter[1]);
            }
            else {
                try {
                    for (var customFilter_1 = __values(customFilter), customFilter_1_1 = customFilter_1.next(); !customFilter_1_1.done; customFilter_1_1 = customFilter_1.next()) {
                        var filter = customFilter_1_1.value;
                        this.buildCustomFilterItem(filter);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (customFilter_1_1 && !customFilter_1_1.done && (_a = customFilter_1.return)) _a.call(customFilter_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        }
        else {
            // 默认生成一个空的
            this.buildCustomFilterItem();
        }
    }
    /**
     * 构建操作符选项
     */
    CustomFiltersUI.prototype.buildOperatorOptions = function () {
        this.operatorOptions = buildOperatorOptions(this.valueType, this.sheet.translate.bind(this.sheet));
    };
    /**
     * 构建 and 或 or 选项
     */
    CustomFiltersUI.prototype.buildCustomFilterItemAnd = function (and) {
        var _this = this;
        if (and === undefined) {
            and = true;
        }
        var radioOptions = [
            {
                text: this.sheet.translate('customFilter.and'),
                value: 'and'
            },
            {
                text: this.sheet.translate('customFilter.or'),
                value: 'or'
            }
        ];
        this.andRadio = new Radio(this.customFiltersContainer, radioOptions, and ? 'and' : 'or', function (value) {
            _this.syncCustomFilters();
        });
    };
    CustomFiltersUI.prototype.buildCustomFilterItem = function (customFilter) {
        var _this = this;
        var operator = (customFilter === null || customFilter === void 0 ? void 0 : customFilter.operator) || 'equal';
        // 这里直接将 * 全都去掉了
        var value = ((customFilter === null || customFilter === void 0 ? void 0 : customFilter.val) || '').replace(/\*/g, '');
        var customFiltersContainer = this.customFiltersContainer;
        var customFilterItemInput = H('div', {
            className: 'ov-excel-auto-filter-menu__custom-filters-item-input',
            parent: customFiltersContainer
        });
        var select = new Select(customFilterItemInput, this.operatorOptions, toOperatorUI(operator, value), function () {
            _this.syncCustomFilters();
        });
        var input = new Input({
            container: customFilterItemInput,
            value: value,
            onChange: function () {
                _this.syncCustomFilters();
            },
            style: 'normal',
            options: this.texts
        });
        this.customFilterItems.push({ input: input, select: select });
    };
    /**
     * 同步自定义筛选
     */
    CustomFiltersUI.prototype.syncCustomFilters = function () {
        var _a;
        var sheet = this.sheet;
        var autoFilter = this.autoFilter;
        var headerRowCount = this.headerRowCount;
        var customFilters = this.customFilterItems
            .map(function (item) {
            return fromOperatorUI(item.select.getValue(), item.input.getValue());
        })
            .filter(function (item) { return item.val !== ''; });
        var andValue = (_a = this.andRadio) === null || _a === void 0 ? void 0 : _a.getValue();
        var and = true;
        if (andValue === 'or') {
            and = false;
        }
        // 当有输入内容且当前
        if (this.customFilterItems.length === 1 && customFilters.length === 1) {
            this.buildCustomFilterItemAnd();
            this.buildCustomFilterItem();
        }
        setCustomFilters(autoFilter, this.colIndex, {
            and: and,
            customFilter: customFilters
        });
        sheet.applyAutoFilter(autoFilter, headerRowCount);
        sheet.getWorkbook().uiEvent.emit('APPLY_AUTO_FILTER', sheet.getIndex());
        this.autoFilterIcon.syncFilterIcon();
    };
    return CustomFiltersUI;
}());

export { CustomFiltersUI };
