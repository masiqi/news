import { __values, __assign } from 'tslib';
import { PADDING_SIZE } from '../Consts.js';

/**
 * 绘制所有单元格的主入口
 */
function drawCells(excelRender, currentSheet, excelRenderOptions, canvas, displayData, linkPositionCache) {
    var e_1, _a, e_2, _b;
    var cellInfoMap = new Map();
    try {
        for (var displayData_1 = __values(displayData), displayData_1_1 = displayData_1.next(); !displayData_1_1.done; displayData_1_1 = displayData_1.next()) {
            var data = displayData_1_1.value;
            var row = data.row, col = data.col, width = data.width, height = data.height;
            if (width <= 0 || height <= 0) {
                continue;
            }
            var cellInfo = currentSheet.getCellInfo(row, col);
            if (cellInfo) {
                cellInfoMap.set("".concat(row, ",").concat(col), __assign(__assign({}, JSON.parse(JSON.stringify(cellInfo))), { width: width, height: height }));
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (displayData_1_1 && !displayData_1_1.done && (_a = displayData_1.return)) _a.call(displayData_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    canvas.autoClip(cellInfoMap);
    try {
        for (var displayData_2 = __values(displayData), displayData_2_1 = displayData_2.next(); !displayData_2_1.done; displayData_2_1 = displayData_2.next()) {
            var data = displayData_2_1.value;
            var row = data.row, col = data.col, x = data.x, y = data.y, width = data.width, height = data.height, needClear = data.needClear;
            if (width <= 0 || height <= 0) {
                continue;
            }
            var key = "".concat(row, ",").concat(col);
            if (cellInfoMap.has(key)) {
                var cellInfo = cellInfoMap.get(key);
                canvas.drawCell(excelRender, cellInfo, x, y, width, height, excelRenderOptions.indentSize, PADDING_SIZE, needClear, linkPositionCache);
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (displayData_2_1 && !displayData_2_1.done && (_b = displayData_2.return)) _b.call(displayData_2);
        }
        finally { if (e_2) throw e_2.error; }
    }
}

export { drawCells };
