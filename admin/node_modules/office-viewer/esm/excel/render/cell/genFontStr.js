import { __assign } from 'tslib';
import { checkFont } from './checkFont.js';

/**
 * 生成字体字符串
 * @param fontStyle
 */
function genFontStr(fontStyle) {
    var font = '';
    var family = fontStyle.family;
    checkFont(family);
    if (fontStyle.b) {
        font += 'bold ';
    }
    if (fontStyle.i) {
        font += 'italic ';
    }
    // TODO: underline 等需要自己绘制
    // 字体字体大小需要放在后面？
    if (fontStyle.size) {
        font += "".concat(fontStyle.size * 1.333, "px ");
    }
    font += family;
    return font;
}
/**
 * rPr 转换为字体样式
 */
function rPrToFontStyle(rPr) {
    var fontStyle = {};
    if (rPr.b) {
        fontStyle.b = true;
    }
    if (rPr.i) {
        fontStyle.i = true;
    }
    if (rPr.sz) {
        fontStyle.size = rPr.sz;
    }
    if (rPr.rFont) {
        fontStyle.family = rPr.rFont;
    }
    return fontStyle;
}
/**
 * 合并 rPr 和默认字体
 */
function mergeRPrWithDefaultFont(rPr, defaultFont) {
    var fontStyle = rPrToFontStyle(rPr);
    return __assign(__assign({}, defaultFont), fontStyle);
}
/**
 * 基于 rPr 生成字体字符串
 * @param defaultFont 默认字体样式
 */
function genFontStrFromRPr(rPr, defaultFont) {
    // 其实不知道是不是要合并默认字体
    return genFontStr(mergeRPrWithDefaultFont(rPr, defaultFont));
}

export { genFontStr, genFontStrFromRPr, mergeRPrWithDefaultFont, rPrToFontStyle };
