import { __values, __read } from 'tslib';
import { viewRangeToRangeRef, parseRange, rangeIntersect } from '../../io/excel/util/Range.js';
import { renderSparkline } from './renderSparkline.js';
import { getRangePosition } from '../selection/getRangePosition.js';

/**
 * 绘制 sparkline
 */
function drawSparkline(currentSheet, viewRange, canvas) {
    var e_1, _a;
    var _b;
    var workbook = currentSheet.getWorkbook();
    var viewRangeRef = viewRangeToRangeRef(viewRange);
    var sparklineGroups = currentSheet.getSparklineGroups();
    var _loop_1 = function (sparklineGroup) {
        var e_2, _c;
        var _loop_2 = function (sparkline) {
            var f = sparkline['xm:f'];
            var sqref = sparkline['xm:sqref'];
            if (!f || !sqref) {
                console.warn('sparkline 缺少必要的 xm:f 和 xm:sqref 字段', sparkline);
                return "continue";
            }
            var sqrefCellRange = parseRange(sqref);
            if (rangeIntersect(viewRangeRef, sqrefCellRange)) {
                if (f.includes('!')) {
                    var cellDisplayData_1 = getRangePosition(workbook, viewRange.region, sqrefCellRange);
                    if (!cellDisplayData_1) {
                        console.warn('找不到对应的单元格', sqref);
                        return "continue";
                    }
                    var _f = __read(f.split('!'), 2), sheetName = _f[0], rangeStr = _f[1];
                    // 获取范围内的数据
                    var dataRange = parseRange(rangeStr);
                    var targetSheet = workbook.getSheetByName(sheetName);
                    if (targetSheet) {
                        var displayHidden = sparklineGroup.displayHidden;
                        var dataInRange = targetSheet.getCellValueByRange(dataRange, displayHidden);
                        var data_1 = dataInRange.map(function (val) { return val.value + ''; });
                        var cacheKey = "".concat(sheetName, "!").concat(JSON.stringify(sparkline));
                        var padding_1 = 3;
                        canvas.customDrawWithCache(cacheKey, cellDisplayData_1.x + padding_1, cellDisplayData_1.y + padding_1, cellDisplayData_1.width - 2 * padding_1, cellDisplayData_1.height - 2 * padding_1, function (ctx) {
                            renderSparkline(ctx, cellDisplayData_1.width - 2 * padding_1, cellDisplayData_1.height - 2 * padding_1, data_1, sparklineGroup, function (color) {
                                return currentSheet.dataProvider.getColor(color);
                            });
                        });
                    }
                    else {
                        console.warn('找不到目标 sheet', sheetName);
                    }
                }
                else {
                    console.warn('未知 sparkline 引用格式', f);
                }
            }
        };
        try {
            for (var _d = (e_2 = void 0, __values(((_b = sparklineGroup['x14:sparklines']) === null || _b === void 0 ? void 0 : _b['x14:sparkline']) || [])), _e = _d.next(); !_e.done; _e = _d.next()) {
                var sparkline = _e.value;
                _loop_2(sparkline);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_e && !_e.done && (_c = _d.return)) _c.call(_d);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    try {
        for (var sparklineGroups_1 = __values(sparklineGroups), sparklineGroups_1_1 = sparklineGroups_1.next(); !sparklineGroups_1_1.done; sparklineGroups_1_1 = sparklineGroups_1.next()) {
            var sparklineGroup = sparklineGroups_1_1.value;
            _loop_1(sparklineGroup);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (sparklineGroups_1_1 && !sparklineGroups_1_1.done && (_a = sparklineGroups_1.return)) _a.call(sparklineGroups_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
}

export { drawSparkline };
