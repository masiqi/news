/**
 * 简单的 input 组件 封装
 */
var inputId = 0;
var Input = /** @class */ (function () {
    function Input(args) {
        var _this = this;
        this.input = document.createElement('input');
        this.input.value = args.value || '';
        this.input.placeholder = args.placeholder || '';
        args.container.appendChild(this.input);
        this.input.className = 'excel-input';
        if (args.style === 'borderLess') {
            this.input.classList.add('excel-input-border-less');
        }
        this.input.oninput = function () {
            args.onChange(_this.input.value);
        };
        this.input.onkeydown = function (e) {
            var _a;
            if (e.key === 'Enter') {
                (_a = args.onEnter) === null || _a === void 0 ? void 0 : _a.call(args, _this.input.value);
            }
        };
        if (args.options && args.options.length) {
            var datalist_1 = document.createElement('datalist');
            datalist_1.id = "".concat(inputId++, "-list");
            args.container.appendChild(datalist_1);
            args.options.forEach(function (option) {
                var optionElement = document.createElement('option');
                optionElement.value = option;
                datalist_1.appendChild(optionElement);
            });
            this.input.setAttribute('list', datalist_1.id);
        }
    }
    Input.prototype.getElement = function () {
        return this.input;
    };
    Input.prototype.getValue = function () {
        return this.input.value;
    };
    Input.prototype.setValue = function (text) {
        this.input.value = text;
    };
    Input.prototype.force = function () {
        this.input.focus();
    };
    return Input;
}());

export { Input };
