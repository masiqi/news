import { __values } from 'tslib';
import { binarySearch } from '../../../util/binarySearch.js';

/**
 * 获取单元格的位置信息
 */
/**
 * 在 viewRange 内查找到 col 的位置
 */
function findColInViewRange(col, viewRange) {
    if (!viewRange) {
        return null;
    }
    var colIndex = binarySearch(viewRange.cols, col);
    if (colIndex !== -1) {
        return {
            x: viewRange.colSizes[colIndex].offset,
            width: viewRange.colSizes[colIndex].size
        };
    }
    return null;
}
/**
 * 在 viewRange 内查找到 row 的位置
 */
function findRowInViewRange(row, viewRange) {
    if (!viewRange) {
        return null;
    }
    var rowIndex = binarySearch(viewRange.rows, row);
    if (rowIndex !== -1) {
        return {
            y: viewRange.rowSizes[rowIndex].offset,
            height: viewRange.rowSizes[rowIndex].size
        };
    }
    return null;
}
/**
 * 获取单元格的行位置
 */
function getCellRowPosition(sheet, region, row) {
    var viewRange = sheet.getViewRange();
    var frozenViewRange = sheet.getFrozenViewRange();
    if (region === 'normal' && viewRange) {
        return findRowInViewRange(row, viewRange);
    }
    if (region === 'top-left-frozen' && frozenViewRange) {
        return findRowInViewRange(row, frozenViewRange.topLeftViewRange);
    }
    if (region === 'left-frozen' && frozenViewRange) {
        return findRowInViewRange(row, frozenViewRange.leftViewRange);
    }
    if (region === 'top-frozen' && frozenViewRange) {
        return findRowInViewRange(row, frozenViewRange.topViewRange);
    }
    return null;
}
/**
 * 获取单元格的列位置
 */
function getCellColPosition(sheet, region, col) {
    var viewRange = sheet.getViewRange();
    var frozenViewRange = sheet.getFrozenViewRange();
    if (region === 'normal' && viewRange) {
        return findColInViewRange(col, viewRange);
    }
    if (region === 'top-left-frozen' && frozenViewRange) {
        return findColInViewRange(col, frozenViewRange.topLeftViewRange);
    }
    if (region === 'left-frozen' && frozenViewRange) {
        return findColInViewRange(col, frozenViewRange.leftViewRange);
    }
    if (region === 'top-frozen' && frozenViewRange) {
        return findColInViewRange(col, frozenViewRange.topViewRange);
    }
    return null;
}
/**
 * 获取某个单元格的位置信息，但考虑了合并单元格的情况
 * @param workbook 工作簿
 * @param region 区域
 * @param col 行
 * @param row 列
 * @returns
 */
function getCellPositionWithMerge(sheet, region, col, row) {
    var e_1, _a;
    var colPosition = getCellColPosition(sheet, region, col);
    var rowPosition = getCellRowPosition(sheet, region, row);
    var mergeCells = sheet.getMergeCells();
    if (colPosition && rowPosition) {
        try {
            for (var mergeCells_1 = __values(mergeCells), mergeCells_1_1 = mergeCells_1.next(); !mergeCells_1_1.done; mergeCells_1_1 = mergeCells_1.next()) {
                var mergeCell = mergeCells_1_1.value;
                var startRow = mergeCell.startRow, endRow = mergeCell.endRow, startCol = mergeCell.startCol, endCol = mergeCell.endCol;
                if (row >= startRow &&
                    row <= endRow &&
                    col >= startCol &&
                    col <= endCol) {
                    for (var i = startRow; i <= endRow; i++) {
                        if (i !== row) {
                            rowPosition.height += sheet.getRowHeight(i);
                        }
                    }
                    for (var i = startCol; i <= endCol; i++) {
                        if (i !== col) {
                            colPosition.width += sheet.getColWidth(i);
                        }
                    }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (mergeCells_1_1 && !mergeCells_1_1.done && (_a = mergeCells_1.return)) _a.call(mergeCells_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return {
            x: colPosition.x,
            y: rowPosition.y,
            width: colPosition.width,
            height: rowPosition.height
        };
    }
    return null;
}

export { getCellColPosition, getCellPositionWithMerge, getCellRowPosition };
