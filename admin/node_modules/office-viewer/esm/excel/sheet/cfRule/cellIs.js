import { gt, gte, lt, lte } from '../../../util/number.js';
import { applyCfRuleDxf } from './applyCfRuleDxf.js';

function equal(text, formula) {
    var firstFormula = formula[0];
    return text === firstFormula;
}
function notEqual(text, formula) {
    var firstFormula = formula[0];
    return text !== firstFormula;
}
function greaterThan(text, formula) {
    var firstFormula = formula[0];
    try {
        var textValue = parseFloat(text);
        var formulaValue = parseFloat(firstFormula);
        return gt(textValue, formulaValue);
    }
    catch (error) {
        console.warn('error', error);
    }
    return false;
}
function greaterThanOrEqual(text, formula) {
    var firstFormula = formula[0];
    try {
        var textValue = parseFloat(text);
        var formulaValue = parseFloat(firstFormula);
        return gte(textValue, formulaValue);
    }
    catch (error) {
        console.warn('error', error);
    }
    return false;
}
function lessThan(text, formula) {
    var firstFormula = formula[0];
    try {
        var textValue = parseFloat(text);
        var formulaValue = parseFloat(firstFormula);
        return lt(textValue, formulaValue);
    }
    catch (error) {
        console.warn('error', error);
    }
    return false;
}
function lessThanOrEqual(text, formula) {
    var firstFormula = formula[0];
    try {
        var textValue = parseFloat(text);
        var formulaValue = parseFloat(firstFormula);
        return lte(textValue, formulaValue);
    }
    catch (error) {
        console.warn('error', error);
    }
    return false;
}
function between(text, formula) {
    try {
        var textValue = parseFloat(text);
        var firstValue = parseFloat(formula[0]);
        var secondValue = parseFloat(formula[1]);
        return gte(textValue, firstValue) && lte(textValue, secondValue);
    }
    catch (error) {
        console.warn('error', error);
    }
    return false;
}
function notBetween(text, formula) {
    try {
        var textValue = parseFloat(text);
        var firstValue = parseFloat(formula[0]);
        var secondValue = parseFloat(formula[1]);
        return lt(textValue, firstValue) || gt(textValue, secondValue);
    }
    catch (error) {
        console.warn('error', error);
    }
    return false;
}
function containsText(text, formula) {
    var firstFormula = formula[0];
    return text.includes(firstFormula);
}
function notContains(text, formula) {
    var firstFormula = formula[0];
    return !text.includes(firstFormula);
}
function beginsWith(text, formula) {
    var firstFormula = formula[0];
    return text.startsWith(firstFormula);
}
function endsWith(text, formula) {
    var firstFormula = formula[0];
    return text.endsWith(firstFormula);
}
function evalOperator(operator, text, formula) {
    switch (operator) {
        case 'equal':
            return equal(text, formula);
        case 'notEqual':
            return notEqual(text, formula);
        case 'greaterThan':
            return greaterThan(text, formula);
        case 'greaterThanOrEqual':
            return greaterThanOrEqual(text, formula);
        case 'lessThan':
            return lessThan(text, formula);
        case 'lessThanOrEqual':
            return lessThanOrEqual(text, formula);
        case 'between':
            return between(text, formula);
        case 'notBetween':
            return notBetween(text, formula);
        case 'containsText':
            return containsText(text, formula);
        case 'notContains':
            return notContains(text, formula);
        case 'beginsWith':
            return beginsWith(text, formula);
        case 'endsWith':
            return endsWith(text, formula);
        default:
            console.warn('未知的 operator', operator);
    }
    return false;
}
/**
 * 类似
 *  <cfRule type="cellIs" dxfId="0" priority="1" operator="greaterThanOrEqual">
      <formula>50</formula>
    </cfRule>
 */
function cellIs(sheet, cellInfo, cfRule) {
    var formula = cfRule.formula || [];
    if (!formula.length) {
        return false;
    }
    var value = cellInfo.value;
    var operator = cfRule.operator;
    if (value === '' || !operator) {
        return false;
    }
    var match = evalOperator(operator, value, formula);
    if (match) {
        applyCfRuleDxf(cfRule, sheet, cellInfo);
        return true;
    }
    return false;
}

export { beginsWith, between, cellIs, containsText, endsWith, equal, greaterThan, greaterThanOrEqual, lessThan, lessThanOrEqual, notBetween, notContains, notEqual };
