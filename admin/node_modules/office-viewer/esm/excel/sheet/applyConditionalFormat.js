import { __values } from 'tslib';
import { parseRange, isCellInRange } from '../io/excel/util/Range.js';
import { aboveAverage } from './cfRule/aboveAverage.js';
import { cellIs } from './cfRule/cellIs.js';
import { colorScale } from './cfRule/colorScale.js';
import { dataBar } from './cfRule/dataBar.js';
import { duplicateValues } from './cfRule/duplicateValues.js';
import { iconSet } from './cfRule/iconSet.js';
import { timePeriod } from './cfRule/timePeriod.js';
import { top10 } from './cfRule/top10.js';
import { uniqueValues } from './cfRule/uniqueValues.js';
import { containsText } from './cfRule/containsText.js';
import { containsBlanks } from './cfRule/containsBlanks.js';
import { containsErrors } from './cfRule/containsErrors.js';
import { notContainsText } from './cfRule/notContainsText.js';

/**
 * 计算条件格式
 */
function evalRule(sheet, cellInfo, ranges, rule) {
    var type = rule.type;
    switch (type) {
        case 'cellIs':
            return cellIs(sheet, cellInfo, rule);
        case 'uniqueValues':
            return uniqueValues(sheet, cellInfo, ranges, rule);
        case 'duplicateValues':
            return duplicateValues(sheet, cellInfo, ranges, rule);
        case 'aboveAverage':
            return aboveAverage(sheet, cellInfo, ranges, rule);
        case 'top10':
            return top10(sheet, cellInfo, ranges, rule);
        case 'colorScale':
            return colorScale(sheet, cellInfo, ranges, rule);
        case 'dataBar':
            return dataBar(sheet, cellInfo, ranges, rule);
        case 'iconSet':
            return iconSet(sheet, cellInfo, ranges, rule);
        case 'timePeriod':
            return timePeriod(sheet, cellInfo, ranges, rule);
        case 'containsText':
            return containsText(sheet, cellInfo, rule);
        case 'notContainsText':
            return notContainsText(sheet, cellInfo, rule);
        case 'containsBlanks':
            return containsBlanks(sheet, cellInfo, rule);
        case 'containsErrors':
            return containsErrors(sheet, cellInfo, rule);
        default:
            console.warn('未知的条件格式类型', type);
    }
    return false;
}
function applyConditionalFormat(sheet, cellInfo, row, col) {
    var e_1, _a, e_2, _b, e_3, _c;
    var conditionalFormatting = sheet.getConditionalFormatting();
    try {
        for (var conditionalFormatting_1 = __values(conditionalFormatting), conditionalFormatting_1_1 = conditionalFormatting_1.next(); !conditionalFormatting_1_1.done; conditionalFormatting_1_1 = conditionalFormatting_1.next()) {
            var formatting = conditionalFormatting_1_1.value;
            var sqref = formatting.sqref;
            if (!sqref) {
                continue;
            }
            var ranges = sqref.split(' ').map(parseRange);
            try {
                for (var ranges_1 = (e_2 = void 0, __values(ranges)), ranges_1_1 = ranges_1.next(); !ranges_1_1.done; ranges_1_1 = ranges_1.next()) {
                    var range = ranges_1_1.value;
                    if (isCellInRange(range, row, col)) {
                        var cfRules = formatting.cfRule || [];
                        try {
                            for (var cfRules_1 = (e_3 = void 0, __values(cfRules)), cfRules_1_1 = cfRules_1.next(); !cfRules_1_1.done; cfRules_1_1 = cfRules_1.next()) {
                                var rule = cfRules_1_1.value;
                                try {
                                    var evalResult = evalRule(sheet, cellInfo, ranges, rule);
                                    if (rule.stopIfTrue && evalResult) {
                                        break;
                                    }
                                }
                                catch (error) {
                                    console.warn('条件格式处理失败', error);
                                }
                            }
                        }
                        catch (e_3_1) { e_3 = { error: e_3_1 }; }
                        finally {
                            try {
                                if (cfRules_1_1 && !cfRules_1_1.done && (_c = cfRules_1.return)) _c.call(cfRules_1);
                            }
                            finally { if (e_3) throw e_3.error; }
                        }
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (ranges_1_1 && !ranges_1_1.done && (_b = ranges_1.return)) _b.call(ranges_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (conditionalFormatting_1_1 && !conditionalFormatting_1_1.done && (_a = conditionalFormatting_1.return)) _a.call(conditionalFormatting_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
}

export { applyConditionalFormat };
