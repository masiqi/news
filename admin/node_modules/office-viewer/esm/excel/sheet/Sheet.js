import { __values, __assign, __spreadArray, __read } from 'tslib';
import { getViewRange } from './getViewRange.js';
import { PADDING_SIZE } from '../render/Consts.js';
import { getViewPointData } from './getViewPointData.js';
import { getFrozenLeftViewPointRange } from '../render/cell/frozen/getFrozenLeftViewPointRange.js';
import { getFrozenTopLeftViewPointRange } from '../render/cell/frozen/getFrozenTopLeftViewPointRange.js';
import { getFrozenTopViewPointRange } from '../render/cell/frozen/getFrozenTopViewPointRange.js';
import { hitTest } from '../render/selection/hitTest.js';
import { isMergeCell } from '../io/excel/util/Range.js';
import { pointInRect } from '../render/Rect.js';
import { applyConditionalFormat } from './applyConditionalFormat.js';
import { RangeCache } from './RangeCache.js';
import { applyTablePartsStyle } from './applyTablePartsStyle.js';
import { getCellAbsolutePosition } from './getCellAbsolutePosition.js';
import { getAbsoluteAnchorPosition } from '../render/drawing/getAbsoluteAnchorPosition.js';
import { getOneCellAnchorPosition } from '../render/drawing/getOneCellAnchorPosition.js';
import { getTwoCellAnchorPosition } from '../render/drawing/getTwoCellAnchorPosition.js';
import { applyAutoFilter } from '../data/applyAutoFilter.js';

/**
 * sheet 的相关操作及临时状态
 */
var Sheet = /** @class */ (function () {
    function Sheet(sheetIndex, dataProvider, sheetData, workbook, renderOptions) {
        var _a, _b;
        this.rangeCache = new RangeCache();
        /**
         * 水平滚动条位置
         */
        this.scrollLeft = 0;
        /**
         * 垂直滚动条位置
         */
        this.scrollTop = 0;
        /**
         * 行高，这里只记录自定义的行高
         */
        this.customRowHeight = [];
        /**
         * 列宽，这里只记录自定义的列宽
         */
        this.customColumnWidth = [];
        /**
         * 表头的宽度，这个会随着滚动而变化，这里设置个初始值
         */
        this.rowHeaderWidth = 29.34765625;
        /**
         * 表头的高度，这个是固定的，如果不显示
         */
        this.colHeaderHeight = 25;
        /**
         * 缩放比例
         */
        this.zoomLevel = 1;
        this.rowPositionCache = [];
        this.colPositionCache = [];
        // 用于缓存最大的 drawing 的高度和宽度
        this.maxDrawingHeightAndWidthCache = null;
        this.sheetIndex = sheetIndex;
        this.dataProvider = dataProvider;
        this.sheetData = sheetData;
        this.workbook = workbook;
        this.renderOptions = renderOptions;
        // 设置默认展示方式
        if ((_b = (_a = sheetData.worksheet) === null || _a === void 0 ? void 0 : _a.sheetViews) === null || _b === void 0 ? void 0 : _b.length) {
            this.currentSheetView = sheetData.worksheet.sheetViews[0];
        }
        else {
            // 如果没有就加个默认设置避免报错
            this.currentSheetView = {
                showGridLines: true,
                showRowColHeaders: true
            };
        }
        if (!this.showRowColHeaders()) {
            this.colHeaderHeight = 0;
            this.rowHeaderWidth = 0;
        }
        this.defaultFontSize = dataProvider.getDefaultFontSize();
        // 初始按两个字符宽度来计算
        this.rowHeaderWidth = 2 * this.defaultFontSize.width + 4 * PADDING_SIZE;
        workbook.uiEvent.on('CHANGE_SELECTION', this.handleChangeSelection.bind(this));
    }
    Sheet.prototype.handleChangeSelection = function (selection) {
        if (selection.sheetIndex === this.sheetIndex) {
            this.selection = selection;
        }
        if (this.lastAutoFilterIcon) {
            this.lastAutoFilterIcon.hideMenu();
        }
    };
    Sheet.prototype.getSheetName = function () {
        return this.dataProvider.getSheetByIndex(this.sheetIndex).name;
    };
    /**
     * 获取当前 sheet 的视图设置
     */
    Sheet.prototype.getCurrentSheetView = function () {
        return this.currentSheetView;
    };
    Sheet.prototype.getScrollLeft = function () {
        return this.scrollLeft;
    };
    Sheet.prototype.setScrollLeft = function (scrollLeft) {
        if (Math.round(scrollLeft) !== Math.round(this.scrollLeft)) {
            this.scrollLeft = scrollLeft;
            if (this.scrollLeft < 0) {
                this.scrollLeft = 0;
            }
        }
    };
    Sheet.prototype.updateViewRange = function (viewRange) {
        this.dataViewRange = viewRange;
    };
    Sheet.prototype.updateFrozenViewRange = function (viewRange) {
        this.frozenViewRange = viewRange;
    };
    Sheet.prototype.getViewRange = function () {
        return this.dataViewRange;
    };
    Sheet.prototype.getFrozenViewRange = function () {
        return this.frozenViewRange;
    };
    /**
     * 增量修改水平滚动条
     */
    Sheet.prototype.deltaScrollLeft = function (delta) {
        this.scrollLeft += delta;
        if (this.scrollLeft < 0) {
            this.scrollLeft = 0;
        }
    };
    Sheet.prototype.getScrollTop = function () {
        return this.scrollTop;
    };
    Sheet.prototype.setScrollTop = function (scrollTop) {
        if (Math.round(scrollTop) !== Math.round(this.scrollTop)) {
            this.scrollTop = scrollTop;
            if (this.scrollTop < 0) {
                this.scrollTop = 0;
            }
        }
    };
    /**
     * 增量修改垂直滚动条
     */
    Sheet.prototype.deltaScrollTop = function (delta) {
        this.scrollTop += delta;
        if (this.scrollTop < 0) {
            this.scrollTop = 0;
        }
    };
    /**
     * 判断当前坐标下是什么
     * @param offsetX
     * @param offsetY
     * @returns
     */
    Sheet.prototype.hitTest = function (offsetX, offsetY) {
        var _a = this.getRowColSize(), rowHeaderWidth = _a.rowHeaderWidth, colHeaderHeight = _a.colHeaderHeight;
        var gridLineHitRange = this.renderOptions.gridLineHitRange;
        var hitTestDrawingResult = this.hitTestDrawing(offsetX, offsetY);
        if (hitTestDrawingResult) {
            return hitTestDrawingResult;
        }
        var hitTestResult = hitTest(offsetX, offsetY, rowHeaderWidth, colHeaderHeight, gridLineHitRange, this.dataViewRange, this.frozenViewRange, this.getMergeCells());
        return hitTestResult;
    };
    /**
     * 判断是否点到图形上
     */
    Sheet.prototype.hitTestDrawing = function (offsetX, offsetY) {
        var e_1, _a, e_2, _b, e_3, _c;
        var drawing = this.getDrawing();
        var fakeCell = {
            startRow: 0,
            startCol: 0,
            endRow: 0,
            endCol: 0
        };
        if (drawing) {
            try {
                for (var _d = __values(drawing.absoluteAnchors), _e = _d.next(); !_e.done; _e = _d.next()) {
                    var absoluteAnchor = _e.value;
                    var position = this.absolutePositionToRelativePosition(getAbsoluteAnchorPosition(absoluteAnchor));
                    if (pointInRect(offsetX, offsetY, position)) {
                        return __assign(__assign({ type: 'drawing', drawing: absoluteAnchor, region: 'normal' }, fakeCell), position);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
                }
                finally { if (e_1) throw e_1.error; }
            }
            try {
                for (var _f = __values(drawing.oneCellAnchors), _g = _f.next(); !_g.done; _g = _f.next()) {
                    var oneCellAnchor = _g.value;
                    var position = getOneCellAnchorPosition(oneCellAnchor, this);
                    if (pointInRect(offsetX, offsetY, position)) {
                        return __assign(__assign({ type: 'drawing', drawing: oneCellAnchor, region: 'normal' }, fakeCell), position);
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                }
                finally { if (e_2) throw e_2.error; }
            }
            try {
                for (var _h = __values(drawing.twoCellAnchors), _j = _h.next(); !_j.done; _j = _h.next()) {
                    var twoCellAnchor = _j.value;
                    var position = getTwoCellAnchorPosition(twoCellAnchor, this);
                    if (pointInRect(offsetX, offsetY, position)) {
                        return __assign(__assign({ type: 'drawing', drawing: twoCellAnchor, region: 'normal' }, fakeCell), position);
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_j && !_j.done && (_c = _h.return)) _c.call(_h);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        return null;
    };
    /**
     * 将绝对地址转成在视图内的相对地址
     */
    Sheet.prototype.absolutePositionToRelativePosition = function (absolutePos) {
        return {
            x: absolutePos.x - this.scrollLeft + this.rowHeaderWidth,
            y: absolutePos.y - this.scrollTop + this.colHeaderHeight,
            width: absolutePos.width,
            height: absolutePos.height
        };
    };
    /**
     * 是否显示网格线，如果没有设置就使用 sheet 里的设置
     */
    Sheet.prototype.showGridLines = function () {
        if (typeof this.renderOptions.showGridLines === 'undefined') {
            return this.currentSheetView.showGridLines;
        }
        else {
            return this.renderOptions.showGridLines;
        }
    };
    Sheet.prototype.showRowColHeaders = function () {
        return (this.renderOptions.showRowColHeaders &&
            this.currentSheetView.showRowColHeaders);
    };
    /**
     * 滚动时需要动态更新当前表的表头宽度
     */
    Sheet.prototype.updateRowHeaderWidth = function (viewRange) {
        // 这里的是 padding 的 4 倍
        var lastIndex = viewRange.rows[viewRange.rows.length - 1];
        this.rowHeaderWidth =
            String(lastIndex).length * this.defaultFontSize.width + 4 * PADDING_SIZE;
        this.workbook.updateDataContainerSize(this.rowHeaderWidth, this.colHeaderHeight);
    };
    /**
     * 获取表头的大小
     */
    Sheet.prototype.getRowColSize = function () {
        if (this.showRowColHeaders()) {
            return {
                rowHeaderWidth: this.rowHeaderWidth,
                colHeaderHeight: this.colHeaderHeight
            };
        }
        else {
            return {
                rowHeaderWidth: 0,
                colHeaderHeight: 0
            };
        }
    };
    /**
     * 获取范围内的数据
     */
    Sheet.prototype.getCellValueByRange = function (range, includeHidden) {
        if (includeHidden === void 0) { includeHidden = false; }
        return this.dataProvider.getCellValueByRange(this.sheetIndex, range, includeHidden);
    };
    /**
     * 获取多个范围内的数据
     */
    Sheet.prototype.getCellValueByRanges = function (ranges, includeHidden) {
        var e_4, _a;
        if (includeHidden === void 0) { includeHidden = false; }
        var result = [];
        try {
            for (var ranges_1 = __values(ranges), ranges_1_1 = ranges_1.next(); !ranges_1_1.done; ranges_1_1 = ranges_1.next()) {
                var range = ranges_1_1.value;
                result.push.apply(result, __spreadArray([], __read(this.getCellValueByRange(range, includeHidden)), false));
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (ranges_1_1 && !ranges_1_1.done && (_a = ranges_1.return)) _a.call(ranges_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return result;
    };
    /**
     * 返回可视区域的数据及位置信息
     */
    Sheet.prototype.getViewPointData = function (viewRange) {
        var _this = this;
        return getViewPointData(function (row) {
            return _this.dataProvider.getSheetRowData(_this.sheetIndex, row);
        }, function () {
            return _this.dataProvider.getMergeCells(_this.sheetIndex);
        }, this.getRowHeight.bind(this), this.getColWidth.bind(this), viewRange);
    };
    Sheet.prototype.getSheetRowData = function (row) {
        return this.dataProvider.getSheetRowData(this.sheetIndex, row);
    };
    Sheet.prototype.getRowHeight = function (row) {
        return this.dataProvider.getRowHeight(this.sheetIndex, row);
    };
    Sheet.prototype.getColWidth = function (col) {
        return this.dataProvider.getColWidth(this.sheetIndex, col);
    };
    Sheet.prototype.getTotalWidth = function () {
        return Math.max(this.getMaxDrawingHeightAndWidth().width, this.dataProvider.getTotalWidth(this.sheetIndex));
    };
    Sheet.prototype.getTotalHeight = function () {
        return Math.max(this.getMaxDrawingHeightAndWidth().height, this.dataProvider.getTotalHeight(this.sheetIndex));
    };
    /**
     * 获取某个单元格的实际位置信息
     * 如果这个单元格属于某个合并单元格，这里将返回合并单元格的位置信息
     *
     * @param x 单元格的 x 坐标
     * @param y 单元格的 y 坐标
     */
    Sheet.prototype.getCellDisplaySize = function (row, col, x, y) {
        var e_5, _a;
        var rowHeight = this.getRowHeight(row);
        var colWidth = this.getColWidth(col);
        var mergeCells = this.getMergeCells();
        try {
            for (var mergeCells_1 = __values(mergeCells), mergeCells_1_1 = mergeCells_1.next(); !mergeCells_1_1.done; mergeCells_1_1 = mergeCells_1.next()) {
                var mergeCell = mergeCells_1_1.value;
                var startRow = mergeCell.startRow, endRow = mergeCell.endRow, startCol = mergeCell.startCol, endCol = mergeCell.endCol;
                if (row >= startRow &&
                    row <= endRow &&
                    col >= startCol &&
                    col <= endCol) {
                    // 如果是合并单元格，需要计算出总高度和宽度
                    var totalHeight = 0;
                    for (var i = startRow; i <= endRow; i++) {
                        totalHeight += this.getRowHeight(i);
                    }
                    rowHeight = totalHeight;
                    var totalWidth = 0;
                    for (var i = startCol; i <= endCol; i++) {
                        totalWidth += this.getColWidth(i);
                    }
                    colWidth = totalWidth;
                    // 根据当前单元格 row 的 x 和 y 反选 startRow 和 startCol 的 x 和 y
                    for (var i = startRow; i < row; i++) {
                        y -= this.getRowHeight(i);
                    }
                    for (var i = startCol; i < col; i++) {
                        x -= this.getColWidth(i);
                    }
                }
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (mergeCells_1_1 && !mergeCells_1_1.done && (_a = mergeCells_1.return)) _a.call(mergeCells_1);
            }
            finally { if (e_5) throw e_5.error; }
        }
        return {
            x: x,
            y: y,
            height: rowHeight,
            width: colWidth
        };
    };
    /**
     * 获取最大行数
     */
    Sheet.prototype.getMaxRow = function () {
        return this.dataProvider.getMaxRow(this.sheetIndex);
    };
    /**
     * 获取最大列数
     */
    Sheet.prototype.getMaxCol = function () {
        return this.dataProvider.getMaxCol(this.sheetIndex);
    };
    /**
     * 获取可视范围内的数据范围，这个包括没有数据的部分，这个函数的性能很关键
     * @returns 从 0 开始的行和列
     */
    Sheet.prototype.getViewPointRange = function (width, height) {
        var _this = this;
        return getViewRange(this.scrollLeft, this.scrollTop, this.rowHeaderWidth, this.colHeaderHeight, height, width, function (index) { return _this.dataProvider.getRowHeight(_this.sheetIndex, index); }, this.rowPositionCache, function (index) { return _this.dataProvider.getColWidth(_this.sheetIndex, index); }, this.colPositionCache, this.dataProvider.getColHiddenRange(this.sheetIndex));
    };
    Sheet.prototype.getFrozenTopLeftViewPointRange = function (xSplit, ySplit) {
        var _this = this;
        return getFrozenTopLeftViewPointRange(xSplit, ySplit, this.rowHeaderWidth, this.colHeaderHeight, function (index) { return _this.dataProvider.getRowHeight(_this.sheetIndex, index); }, function (index) { return _this.dataProvider.getColWidth(_this.sheetIndex, index); });
    };
    Sheet.prototype.getFrozenTopViewPointRange = function (ySplit, width) {
        var _this = this;
        return getFrozenTopViewPointRange(ySplit, width, this.scrollLeft, this.rowHeaderWidth, this.colHeaderHeight, function (index) { return _this.dataProvider.getRowHeight(_this.sheetIndex, index); }, function (index) { return _this.dataProvider.getColWidth(_this.sheetIndex, index); }, this.colPositionCache, this.dataProvider.getColHiddenRange(this.sheetIndex));
    };
    Sheet.prototype.getFrozenLeftViewPointRange = function (xSplit, height) {
        var _this = this;
        return getFrozenLeftViewPointRange(xSplit, height, this.scrollTop, this.rowHeaderWidth, this.colHeaderHeight, function (index) { return _this.dataProvider.getRowHeight(_this.sheetIndex, index); }, function (index) { return _this.dataProvider.getColWidth(_this.sheetIndex, index); }, this.rowPositionCache);
    };
    /**
     * 获取单元格样式及数据
     */
    Sheet.prototype.getCellInfo = function (row, col) {
        var cellInfo = this.dataProvider.getCellInfo(this.sheetIndex, row, col);
        applyConditionalFormat(this, cellInfo, row, col);
        applyTablePartsStyle(this, cellInfo);
        return cellInfo;
    };
    Sheet.prototype.getCellData = function (row, col) {
        return this.dataProvider.getCellData(this.sheetIndex, row, col);
    };
    Sheet.prototype.getCellValue = function (row, col) {
        return this.dataProvider.getCellValue(this.sheetIndex, row, col);
    };
    /**
     * 获取某个单元格在渲染时的位置信息，这个方法可以获取到没在渲染区域内的单元格位置
     */
    Sheet.prototype.getCellPosition = function (row, col) {
        var _this = this;
        var cellAbsolutePosition = getCellAbsolutePosition(row, col, function (index) { return _this.dataProvider.getRowHeight(_this.sheetIndex, index); }, this.rowPositionCache, function (index) { return _this.dataProvider.getColWidth(_this.sheetIndex, index); }, this.colPositionCache);
        return {
            x: cellAbsolutePosition.x - this.scrollLeft + this.rowHeaderWidth,
            y: cellAbsolutePosition.y - this.scrollTop + this.colHeaderHeight,
            width: cellAbsolutePosition.width,
            height: cellAbsolutePosition.height
        };
    };
    Sheet.prototype.getMergeCells = function () {
        return this.dataProvider.getMergeCells(this.sheetIndex);
    };
    Sheet.prototype.getSelection = function () {
        return this.selection;
    };
    /**
     * 获取最大 drawing 的高度和宽度，这个主要是为了滚动条计算
     */
    Sheet.prototype.getMaxDrawingHeightAndWidth = function () {
        var e_6, _a, e_7, _b, e_8, _c;
        if (this.maxDrawingHeightAndWidthCache) {
            return this.maxDrawingHeightAndWidthCache;
        }
        var drawing = this.getDrawing();
        if (drawing) {
            var maxWidth = 0;
            var maxHeight = 0;
            try {
                for (var _d = __values(drawing.absoluteAnchors), _e = _d.next(); !_e.done; _e = _d.next()) {
                    var absoluteAnchor = _e.value;
                    var size = getAbsoluteAnchorPosition(absoluteAnchor);
                    maxWidth = Math.max(maxWidth, size.x + size.width);
                    maxHeight = Math.max(maxHeight, size.y + size.height);
                }
            }
            catch (e_6_1) { e_6 = { error: e_6_1 }; }
            finally {
                try {
                    if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
                }
                finally { if (e_6) throw e_6.error; }
            }
            try {
                for (var _f = __values(drawing.oneCellAnchors), _g = _f.next(); !_g.done; _g = _f.next()) {
                    var oneCellAnchor = _g.value;
                    var size = getOneCellAnchorPosition(oneCellAnchor, this);
                    maxWidth = Math.max(maxWidth, size.x + size.width);
                    maxHeight = Math.max(maxHeight, size.y + size.height);
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                }
                finally { if (e_7) throw e_7.error; }
            }
            try {
                for (var _h = __values(drawing.twoCellAnchors), _j = _h.next(); !_j.done; _j = _h.next()) {
                    var twoCellAnchor = _j.value;
                    var size = getTwoCellAnchorPosition(twoCellAnchor, this);
                    maxWidth = Math.max(maxWidth, size.x + size.width);
                    maxHeight = Math.max(maxHeight, size.y + size.height);
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (_j && !_j.done && (_c = _h.return)) _c.call(_h);
                }
                finally { if (e_8) throw e_8.error; }
            }
            this.maxDrawingHeightAndWidthCache = {
                height: maxHeight,
                width: maxWidth
            };
            return {
                height: maxHeight,
                width: maxWidth
            };
        }
        return {
            height: 0,
            width: 0
        };
    };
    /**
     * 判断是否是某个合并单元格
     */
    Sheet.prototype.isMergeCell = function (mergeCell) {
        return isMergeCell(mergeCell, this.getMergeCells());
    };
    Sheet.prototype.getDrawing = function () {
        return this.dataProvider.getDrawing(this.sheetIndex);
    };
    /**
     * 获取当前 sheet 的显示区域
     */
    Sheet.prototype.getDisplayRect = function () {
        var _a = this.workbook.getViewpointSize(), width = _a.width, height = _a.height;
        return {
            x: this.scrollLeft,
            y: this.scrollTop,
            width: width,
            height: height
        };
    };
    /**
     * 获取数据区域的显示区域
     */
    Sheet.prototype.getDataDisplayRect = function () {
        var _a = this.workbook.getViewpointSize(), width = _a.width, height = _a.height;
        return {
            x: this.scrollLeft + this.rowHeaderWidth,
            y: this.scrollTop + this.colHeaderHeight,
            width: width - this.rowHeaderWidth,
            height: height - this.colHeaderHeight
        };
    };
    Sheet.prototype.getZoomLevel = function () {
        return this.zoomLevel;
    };
    Sheet.prototype.setZoomLevel = function (zoomLevel) {
        this.zoomLevel = zoomLevel;
        this.workbook.uiEvent.emit('CHANGE_ZOOM_LEVEL', zoomLevel);
    };
    Sheet.prototype.getIndex = function () {
        return this.sheetIndex;
    };
    Sheet.prototype.getConditionalFormatting = function () {
        return this.dataProvider.getConditionalFormatting(this.sheetIndex);
    };
    Sheet.prototype.getRangeCache = function () {
        return this.rangeCache;
    };
    Sheet.prototype.getWorkbook = function () {
        return this.workbook;
    };
    Sheet.prototype.getExtLst = function () {
        var _a;
        return (_a = this.sheetData.worksheet) === null || _a === void 0 ? void 0 : _a.extLst;
    };
    Sheet.prototype.getSparklineGroups = function () {
        var e_9, _a;
        var _b;
        try {
            for (var _c = __values(((_b = this.getExtLst()) === null || _b === void 0 ? void 0 : _b.ext) || []), _d = _c.next(); !_d.done; _d = _c.next()) {
                var ext = _d.value;
                if (ext['x14:sparklineGroups']) {
                    return ext['x14:sparklineGroups']['x14:sparklineGroup'] || [];
                }
            }
        }
        catch (e_9_1) { e_9 = { error: e_9_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_9) throw e_9.error; }
        }
        return [];
    };
    Sheet.prototype.isHidden = function () {
        return this.sheetData.state === 'hidden';
    };
    Sheet.prototype.getTableParts = function () {
        var _a;
        return ((_a = this.sheetData.worksheet) === null || _a === void 0 ? void 0 : _a.tableParts) || [];
    };
    Sheet.prototype.isRowHidden = function (row) {
        return this.dataProvider.isRowHidden(this.sheetIndex, row);
    };
    Sheet.prototype.isColHidden = function (col) {
        return this.dataProvider.isColHidden(this.sheetIndex, col);
    };
    Sheet.prototype.getAutoFilter = function () {
        var _a;
        return (_a = this.sheetData.worksheet) === null || _a === void 0 ? void 0 : _a.autoFilter;
    };
    Sheet.prototype.getTables = function () {
        var _a;
        return ((_a = this.sheetData.worksheet) === null || _a === void 0 ? void 0 : _a.tableParts) || [];
    };
    Sheet.prototype.getLastAutoFilterIcon = function () {
        return this.lastAutoFilterIcon;
    };
    Sheet.prototype.setLastAutoFilterIcon = function (autoFilterIcon) {
        this.lastAutoFilterIcon = autoFilterIcon;
    };
    Sheet.prototype.translate = function (key) {
        return this.workbook.translator(key);
    };
    /**
     * 同步 AutoFilter，当 AutoFilter 有变化的时候调用
     */
    Sheet.prototype.syncAutoFilter = function () { };
    /**
     * 应用单个 AutoFilter
     */
    Sheet.prototype.applyAutoFilter = function (autoFilter, headerRowCount) {
        if (headerRowCount === void 0) { headerRowCount = 1; }
        return applyAutoFilter(this.sheetIndex, this.workbook.getWorkbookData(), this.sheetData, this.dataProvider, autoFilter, headerRowCount);
    };
    Sheet.prototype.getSheetPr = function () {
        var _a;
        return (_a = this.sheetData.worksheet) === null || _a === void 0 ? void 0 : _a.sheetPr;
    };
    Sheet.prototype.getTabColor = function () {
        var _a;
        return this.dataProvider.getColor((_a = this.getSheetPr()) === null || _a === void 0 ? void 0 : _a.tabColor);
    };
    Sheet.prototype.updateCellValue = function (row, col, data) {
        this.dataProvider.updateCellData(this.sheetIndex, row, col, data);
    };
    /**
     * 修改行高
     * @param row
     * @param height 行高，使用 px
     */
    Sheet.prototype.setRowHeight = function (row, height) {
        this.dataProvider.setRowHeight(this.sheetIndex, row, height);
    };
    Sheet.prototype.setColWidth = function (col, width) {
        this.dataProvider.setColWidth(this.sheetIndex, col, width);
    };
    Sheet.prototype.clearFontCache = function () {
        this.dataProvider.clearDefaultFontSizeCache();
    };
    return Sheet;
}());

export { Sheet };
