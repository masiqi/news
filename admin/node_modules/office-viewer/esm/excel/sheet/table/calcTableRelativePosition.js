/**
 * 计算出这个位置相对于表格区域的位置，这个可以缓存的，但先不优化
 */
function calcTableRelativePosition(tableRange, isRowHidden, isColHidden, row, col, headerRowCount, totalsRowCount, totalsRowShown) {
    var rowType = undefined;
    var colType = undefined;
    var rowPosition = 'middle';
    var colPosition = 'middle';
    // 总行数
    var rowCount = 0;
    // 当前行在表格中的相对位置，这个是包含表头的
    var relativeRow = 0;
    for (var rowIndex = tableRange.startRow; rowIndex <= tableRange.endRow; rowIndex++) {
        if (!isRowHidden(rowIndex)) {
            rowCount++;
        }
        if (rowIndex === row) {
            relativeRow = rowCount - 1;
        }
    }
    // 当前行在表格中的相对位置，这个是去掉表头的
    var relativeRowWithoutHeader = relativeRow;
    if (headerRowCount > 0) {
        relativeRowWithoutHeader = relativeRowWithoutHeader - headerRowCount;
    }
    if (relativeRowWithoutHeader % 2 === 0) {
        rowType = 'odd';
    }
    else {
        rowType = 'even';
    }
    if (relativeRowWithoutHeader === 0) {
        rowPosition = 'first';
    }
    if (headerRowCount && relativeRow < headerRowCount) {
        rowPosition = 'header';
        rowType = 'header';
    }
    if (relativeRowWithoutHeader ===
        rowCount - headerRowCount - totalsRowCount - 1) {
        rowPosition = 'last';
    }
    if (totalsRowShown) {
        if (relativeRowWithoutHeader >=
            rowCount - headerRowCount - totalsRowCount) {
            rowType = 'total';
            rowPosition = 'total';
        }
    }
    // 总列数
    var colCount = 0;
    // 当前列在表格中的相对位置
    var relativeCol = 0;
    for (var colIndex = tableRange.startCol; colIndex <= tableRange.endCol; colIndex++) {
        if (!isColHidden(colIndex)) {
            colCount++;
        }
        if (colIndex === col) {
            relativeCol = colCount - 1;
        }
    }
    if (relativeCol % 2 === 0) {
        colType = 'odd';
    }
    else {
        colType = 'even';
    }
    if (relativeCol === 0) {
        colPosition = 'first';
    }
    if (relativeCol === colCount - 1) {
        colPosition = 'last';
    }
    if (rowType === undefined) {
        console.warn('calcRelativeType error', row, col, tableRange);
        rowType = 'odd';
    }
    if (colType === undefined) {
        console.warn('calcRelativeType error', row, col, tableRange);
        colType = 'odd';
    }
    return {
        rowType: rowType,
        colType: colType,
        rowPosition: rowPosition,
        colPosition: colPosition
    };
}

export { calcTableRelativePosition };
