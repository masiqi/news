import { onClickOutsideOnce } from '../../../util/onClickOutsideOnce.js';
import { Input } from '../../render/ui/Input.js';
import { updateValue } from '../../types/worksheet/CellData.js';

var lastCellEditor;
/**
 * 单元格编辑
 */
var CellEditor = /** @class */ (function () {
    function CellEditor(dataContainer, workbook, hitTest) {
        var _this = this;
        var _a, _b;
        if (lastCellEditor) {
            lastCellEditor.close();
        }
        this.workbook = workbook;
        this.editorContainer = document.createElement('div');
        this.editorContainer.className = 'excel-cell-editor';
        dataContainer.appendChild(this.editorContainer);
        this.hitTestResult = hitTest;
        var activeSheet = this.workbook.getActiveSheet();
        this.sheet = activeSheet;
        this.row = hitTest.startRow;
        this.col = hitTest.startCol;
        var cellInfo = activeSheet.getCellInfo(hitTest.startRow, hitTest.startCol);
        this.cellData = activeSheet.getCellData(hitTest.startRow, hitTest.startCol);
        var _c = activeSheet.getCellDisplaySize((_a = hitTest.realRow) !== null && _a !== void 0 ? _a : hitTest.startRow, (_b = hitTest.realCol) !== null && _b !== void 0 ? _b : hitTest.startCol, hitTest.x, hitTest.y), x = _c.x, y = _c.y, width = _c.width, height = _c.height;
        var _d = activeSheet.getRowColSize(), rowHeaderWidth = _d.rowHeaderWidth, colHeaderHeight = _d.colHeaderHeight;
        var padding = 1;
        x = x - rowHeaderWidth + padding;
        y = y - colHeaderHeight + padding;
        width = width - padding * 2;
        height = height - padding * 2;
        this.initValue = cellInfo.value;
        this.value = cellInfo.value;
        var input = new Input({
            container: this.editorContainer,
            value: cellInfo.value,
            onChange: function (value) {
                _this.handleInput(value);
            },
            onEnter: function (value) {
                _this.close();
            },
            style: 'borderLess'
        });
        input.force();
        this.editorContainer.style.left = "".concat(x, "px");
        this.editorContainer.style.top = "".concat(y, "px");
        this.editorContainer.style.width = "".concat(width, "px");
        this.editorContainer.style.height = "".concat(height, "px");
        onClickOutsideOnce(this.editorContainer, function () {
            _this.close();
        });
        lastCellEditor = this;
    }
    CellEditor.prototype.handleInput = function (value) {
        this.value = value;
    };
    /**
     * 关闭编辑器
     */
    CellEditor.prototype.close = function () {
        this.editorContainer.remove();
        if (this.value !== undefined && this.value !== this.initValue) {
            this.sheet.updateCellValue(this.row, this.col, updateValue(this.value, this.cellData));
            this.workbook.uiEvent.emit('UPDATE_RANGE', this.sheet.getIndex(), {
                startRow: this.row,
                startCol: this.col,
                endRow: this.row,
                endCol: this.col
            });
        }
    };
    return CellEditor;
}());

export { CellEditor };
