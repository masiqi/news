export declare const jStat: {
    beta: {
        pdf: (x: number, alpha: number, beta: number) => number;
        cdf: (x: number, alpha: number, beta: number) => number;
        inv: (x: number, alpha: number, beta: number) => number;
    };
    binomial: {
        pdf: (k: number, n: number, p: number) => number;
        cdf: (x: number, n: number, p: number) => number;
    };
    chisquare: {
        pdf: (x: number, dof: number) => number;
        cdf: (x: number, dof: number) => number;
        inv: (p: number, dof: number) => number;
    };
    normal: {
        pdf: (x: number, mean: number, std: number) => number;
        cdf: (x: number, mean: number, std: number) => number;
        inv: (p: number, mean: number, std: number) => number;
    };
    centralF: {
        pdf: (x: number, df1: number, df2: number) => number;
        cdf: (x: number, df1: number, df2: number) => number;
        inv: (x: number, df1: number, df2: number) => number;
    };
    studentt: {
        pdf: (x: number, dof: number) => number;
        cdf: (x: number, dof: number) => number;
        inv: (p: number, dof: number) => number;
    };
    exponential: {
        pdf: (x: number, rate: number) => number;
        cdf: (x: number, rate: number) => number;
        inv: (p: number, rate: number) => number;
    };
    gamma: {
        pdf: (x: number, shape: number, scale: number) => number;
        cdf: (x: number, shape: number, scale: number) => number;
        inv: (p: number, shape: number, scale: number) => number;
    };
    lognormal: {
        pdf: (x: number, mu: number, sigma: number) => number;
        cdf: (x: number, mu: number, sigma: number) => number;
        inv: (p: number, mu: number, sigma: number) => number;
    };
    negbin: {
        pdf: (k: number, r: number, p: number) => number;
        cdf: (x: number, r: number, p: number) => number;
    };
    poisson: {
        pdf: (k: number, l: number) => number;
        cdf: (x: number, l: number) => number;
    };
    erf: (x: number) => number;
    ibetainv: (p: number, a: number, b: number) => number;
    combination: (n: number, m: number) => number;
    combinationln: (n: number, m: number) => number;
    factorialln: (n: number) => number;
    factorial: (n: number) => number;
    betafn: (x: number, y: number) => number;
    betaln: (x: number, y: number) => number;
    ibeta: (x: number, a: number, b: number) => number;
    betacf: (x: number, a: number, b: number) => number;
    gammaln: (x: number) => number;
    gammafn: (x: number) => number;
    lowRegGamma: (a: number, x: number) => number;
    gammapinv: (p: number, a: number) => number;
    normalci: (...arg: number[]) => any[];
    erfcinv: (p: number) => number;
    erfc: (x: number) => number;
    stdev: (arr: number[], flag?: boolean) => number;
    variance: (arr: number[], flag?: boolean) => number;
    mean: (arr: number[]) => number;
    sum: (arr: number[]) => number;
    sumsqerr: (arr: number[]) => number;
    tci: (...arg: number[]) => any[];
    covariance: (arr1: number[], arr2: number[]) => number;
    corrcoeff: (arr1: number[], arr2: number[]) => number;
};
