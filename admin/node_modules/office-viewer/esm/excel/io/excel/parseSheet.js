import { __awaiter, __generator, __values } from 'tslib';
import { ISheet_Attributes } from '../../types/ISheet.js';
import { parseWorksheet } from './parseWorksheet.js';
import { parseRelationship } from '../../../common/parseRelationship.js';
import { autoParse } from '../../../common/autoParse.js';
import { getRelPath } from './getRelPath.js';

/**
 * 解析 sheet，并集成 sheet 里的数据
 */
function parseSheets(node, parser, workbook, sharedStrings) {
    var _a;
    return __awaiter(this, void 0, void 0, function () {
        var sheets, _loop_1, _b, _c, sheetNode, e_1_1;
        var e_1, _d;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    sheets = [];
                    _loop_1 = function (sheetNode) {
                        var sheet, rId, relationship, target, worksheetPath, sheetXML, worksheetRelationPath, worksheetRelationships, _f;
                        return __generator(this, function (_g) {
                            switch (_g.label) {
                                case 0:
                                    sheet = autoParse(sheetNode, ISheet_Attributes);
                                    sheets.push(sheet);
                                    rId = sheet['r:id'];
                                    sheet.state;
                                    relationship = (_a = workbook.workbookRelationships) === null || _a === void 0 ? void 0 : _a.find(function (relationship) { return relationship.id === rId; });
                                    target = relationship === null || relationship === void 0 ? void 0 : relationship.target;
                                    if (!target) return [3 /*break*/, 4];
                                    worksheetPath = target.startsWith('/') ? target : "xl/".concat(target);
                                    sheetXML = parser.getString(worksheetPath);
                                    if (!sheetXML) return [3 /*break*/, 4];
                                    worksheetRelationPath = getRelPath(worksheetPath);
                                    worksheetRelationships = [];
                                    if (!parser.fileExists(worksheetRelationPath)) return [3 /*break*/, 2];
                                    return [4 /*yield*/, parseRelationship(parser.getString(worksheetRelationPath))];
                                case 1:
                                    worksheetRelationships = _g.sent();
                                    _g.label = 2;
                                case 2:
                                    _f = sheet;
                                    return [4 /*yield*/, parseWorksheet(workbook, parser, worksheetPath, sheetXML, worksheetRelationships, sharedStrings)];
                                case 3:
                                    _f.worksheet = (_g.sent());
                                    _g.label = 4;
                                case 4: return [2 /*return*/];
                            }
                        });
                    };
                    _e.label = 1;
                case 1:
                    _e.trys.push([1, 6, 7, 8]);
                    _b = __values(node.children || []), _c = _b.next();
                    _e.label = 2;
                case 2:
                    if (!!_c.done) return [3 /*break*/, 5];
                    sheetNode = _c.value;
                    return [5 /*yield**/, _loop_1(sheetNode)];
                case 3:
                    _e.sent();
                    _e.label = 4;
                case 4:
                    _c = _b.next();
                    return [3 /*break*/, 2];
                case 5: return [3 /*break*/, 8];
                case 6:
                    e_1_1 = _e.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 8];
                case 7:
                    try {
                        if (_c && !_c.done && (_d = _b.return)) _d.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 8: return [2 /*return*/, sheets];
            }
        });
    });
}

export { parseSheets };
