import { __awaiter, __generator, __values } from 'tslib';
import { xml2json } from '../../../util/xml.js';
import { parseDefinedNames } from './parseDefinedNames.js';
import { parseSheets } from './parseSheet.js';
import { parseWorkbookPr } from './parseWorkbookPr.js';
import { parseWorkbookView } from './parseWorkbookView.js';
import { parseRelationship } from '../../../common/parseRelationship.js';
import { parseSharedStrings } from './parseSharedStrings.js';
import { CT_CalcPr_Attributes } from '../../../openxml/ExcelTypes.js';
import { parseTheme } from './parseTheme.js';
import { autoParse } from '../../../common/autoParse.js';
import { defaultThemeString } from './preset/defaultTheme.js';

/**
 * 解析 WorkBook
 * @param xml workbook.xml 文件内容
 */
function parseWorkbook(parser, styleSheet) {
    return __awaiter(this, void 0, void 0, function () {
        var workbookXML, workbookRelationships, node, workbookPr, workbookView, theme, workbook, sharedStrings, _a, _b, child, tag, _c, _d, e_1_1;
        var e_1, _e;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    workbookXML = parser.getString('xl/workbook.xml');
                    return [4 /*yield*/, parseRelationship(parser.getString('xl/_rels/workbook.xml.rels'))];
                case 1:
                    workbookRelationships = _f.sent();
                    return [4 /*yield*/, xml2json(workbookXML)];
                case 2:
                    node = _f.sent();
                    workbookPr = parseWorkbookPr(node);
                    workbookView = parseWorkbookView(node);
                    if (!parser.fileExists('xl/theme/theme1.xml')) return [3 /*break*/, 4];
                    return [4 /*yield*/, parseTheme(parser.getString('xl/theme/theme1.xml'))];
                case 3:
                    theme = _f.sent();
                    return [3 /*break*/, 6];
                case 4: return [4 /*yield*/, parseTheme(defaultThemeString)];
                case 5:
                    theme = _f.sent();
                    _f.label = 6;
                case 6:
                    workbook = {
                        sheets: [],
                        workbookPr: workbookPr,
                        workbookView: workbookView,
                        workbookRelationships: workbookRelationships,
                        styleSheet: styleSheet,
                        theme: theme
                    };
                    sharedStrings = [];
                    if (!parser.fileExists('xl/sharedStrings.xml.json')) return [3 /*break*/, 7];
                    sharedStrings = JSON.parse(parser.getString('xl/sharedStrings.xml.json'));
                    return [3 /*break*/, 9];
                case 7:
                    if (!parser.fileExists('xl/sharedStrings.xml')) return [3 /*break*/, 9];
                    return [4 /*yield*/, parseSharedStrings(parser.getString('xl/sharedStrings.xml'))];
                case 8:
                    sharedStrings = _f.sent();
                    _f.label = 9;
                case 9:
                    _f.trys.push([9, 17, 18, 19]);
                    _a = __values(node.children || []), _b = _a.next();
                    _f.label = 10;
                case 10:
                    if (!!_b.done) return [3 /*break*/, 16];
                    child = _b.value;
                    tag = child.tag;
                    _c = tag;
                    switch (_c) {
                        case 'sheets': return [3 /*break*/, 11];
                        case 'calcPr': return [3 /*break*/, 13];
                        case 'definedNames': return [3 /*break*/, 14];
                    }
                    return [3 /*break*/, 15];
                case 11:
                    _d = workbook;
                    return [4 /*yield*/, parseSheets(child, parser, workbook, sharedStrings)];
                case 12:
                    _d.sheets = _f.sent();
                    return [3 /*break*/, 15];
                case 13:
                    workbook.calcPr = autoParse(child, CT_CalcPr_Attributes);
                    return [3 /*break*/, 15];
                case 14:
                    workbook.definedNames = parseDefinedNames(child);
                    return [3 /*break*/, 15];
                case 15:
                    _b = _a.next();
                    return [3 /*break*/, 10];
                case 16: return [3 /*break*/, 19];
                case 17:
                    e_1_1 = _f.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 19];
                case 18:
                    try {
                        if (_b && !_b.done && (_e = _a.return)) _e.call(_a);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 19: return [2 /*return*/, workbook];
            }
        });
    });
}

export { parseWorkbook };
