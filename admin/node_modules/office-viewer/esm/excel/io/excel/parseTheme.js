import { __awaiter, __generator } from 'tslib';
import { autoParse } from '../../../common/autoParse.js';
import { CT_OfficeStyleSheet_Attributes } from '../../../openxml/DMLTypes.js';
import { xml2json } from '../../../util/xml.js';

/**
 * 解析主题，由于类型冲突，这里是用 DMLTypes
 * @param xml
 */
function parseTheme(xml) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function () {
        var node, theme, colorList, key, color;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    if (!xml) {
                        throw new Error('xml is empty');
                    }
                    return [4 /*yield*/, xml2json(xml)];
                case 1:
                    node = _c.sent();
                    theme = autoParse(node, CT_OfficeStyleSheet_Attributes, true);
                    colorList = [];
                    for (key in ((_a = theme === null || theme === void 0 ? void 0 : theme.themeElements) === null || _a === void 0 ? void 0 : _a.clrScheme) || {}) {
                        // 解析后包含了 name 属性，这里要过滤掉
                        if (key === 'name') {
                            continue;
                        }
                        color = (_b = theme === null || theme === void 0 ? void 0 : theme.themeElements) === null || _b === void 0 ? void 0 : _b.clrScheme[key];
                        colorList.push(color);
                    }
                    if (theme.themeElements) {
                        theme.themeElements.clrSchemes = colorList;
                    }
                    return [2 /*return*/, theme];
            }
        });
    });
}

export { parseTheme };
