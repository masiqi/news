import { __read } from 'tslib';
import { MAX_ROW } from '../../../render/Consts.js';
import { columnNameToNumber, decodeAddress } from './decodeAddress.js';
import { numberToLetters } from './numberToLetters.js';

/**
 * 处理选区相关的工具函数
 */
/**
 * 解析选区字符串，比如 A1:B2
 * 还支持 A 或者 A:B 这种整列选择
 */
function parseRange(range) {
    if (range.indexOf(':') !== -1) {
        var parts = range.split(':');
        if (parts.length !== 2) {
            throw new Error('range 格式错误');
        }
        var _a = __read(parts, 2), start = _a[0], end = _a[1];
        if (start.match(/^[A-Z]{1,3}$/) && end.match(/^[A-Z]{1,3}$/)) {
            var startCol = columnNameToNumber(start);
            var endCol = columnNameToNumber(end);
            return {
                startRow: 0,
                startCol: startCol,
                endRow: MAX_ROW,
                endCol: endCol
            };
        }
        var startRange = decodeAddress(start);
        var endRange = decodeAddress(end);
        return {
            startRow: startRange.row,
            startCol: startRange.col,
            endRow: endRange.row,
            endCol: endRange.col
        };
    }
    else {
        if (range.match(/^[A-Z]{1,3}$/)) {
            var col = columnNameToNumber(range);
            return {
                startRow: 0,
                startCol: col,
                endRow: MAX_ROW,
                endCol: col
            };
        }
        var startRange = decodeAddress(range);
        return {
            startRow: startRange.row,
            startCol: startRange.col,
            endRow: startRange.row,
            endCol: startRange.col
        };
    }
}
/**
 * 将 RangeRef 转换为字符串
 */
function rangeRefToString(rangeRef) {
    return (numberToLetters(rangeRef.startCol) +
        (rangeRef.startRow + 1) +
        ':' +
        numberToLetters(rangeRef.endCol) +
        (rangeRef.endRow + 1));
}
/**
 * 扩展选区，取这两个选区合并后最大值
 * @param range1
 * @param range2
 * @returns
 */
function mergeRange(range1, range2) {
    return {
        startRow: Math.min(range1.startRow, range2.startRow),
        startCol: Math.min(range1.startCol, range2.startCol),
        endRow: Math.max(range1.endRow, range2.endRow),
        endCol: Math.max(range1.endCol, range2.endCol)
    };
}
/**
 * 判断两个选区是否相等
 * @param range1
 * @param range2
 */
function rangeEqual(range1, range2) {
    return (range1.startRow === range2.startRow &&
        range1.startCol === range2.startCol &&
        range1.endRow === range2.endRow &&
        range1.endCol === range2.endCol);
}
/**
 * 判断两个选区是否相交
 */
function rangeIntersect(range1, range2) {
    return (range1.startRow <= range2.endRow &&
        range1.endRow >= range2.startRow &&
        range1.startCol <= range2.endCol &&
        range1.endCol >= range2.startCol);
}
/**
 * 这个单元格是否是个合并单元格
 * @param range
 * @param mergeCells
 * @returns
 */
function isMergeCell(range, mergeCells) {
    return mergeCells.some(function (mergeCell) { return rangeEqual(mergeCell, range); });
}
/**
 * 是否是单个单元格
 * @param range
 */
function isSingleCell(range) {
    return range.startRow === range.endRow && range.startCol === range.endCol;
}
/**
 * 判断单元格是否在选区内
 */
function isCellInRange(range, row, col) {
    return (range.startRow <= row &&
        range.startCol <= col &&
        range.endRow >= row &&
        range.endCol >= col);
}
/**
 * 基于 viewRange 构建出 RangeRef
 */
function viewRangeToRangeRef(viewRange) {
    var rows = viewRange.rows;
    var cols = viewRange.cols;
    return {
        startRow: rows[0],
        startCol: cols[0],
        endRow: rows[rows.length - 1],
        endCol: cols[cols.length - 1]
    };
}
/**
 * 获取量选区
 */

export { isCellInRange, isMergeCell, isSingleCell, mergeRange, parseRange, rangeEqual, rangeIntersect, rangeRefToString, viewRangeToRangeRef };
