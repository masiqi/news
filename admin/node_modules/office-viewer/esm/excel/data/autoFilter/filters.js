import { __values } from 'tslib';
import { fromExcelDate } from '../../io/excel/util/fromExcelDate.js';
import { inDateGroupItems } from './inDateGroupItems.js';

function filters(values, filters, is1904) {
    var e_1, _a;
    if (is1904 === void 0) { is1904 = false; }
    var hiddenRows = new Set();
    if (!filters) {
        return hiddenRows;
    }
    var filter = filters.filter || [];
    var filterValues = new Set(filter.map(function (f) { return f.val; }));
    var dateGroupItem = filters.dateGroupItem || [];
    var dateGroupItemDates = dateGroupItem
        .map(function (item) {
        var dateTimeGrouping = item.dateTimeGrouping;
        var year = item.year || 2024;
        var month = item.month || 1;
        var day = item.day || 1;
        var hour = item.hour || 0;
        var minute = item.minute || 0;
        var second = item.second || 0;
        var date = new Date(Date.UTC(year, month - 1, day, hour, minute, second));
        return {
            date: date,
            dateTimeGrouping: dateTimeGrouping
        };
    })
        .filter(Boolean);
    try {
        for (var values_1 = __values(values), values_1_1 = values_1.next(); !values_1_1.done; values_1_1 = values_1.next()) {
            var cellValue = values_1_1.value;
            // 不在筛选范围内就隐藏
            if (filterValues.size > 0 && !filterValues.has(cellValue.value)) {
                hiddenRows.add(cellValue.row);
            }
            if (dateGroupItemDates.length > 0) {
                if (!inDateGroupItems(dateGroupItemDates, fromExcelDate(cellValue.value, is1904))) {
                    hiddenRows.add(cellValue.row);
                }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (values_1_1 && !values_1_1.done && (_a = values_1.return)) _a.call(values_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return hiddenRows;
}

export { filters };
