/**
 * 比较两个单元格的值，目前还有很多类型没有处理，比如富文本
 * @returns 如果 a > b 返回 1，如果 a < b 返回 -1，如果 a === b 返回 0
 */
function compareCellData(a, b) {
    if (a === b) {
        return 0;
    }
    if (typeof a === 'string' && typeof b === 'string') {
        return a.localeCompare(b, undefined, { numeric: true, sensitivity: 'base' });
    }
    if (a === undefined) {
        return 1;
    }
    if (b === undefined) {
        return -1;
    }
    if (typeof a === 'object' &&
        'value' in a &&
        typeof b === 'object' &&
        'value' in b) {
        var aValue = a.value;
        var bValue = b.value;
        return aValue.localeCompare(bValue, undefined, {
            numeric: true,
            sensitivity: 'base'
        });
    }
    return 0;
}
function sortByRange(cellData, range, sortOrder) {
    var rows = cellData.slice(range.startRow, range.endRow + 1);
    rows.sort(function (a, b) {
        var aVal = a[range.startCol];
        var bVal = b[range.startCol];
        var compareResult = compareCellData(aVal, bVal);
        if (sortOrder === 'asc') {
            return compareResult;
        }
        else {
            return -compareResult;
        }
    });
    // 似乎不需要
    for (var i = 0; i < rows.length; i++) {
        cellData[i + range.startRow] = rows[i];
    }
}

export { compareCellData, sortByRange };
