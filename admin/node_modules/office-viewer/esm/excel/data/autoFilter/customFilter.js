import { __values } from 'tslib';
import { evalCustomFilter } from './evalCustomFilter.js';

/**
 * 自定义筛选
 */
function customFilter(values, customFilters) {
    var e_1, _a, e_2, _b, e_3, _c;
    if (!customFilters) {
        return new Set();
    }
    var hiddenRows = new Set();
    var showRows = new Set();
    var and = customFilters.and;
    var filters = customFilters.customFilter || [];
    try {
        for (var values_1 = __values(values), values_1_1 = values_1.next(); !values_1_1.done; values_1_1 = values_1.next()) {
            var cellValue = values_1_1.value;
            try {
                for (var filters_1 = (e_2 = void 0, __values(filters)), filters_1_1 = filters_1.next(); !filters_1_1.done; filters_1_1 = filters_1.next()) {
                    var filter = filters_1_1.value;
                    var operator = filter.operator;
                    var val = filter.val;
                    if (val === undefined) {
                        continue;
                    }
                    var evalResult = evalCustomFilter(operator, val, cellValue);
                    // 在并的场景下，只要有个条件不匹配就隐藏
                    if (and) {
                        if (!evalResult) {
                            hiddenRows.add(cellValue.row);
                            break;
                        }
                    }
                    else {
                        // 在或的场景下，只要有个条件匹配就显示
                        hiddenRows.add(cellValue.row);
                        if (evalResult) {
                            showRows.add(cellValue.row);
                        }
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (filters_1_1 && !filters_1_1.done && (_b = filters_1.return)) _b.call(filters_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (values_1_1 && !values_1_1.done && (_a = values_1.return)) _a.call(values_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    if (!and) {
        try {
            for (var showRows_1 = __values(showRows), showRows_1_1 = showRows_1.next(); !showRows_1_1.done; showRows_1_1 = showRows_1.next()) {
                var row = showRows_1_1.value;
                hiddenRows.delete(row);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (showRows_1_1 && !showRows_1_1.done && (_c = showRows_1.return)) _c.call(showRows_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
    }
    return hiddenRows;
}

export { customFilter };
