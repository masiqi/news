import { __values, __spreadArray, __read } from 'tslib';
import { parseRange } from '../io/excel/util/Range.js';
import { customFilter } from './autoFilter/customFilter.js';
import { filters } from './autoFilter/filters.js';
import { applySortState } from './autoFilter/applySortState.js';
import { toNumber } from './toNumber.js';

/**
 * 应用 autoFilter，将相关行隐藏
 *
 * @headerRowCount 表头行数，需要忽略这些行
 */
function applyAutoFilter(sheetIndex, workbook, sheet, dataProvider, autoFilter, headerRowCount) {
    var e_1, _a, e_2, _b;
    var _c, _d, _e;
    if (headerRowCount === void 0) { headerRowCount = 1; }
    var ref = autoFilter.ref;
    if (!ref) {
        console.warn('缺少 ref 字段', autoFilter);
        return;
    }
    var rangeRef = parseRange(ref);
    rangeRef.startRow += headerRowCount;
    // 排序需要先应用
    applySortState(sheetIndex, dataProvider, autoFilter, headerRowCount);
    // 首先将行的隐藏状态重置
    for (var r = rangeRef.startRow; r <= rangeRef.endRow; r++) {
        if ((_c = sheet.worksheet) === null || _c === void 0 ? void 0 : _c.rows[r]) {
            sheet.worksheet.rows[r].hidden = false;
        }
    }
    var is1904 = (_e = (_d = workbook.workbookPr) === null || _d === void 0 ? void 0 : _d.date1904) !== null && _e !== void 0 ? _e : false;
    var hiddenRows = new Set();
    try {
        for (var _f = __values(autoFilter.filterColumn || []), _g = _f.next(); !_g.done; _g = _f.next()) {
            var filterColumn = _g.value;
            var colId = filterColumn.colId || 0;
            var cellValues = dataProvider.getCellValueByRange(sheetIndex, {
                startRow: rangeRef.startRow,
                startCol: rangeRef.startCol + colId,
                endRow: rangeRef.endRow,
                endCol: rangeRef.startCol + colId
            }, true);
            var cellValuesBigNumber = cellValues.map(function (cellValue) {
                var num;
                try {
                    num = toNumber(cellValue.value);
                }
                catch (e) {
                    console.error('toNumber error', cellValue.value);
                    num = 0;
                }
                return { row: cellValue.row, num: num, value: cellValue.value + '' };
            });
            var customFiltersHiddenRows = customFilter(cellValuesBigNumber, filterColumn.customFilters);
            hiddenRows = new Set(__spreadArray(__spreadArray([], __read(hiddenRows), false), __read(customFiltersHiddenRows), false));
            var filtersHiddenRows = filters(cellValuesBigNumber, filterColumn.filters, is1904);
            hiddenRows = new Set(__spreadArray(__spreadArray([], __read(hiddenRows), false), __read(filtersHiddenRows), false));
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_g && !_g.done && (_a = _f.return)) _a.call(_f);
        }
        finally { if (e_1) throw e_1.error; }
    }
    try {
        for (var hiddenRows_1 = __values(hiddenRows), hiddenRows_1_1 = hiddenRows_1.next(); !hiddenRows_1_1.done; hiddenRows_1_1 = hiddenRows_1.next()) {
            var row = hiddenRows_1_1.value;
            if (!sheet.worksheet.rows[row]) {
                sheet.worksheet.rows[row] = {
                    hidden: true
                };
            }
            else {
                sheet.worksheet.rows[row].hidden = true;
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (hiddenRows_1_1 && !hiddenRows_1_1.done && (_b = hiddenRows_1.return)) _b.call(hiddenRows_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
}

export { applyAutoFilter };
