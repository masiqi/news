import { unzipSync, strFromU8, strToU8, zipSync } from '../util/fflate.js';

/**
 * zip 文件解析
 */
var ZipPackageParser = /** @class */ (function () {
    function ZipPackageParser() {
    }
    /**
     * 加载 zip 文件
     */
    ZipPackageParser.prototype.load = function (docxFile) {
        // 避免重复解析
        if (!this.zip) {
            this.zip = unzipSync(new Uint8Array(docxFile));
        }
    };
    /**
     * 读取 xml 文件，转成 json 对象
     * @param filePath 文件路径
     * @returns 转成 json 的结果
     */
    ZipPackageParser.prototype.getXML = function (filePath) {
        var fileContent = this.getFileByType(filePath, 'string');
        var doc = new DOMParser().parseFromString(fileContent, 'application/xml');
        var errorNode = doc.getElementsByTagName('parsererror').item(0);
        if (errorNode) {
            throw new Error(errorNode.textContent || "can't parse xml");
        }
        else {
            return doc;
        }
    };
    /**
     * 根据类型读取文件
     */
    ZipPackageParser.prototype.getFileByType = function (filePath, type) {
        if (type === void 0) { type = 'string'; }
        filePath = filePath.startsWith('/') ? filePath.slice(1) : filePath;
        var file = this.zip[filePath];
        if (!file) {
            // 使用大小写不敏感的方式查找
            for (var key in this.zip) {
                if (key.toLowerCase() === filePath.toLowerCase()) {
                    file = this.zip[key];
                    break;
                }
            }
        }
        if (file) {
            if (type === 'string') {
                return strFromU8(file);
            }
            else if (type === 'blob') {
                return new Blob([file]);
            }
            else if (type === 'uint8array') {
                return file;
            }
        }
        console.warn('getFileByType', filePath, 'not found');
        return null;
    };
    /**
     * 读取文本内容
     */
    ZipPackageParser.prototype.getString = function (filePath) {
        return this.getFileByType(filePath, 'string');
    };
    /**
     * xml 下没这功能
     */
    ZipPackageParser.prototype.saveFile = function (filePath, content) {
        if (typeof content === 'string') {
            content = strToU8(content);
        }
        this.zip[filePath] = content;
    };
    /**
     * 判断文件是否存在
     */
    ZipPackageParser.prototype.fileExists = function (filePath) {
        filePath = filePath.startsWith('/') ? filePath.slice(1) : filePath;
        if (filePath in this.zip) {
            return true;
        }
        // 支持大小写不敏感
        for (var key in this.zip) {
            if (key.toLowerCase() === filePath.toLowerCase()) {
                return true;
            }
        }
        return false;
    };
    /**
     * 生成新的 zip 文件
     */
    ZipPackageParser.prototype.generateZipBlob = function (docContent) {
        if (docContent) {
            // 其实最好是生成个新的，后续再优化
            this.zip['word/document.xml'] = strToU8(docContent);
        }
        return new Blob([zipSync(this.zip)]);
    };
    ZipPackageParser.prototype.generateZip = function () {
        return zipSync(this.zip);
    };
    ZipPackageParser.prototype.getZip = function () {
        return this.zip;
    };
    return ZipPackageParser;
}());

export { ZipPackageParser as default };
