import { __awaiter, __generator, __values } from 'tslib';
import Excel from './Excel.js';
import UnSupport from './UnSupport.js';
import Word from './Word.js';
import { parseContentType } from './openxml/ContentType.js';
import ZipPackageParser from './package/ZipPackageParser.js';
import { fileTypeFromArrayBuffer } from './util/fileType.js';

/**
 * 统一对外接口，自动识别文件类型后渲染
 */
/**
 * 创建 OfficeViewer 实例的工厂函数，会自动识别文件类型
 * @param docFile 文件内容，可以是 ArrayBuffer 或者 url 地址
 * @param renderOptions 渲染配置项，根据不同的文件类型，配置项不同
 * @param parser 文件解析器，支持 zip 和 xml 两种，也可以扩展
 * @returns OfficeViewer 实例
 */
function createOfficeViewer(docFile, renderOptions, fileName, parser) {
    if (parser === void 0) { parser = new ZipPackageParser(); }
    return __awaiter(this, void 0, void 0, function () {
        var fileExt, excel, fileType, isWord, isExcel, contentTypes, _a, _b, item, excel;
        var e_1, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    if (!fileName) return [3 /*break*/, 2];
                    fileExt = fileName.split('.').pop();
                    if (!(fileExt === 'csv' || fileExt === 'tsv')) return [3 /*break*/, 2];
                    excel = new Excel(docFile, fileName, renderOptions, parser);
                    return [4 /*yield*/, excel.loadCSV(fileExt)];
                case 1:
                    _d.sent();
                    return [2 /*return*/, excel];
                case 2:
                    fileType = fileTypeFromArrayBuffer(docFile);
                    if (fileType === null || (fileType.ext !== 'zip' && fileType.ext !== 'xml')) {
                        if ((fileType === null || fileType === void 0 ? void 0 : fileType.ext) === 'cfb') {
                            return [2 /*return*/, new UnSupport('不支持加密文件')];
                        }
                        return [2 /*return*/, new UnSupport('不支持的文件类型: ' + (fileType === null || fileType === void 0 ? void 0 : fileType.ext))];
                    }
                    try {
                        parser.load(docFile);
                    }
                    catch (error) {
                        return [2 /*return*/, new UnSupport('文件解析失败')];
                    }
                    isWord = false;
                    isExcel = false;
                    // 有些程序生成的文件没有这个，兼容一下
                    if (parser.fileExists('[Content_Types].xml')) {
                        contentTypes = parseContentType(parser.getXML('[Content_Types].xml'));
                        try {
                            for (_a = __values(contentTypes.overrides), _b = _a.next(); !_b.done; _b = _a.next()) {
                                item = _b.value;
                                if (item.contentType.indexOf('wordprocessingml') != -1) {
                                    isWord = true;
                                    break;
                                }
                                else if (item.contentType.indexOf('spreadsheetml') !== -1) {
                                    isExcel = true;
                                    break;
                                }
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                    }
                    else {
                        if (fileName === null || fileName === void 0 ? void 0 : fileName.endsWith('.xlsx')) {
                            isExcel = true;
                        }
                        else if (fileName === null || fileName === void 0 ? void 0 : fileName.endsWith('.docx')) {
                            isWord = true;
                        }
                    }
                    // 目前只有支持 xml 格式
                    if ((fileType === null || fileType === void 0 ? void 0 : fileType.ext) === 'xml') {
                        isWord = true;
                    }
                    if (isWord) {
                        return [2 /*return*/, new Word(docFile, renderOptions, parser)];
                    }
                    else if (isExcel) {
                        excel = new Excel(docFile, fileName, renderOptions, parser);
                        return [2 /*return*/, excel];
                    }
                    else {
                        throw new Error('not support file type');
                    }
            }
        });
    });
}

export { createOfficeViewer };
