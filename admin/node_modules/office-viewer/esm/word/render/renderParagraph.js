import { __values } from 'tslib';
import { createElement, appendChild } from '../../util/dom.js';
import { Run } from '../../openxml/word/Run.js';
import { BookmarkStart } from '../../openxml/word/Bookmark.js';
import { Hyperlink } from '../../openxml/word/Hyperlink.js';
import renderRun from './renderRun.js';
import { renderHyperLink } from './renderHyperLink.js';
import { renderBookmarkStart } from './renderBookmark.js';
import { renderNumbering } from './renderNumbering.js';
import { setElementStyle } from './setElementStyle.js';
import { renderTab } from './renderTab.js';
import { OMath } from '../../openxml/math/OMath.js';
import { renderOMath } from './renderMath.js';

/**
 * 渲染段落
 * @param renderEmptySpace 如果是 true 的话，当内容为空时会自动加上 &nbsp;
 */
function renderParagraph(word, paragraph, renderEmptySpace, inHeader) {
    var e_1, _a;
    if (renderEmptySpace === void 0) { renderEmptySpace = true; }
    if (inHeader === void 0) { inHeader = false; }
    word.currentParagraph = paragraph;
    var p = createElement('p');
    word.addClass(p, 'p');
    var properties = paragraph.properties;
    setElementStyle(word, p, properties);
    // 默认情况下 drawing 是相对段落的
    p.style.position = 'relative';
    // 渲染列表前缀
    if (properties.numPr) {
        appendChild(p, renderNumbering(p, word, properties.numPr));
    }
    var inFldChar = false;
    if (properties.tabs && properties.tabs.length) {
        // 目前只支持渲染第一个，因为第二个位置取决于前面内容位置，挺麻烦
        // 虽然目前这个实现很 hack，但可以支持常见情况
        appendChild(p, renderTab(word, properties.tabs[0], true));
        // 同时删掉第一个 run 中的 tab
        // let done = false;
        // for (const child of paragraph.children) {
        //   if (done) {
        //     break;
        //   }
        //   if (child instanceof Run) {
        //     for (const runChild of child.children) {
        //       if (runChild instanceof Tab) {
        //         child.children.splice(child.children.indexOf(runChild), 1);
        //         done = true;
        //         break;
        //       }
        //     }
        //   }
        // }
    }
    try {
        for (var _b = __values(paragraph.children), _c = _b.next(); !_c.done; _c = _b.next()) {
            var child = _c.value;
            if (child instanceof Run) {
                if (child.fldChar === 'begin') {
                    inFldChar = true;
                }
                else if (child) {
                    inFldChar = false;
                }
                appendChild(p, renderRun(word, child, paragraph, inFldChar, inHeader));
            }
            else if (child instanceof BookmarkStart) {
                appendChild(p, renderBookmarkStart(word, child));
            }
            else if (child instanceof Hyperlink) {
                var hyperlink = renderHyperLink(word, child, paragraph);
                appendChild(p, hyperlink);
            }
            else if (child instanceof OMath) {
                appendChild(p, renderOMath(word, child));
            }
            else {
                console.warn('unknow pargraph type', child);
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    // 空行自动加个空格，不然会没高度
    if (p.innerHTML === '' && renderEmptySpace) {
        p.innerHTML = '&nbsp;';
    }
    return p;
}

export { renderParagraph as default };
