import { __values } from 'tslib';
import { Paragraph } from '../../openxml/word/Paragraph.js';
import { Table } from '../../openxml/word/Table.js';
import { createElement, appendChild } from '../../util/dom.js';
import renderParagraph from './renderParagraph.js';
import renderTable from './renderTable.js';

/**
 * 渲染 footnotes 和 endnotes，这个需要最后执行
 */
function renderNote(word, noteRoot, type, id, note) {
    var e_1, _a;
    var noteChild = note.children;
    var noteElement = createElement('div');
    var mark = createElement('a');
    var fName = type + '-' + id;
    mark.name = fName;
    mark.id = fName;
    noteRoot.appendChild(noteElement);
    try {
        for (var noteChild_1 = __values(noteChild), noteChild_1_1 = noteChild_1.next(); !noteChild_1_1.done; noteChild_1_1 = noteChild_1.next()) {
            var child = noteChild_1_1.value;
            if (child instanceof Paragraph) {
                var p = renderParagraph(word, child);
                appendChild(noteElement, p);
            }
            else if (child instanceof Table) {
                appendChild(noteElement, renderTable(word, child));
            }
            else {
                console.warn('unknown child', child);
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (noteChild_1_1 && !noteChild_1_1.done && (_a = noteChild_1.return)) _a.call(noteChild_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
}
/*
 * 过滤掉 0 和 -1 后是否还有其他的值，没有的话就不需要渲染
 */
function hasNote(notes) {
    if (!notes) {
        return false;
    }
    for (var id in notes) {
        if (id !== '0' && id !== '-1') {
            return true;
        }
    }
    return false;
}
function renderNotes(word) {
    var noteRoot = createElement('div');
    if (hasNote(word.footNotes)) {
        for (var fId in word.footNotes) {
            renderNote(word, noteRoot, 'footnote', fId, word.footNotes[fId]);
        }
    }
    if (hasNote(word.endNotes)) {
        for (var fId in word.endNotes || {}) {
            renderNote(word, noteRoot, 'endnote', fId, word.endNotes[fId]);
        }
    }
    if (noteRoot.children.length) {
        return noteRoot;
    }
    else {
        return null;
    }
}

export { renderNotes };
