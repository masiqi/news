import { __values, __spreadArray, __read } from 'tslib';
import { appendChild, removeChild } from '../../util/dom.js';
import { Paragraph } from '../../openxml/word/Paragraph.js';
import { Table } from '../../openxml/word/Table.js';
import renderParagraph from './renderParagraph.js';
import { renderSection } from './renderSection.js';
import renderTable from './renderTable.js';

/**
 * 渲染 body 节点
 */
/**
 * 判断是否需要创建一个新 section，包括强制分页和超出了 section 的高宽或宽度
 */
function createNewSection(word, sectionEnd, child) {
    // 支持插入分页符
    if (word.breakPage) {
        word.breakPage = false;
        return true;
    }
    var childBound = child.getBoundingClientRect();
    return (childBound.top + childBound.height > sectionEnd.bottom ||
        // 注意这里没有 + childBound.width，因为 width 一般都是 100% 导致容易超出
        childBound.left > sectionEnd.right);
}
/**
 * 添加到 section 里，如果超出了就创建一个新的 section
 */
function appendToSection(word, wDocument, renderOptions, bodyEl, sectionEl, sectionEnd, section, child) {
    // 如果是第一个节点，即便超长也得写入，不然就会出现一个空 section
    var isFirst = sectionEl.children.length === 0;
    // 首先尝试写入
    appendChild(sectionEl, child);
    // 如果超出了就新建一个 section
    if (!isFirst && createNewSection(word, sectionEnd, child)) {
        var newChild = child.cloneNode(true);
        removeChild(sectionEl, child);
        var newSectionEl = renderSection(word, wDocument, section, renderOptions);
        appendChild(bodyEl, newSectionEl);
        appendChild(newSectionEl, newChild);
        sectionEnd = getSectionEnd(section, newSectionEl);
        return { sectionEl: newSectionEl, sectionEnd: sectionEnd };
    }
    return { sectionEl: sectionEl, sectionEnd: sectionEnd };
}
/**
 * 获取 section 结束的位置，也就是最后能放下子元素的位置
 */
function getSectionEnd(section, sectionEl) {
    var sectionBound = sectionEl.getBoundingClientRect();
    var pageMargin = section.properties.pageMargin;
    var bottom = sectionBound.top + sectionBound.height;
    if (pageMargin === null || pageMargin === void 0 ? void 0 : pageMargin.bottom) {
        bottom = bottom - parseInt(pageMargin.bottom.replace('px', ''), 10);
    }
    var right = sectionBound.left + sectionBound.width;
    if (pageMargin === null || pageMargin === void 0 ? void 0 : pageMargin.right) {
        right = right - parseInt(pageMargin.right.replace('px', ''), 10);
    }
    return { bottom: bottom, right: right };
}
/**
 * 获取缩放比例
 */
function getTransform(rootWidth, section, renderOptions) {
    var props = section.properties;
    var pageSize = props.pageSize;
    if (renderOptions.zoomFitWidth && !renderOptions.ignoreWidth) {
        var pageWidth = pageSize === null || pageSize === void 0 ? void 0 : pageSize.width;
        if (rootWidth && pageWidth) {
            var pageWidthNum = parseInt(pageWidth.replace('px', ''), 10);
            if (props.pageMargin) {
                var pageMargin = props.pageMargin;
                pageWidthNum += pageMargin.left
                    ? parseInt(pageMargin.left.replace('px', ''), 10)
                    : 0;
                pageWidthNum += pageMargin.right
                    ? parseInt(pageMargin.right.replace('px', ''), 10)
                    : 0;
            }
            var zoomWidth = rootWidth / pageWidthNum;
            return zoomWidth;
        }
    }
    return 1;
}
/**
 * 分页渲染
 * @param isLastSection 是否是最后一节
 */
function renderSectionInPage(word, wDocument, bodyEl, renderOptions, sectionEl, section, isLastSection) {
    // 如果不 setTimeout 取到的位置信息不对
    setTimeout(function () {
        var e_1, _a;
        var sectionEnd = getSectionEnd(section, sectionEl);
        try {
            for (var _b = __values(section.children), _c = _b.next(); !_c.done; _c = _b.next()) {
                var child = _c.value;
                if (child instanceof Paragraph) {
                    var p = renderParagraph(word, child);
                    var appendResult = appendToSection(word, wDocument, renderOptions, bodyEl, sectionEl, sectionEnd, section, p);
                    sectionEl = appendResult.sectionEl;
                    sectionEnd = appendResult.sectionEnd;
                }
                else if (child instanceof Table) {
                    var table = renderTable(word, child);
                    var appendResult = appendToSection(word, wDocument, renderOptions, bodyEl, sectionEl, sectionEnd, section, table);
                    sectionEl = appendResult.sectionEl;
                    sectionEnd = appendResult.sectionEnd;
                }
                else {
                    console.warn('unknown child', child);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (isLastSection) {
            sectionEl.style.marginBottom = '0';
        }
    }, 0);
}
/**
 * 渲染文档主体
 */
function renderBody(root, word, bodyEl, wDocument, body, renderOptions) {
    var e_2, _a, e_3, _b;
    var page = renderOptions.page || false;
    var rootWidth = root.getBoundingClientRect().width -
        (renderOptions.pageWrapPadding || 0) * 2;
    var zooms = [];
    var index = 0;
    var sections = body.sections;
    var sectionLength = sections.length;
    // 用于最后一个 section 不加 margin-bottom
    var isLastSection = false;
    try {
        for (var sections_1 = __values(sections), sections_1_1 = sections_1.next(); !sections_1_1.done; sections_1_1 = sections_1.next()) {
            var section = sections_1_1.value;
            zooms.push(getTransform(rootWidth, section, renderOptions));
            word.currentSection = section;
            var sectionEl = renderSection(word, wDocument, section, renderOptions);
            appendChild(bodyEl, sectionEl);
            index = index + 1;
            if (index === sectionLength) {
                isLastSection = true;
            }
            if (page) {
                renderSectionInPage(word, wDocument, bodyEl, renderOptions, sectionEl, section, isLastSection);
            }
            else {
                try {
                    for (var _c = (e_3 = void 0, __values(section.children)), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var child = _d.value;
                        if (child instanceof Paragraph) {
                            var p = renderParagraph(word, child);
                            appendChild(sectionEl, p);
                        }
                        else if (child instanceof Table) {
                            var table = renderTable(word, child);
                            appendChild(sectionEl, table);
                        }
                        else {
                            console.warn('unknown child', child);
                        }
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (sections_1_1 && !sections_1_1.done && (_a = sections_1.return)) _a.call(sections_1);
        }
        finally { if (e_2) throw e_2.error; }
    }
    setTimeout(function () {
        if (renderOptions.zoom) {
            // 固定缩放
            bodyEl.style.transformOrigin = '0 0';
            bodyEl.style.transform = "scale(".concat(renderOptions.zoom, ")");
        }
        else if (renderOptions.page &&
            renderOptions.zoomFitWidth &&
            !renderOptions.ignoreWidth) {
            // 自适应宽度的缩放
            var minZoom = Math.min.apply(Math, __spreadArray([], __read(zooms), false));
            bodyEl.style.transformOrigin = '0 0';
            bodyEl.style.transform = "scale(".concat(minZoom, ")");
        }
    }, 0);
}

export { renderBody as default };
