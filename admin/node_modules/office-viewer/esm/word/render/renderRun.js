import { __values } from 'tslib';
import { renderBr } from './renderBr.js';
import { createElement, applyStyle, appendChild } from '../../util/dom.js';
import { Text } from '../../openxml/word/Run.js';
import { Break } from '../../openxml/word/Break.js';
import { Drawing } from '../../openxml/drawing/Drawing.js';
import { renderDrawing } from './renderDrawing.js';
import { setElementStyle } from './setElementStyle.js';
import { Tab } from '../../openxml/word/Tab.js';
import { renderTab } from './renderTab.js';
import { renderPict } from './renderPict.js';
import { Pict } from '../../openxml/word/Pict.js';
import { Ruby } from '../../openxml/word/Ruby.js';
import { renderRuby } from './renderRuby.js';
import { InstrText } from '../../openxml/word/InstrText.js';
import { renderInstrText } from './renderInstrText.js';
import { Sym } from '../../openxml/word/Sym.js';
import { renderSym } from './renderSym.js';
import { cjkspace } from '../../util/autoSpace.js';
import { renderSoftHyphen } from './renderSoftHyphen.js';
import { SoftHyphen } from '../../openxml/word/SoftHyphen.js';
import { NoBreakHyphen } from '../../openxml/word/NoBreakHyphen.js';
import { renderNoBreakHyphen } from './renderNoBreakHyphen.js';
import { Separator } from '../../openxml/word/Separator.js';
import { renderSeparator } from './renderSeparator.js';

/**
 * run 相关的 http://webapp.docx4java.org/OnlineDemo/ecma376/WordML/Run_1.html
 */
var VARIABLE_CLASS_NAME = 'variable';
/**
 * 对文本进行替换
 */
function renderText(span, word, text, paragraph) {
    var _a;
    // 简单过滤一下提升性能
    if (text.indexOf('{{') === -1) {
        var finalText = void 0;
        if ((_a = paragraph === null || paragraph === void 0 ? void 0 : paragraph.properties) === null || _a === void 0 ? void 0 : _a.autoSpace) {
            finalText = cjkspace(text.split(''));
        }
        else {
            finalText = text;
        }
        span.textContent = finalText;
    }
    else {
        span.dataset.originText = text;
        // 加个标识，后续可以通过它来查找哪些变量需要替换，这样就不用重新渲染整个文档了
        span.classList.add(VARIABLE_CLASS_NAME);
        span.textContent = word.replaceText(text);
    }
    // 大于两个空格才转成 nbsp
    var html = span.innerHTML.split('  ').join('&nbsp;&nbsp;');
    span.innerHTML = html;
}
/**
 * 更新文档里的所有变量
 */
function updateVariableText(word) {
    var spans = word.rootElement.querySelectorAll(".".concat(VARIABLE_CLASS_NAME));
    for (var i = 0; i < spans.length; i++) {
        var span = spans[i];
        var text = span.dataset.originText || '';
        span.textContent = word.replaceText(text);
    }
}
/**
 * 渲染 run 节点
 *
 * @param inFldChar 是否在 complex field 里，预留功能，目前还不支持
 */
function renderRun(word, run, paragraph, inFldChar, inHeader) {
    var e_1, _a;
    var _b, _c;
    var span = createElement('span');
    word.addClass(span, 'r');
    setElementStyle(word, span, run.properties);
    // run 不好通过 class 来设置 rStyle，所以单独支持一下
    if ((_b = run.properties) === null || _b === void 0 ? void 0 : _b.rStyle) {
        var style = word.getStyle(run.properties.rStyle);
        if ((_c = style === null || style === void 0 ? void 0 : style.rPr) === null || _c === void 0 ? void 0 : _c.cssStyle) {
            applyStyle(span, style.rPr.cssStyle);
        }
    }
    if (run.children.length === 1 && run.children[0] instanceof Text) {
        var text = run.children[0];
        renderText(span, word, text.text, paragraph);
    }
    else {
        try {
            for (var _d = __values(run.children), _e = _d.next(); !_e.done; _e = _d.next()) {
                var child = _e.value;
                if (child instanceof Text) {
                    var newSpan = createElement('span');
                    renderText(newSpan, word, child.text, paragraph);
                    appendChild(span, newSpan);
                }
                else if (child instanceof Break) {
                    var br = renderBr(word, child);
                    appendChild(span, br);
                }
                else if (child instanceof Drawing) {
                    appendChild(span, renderDrawing(word, child, inHeader));
                }
                else if (child instanceof Tab) {
                    appendChild(span, renderTab(word, child));
                }
                else if (child instanceof Pict) {
                    appendChild(span, renderPict(word, child));
                }
                else if (child instanceof Ruby) {
                    appendChild(span, renderRuby(word, child));
                }
                else if (child instanceof InstrText) {
                    appendChild(span, renderInstrText(word, child));
                }
                else if (child instanceof Sym) {
                    appendChild(span, renderSym(word, child));
                }
                else if (child instanceof SoftHyphen) {
                    appendChild(span, renderSoftHyphen());
                }
                else if (child instanceof NoBreakHyphen) {
                    appendChild(span, renderNoBreakHyphen());
                }
                else if (child instanceof Separator) {
                    appendChild(span, renderSeparator());
                }
                else {
                    console.warn('unknown child', child);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
            }
            finally { if (e_1) throw e_1.error; }
        }
    }
    return span;
}

export { renderRun as default, updateVariableText };
