import { __values } from 'tslib';
import { Table } from '../../openxml/word/Table.js';
import { parseTr } from './parseTr.js';
import { parseTablePr } from './parseTablePr.js';
import { parseSize } from './parseSize.js';
import { mergeSdt } from './mergeSdt.js';

function parseTblGrid(element) {
    var e_1, _a;
    var gridCol = [];
    var gridColElements = element.getElementsByTagName('w:gridCol');
    try {
        for (var gridColElements_1 = __values(gridColElements), gridColElements_1_1 = gridColElements_1.next(); !gridColElements_1_1.done; gridColElements_1_1 = gridColElements_1.next()) {
            var gridColElement = gridColElements_1_1.value;
            var w = parseSize(gridColElement, 'w:w');
            gridCol.push({ w: w });
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (gridColElements_1_1 && !gridColElements_1_1.done && (_a = gridColElements_1.return)) _a.call(gridColElements_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return gridCol;
}
function parseTable(word, element) {
    var e_2, _a;
    var table = new Table();
    // 用于计算列的跨行，这里记下前面的跨行情况
    var rowSpanMap = {};
    try {
        for (var _b = __values(mergeSdt(element)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var child = _c.value;
            var tagName = child.tagName;
            switch (tagName) {
                case 'w:tblPr':
                    table.properties = parseTablePr(word, child);
                    break;
                case 'w:tr':
                    table.trs.push(parseTr(word, child, rowSpanMap));
                    break;
                case 'w:tblGrid':
                    table.tblGrid = parseTblGrid(child);
                    break;
                default:
                    console.warn('Table.fromXML unknown tag', tagName, child);
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return table;
}

export { parseTable };
