import { __awaiter, __generator, __values } from 'tslib';
import { SaxesParser } from './saxes.js';

/**
 * 解析 xml
 */
function parseXML(content) {
    return new DOMParser().parseFromString(content, 'application/xml');
}
/**
 * 构建 xml 文本
 */
function buildXML(doc) {
    var serializer = new XMLSerializer();
    return serializer.serializeToString(doc);
}
/**
 * 将 xml 转换为 json 数据，主要用于 Word，不用 DOMParser 的好处是可以在浏览器和 node 环境下使用
 */
function xml2json(xml) {
    return __awaiter(this, void 0, void 0, function () {
        var parser, stack;
        return __generator(this, function (_a) {
            parser = new SaxesParser();
            stack = [];
            return [2 /*return*/, new Promise(function (resolve, reject) {
                    parser.on('error', function (e) {
                        console.error(e);
                    });
                    parser.on('text', function (t) {
                        var peak = stack[stack.length - 1];
                        if (peak) {
                            peak.text = t;
                        }
                    });
                    parser.on('opentag', function (node) {
                        stack.push({
                            tag: node.name,
                            attrs: node.attributes,
                            children: []
                        });
                    });
                    parser.on('closetag', function () {
                        if (stack.length > 1) {
                            var currentNode = stack[stack.length - 1];
                            var parentNode = stack[stack.length - 2];
                            parentNode.children.push(currentNode);
                        }
                        if (stack.length !== 1) {
                            stack.pop();
                        }
                    });
                    parser.on('end', function () {
                        if (stack.length !== 1) {
                            reject('xml2json error');
                        }
                        resolve(stack[0]);
                    });
                    parser.write(xml).close();
                })];
        });
    });
}
/**
 * 根据标签名获取节点
 * @param node 节点
 * @param tagName 标签名
 * @param deep 是否深度查找
 * @returns
 */
function getNodeByTagName(node, tagName, deep) {
    var e_1, _a;
    if (deep === void 0) { deep = false; }
    var children = node.children || [];
    try {
        for (var children_1 = __values(children), children_1_1 = children_1.next(); !children_1_1.done; children_1_1 = children_1.next()) {
            var child = children_1_1.value;
            if (child.tag === tagName) {
                return child;
            }
            if (deep) {
                var result = getNodeByTagName(child, tagName, deep);
                if (result) {
                    return result;
                }
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (children_1_1 && !children_1_1.done && (_a = children_1.return)) _a.call(children_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return null;
}

export { buildXML, getNodeByTagName, parseXML, xml2json };
