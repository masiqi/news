/**
 * Character classes and associated utilities for the 5th edition of XML 1.0.
 *
 * @author Louis-Dominique Dubeau
 * @license MIT
 * @copyright Louis-Dominique Dubeau
 */
// tslint:disable-next-line:max-line-length
var NAME_START_CHAR = ":A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\uD800\uDC00-\uDB7F\uDFFF";
var NAME_CHAR = "-".concat(NAME_START_CHAR, ".0-9\u00B7\u0300-\u036F\u203F-\u2040");
var NAME_RE = new RegExp("^[".concat(NAME_START_CHAR, "][").concat(NAME_CHAR, "]*$"), 'u');
var TAB = 9;
var NL = 0xa;
var CR = 0xd;
var SPACE = 0x20;
//
// Lists.
//
/** All characters in the ``S`` production. */
var S_LIST = [SPACE, NL, CR, TAB];
/**
 * Determines whether a codepoint matches the ``CHAR`` production.
 *
 * @param c The code point.
 *
 * @returns ``true`` if the codepoint matches ``CHAR``.
 */
function isChar(c) {
    return ((c >= SPACE && c <= 0xd7ff) ||
        c === NL ||
        c === CR ||
        c === TAB ||
        (c >= 0xe000 && c <= 0xfffd) ||
        (c >= 0x10000 && c <= 0x10ffff));
}
/**
 * Determines whether a codepoint matches the ``S`` (space) production.
 *
 * @param c The code point.
 *
 * @returns ``true`` if the codepoint matches ``S``.
 */
function isS(c) {
    return c === SPACE || c === NL || c === CR || c === TAB;
}
/**
 * Determines whether a codepoint matches the ``NAME_START_CHAR`` production.
 *
 * @param c The code point.
 *
 * @returns ``true`` if the codepoint matches ``NAME_START_CHAR``.
 */
function isNameStartChar(c) {
    return ((c >= 0x41 && c <= 0x5a) ||
        (c >= 0x61 && c <= 0x7a) ||
        c === 0x3a ||
        c === 0x5f ||
        c === 0x200c ||
        c === 0x200d ||
        (c >= 0xc0 && c <= 0xd6) ||
        (c >= 0xd8 && c <= 0xf6) ||
        (c >= 0x00f8 && c <= 0x02ff) ||
        (c >= 0x0370 && c <= 0x037d) ||
        (c >= 0x037f && c <= 0x1fff) ||
        (c >= 0x2070 && c <= 0x218f) ||
        (c >= 0x2c00 && c <= 0x2fef) ||
        (c >= 0x3001 && c <= 0xd7ff) ||
        (c >= 0xf900 && c <= 0xfdcf) ||
        (c >= 0xfdf0 && c <= 0xfffd) ||
        (c >= 0x10000 && c <= 0xeffff));
}
/**
 * Determines whether a codepoint matches the ``NAME_CHAR`` production.
 *
 * @param c The code point.
 *
 * @returns ``true`` if the codepoint matches ``NAME_CHAR``.
 */
function isNameChar(c) {
    return (isNameStartChar(c) ||
        (c >= 0x30 && c <= 0x39) ||
        c === 0x2d ||
        c === 0x2e ||
        c === 0xb7 ||
        (c >= 0x0300 && c <= 0x036f) ||
        (c >= 0x203f && c <= 0x2040));
}

export { NAME_CHAR, NAME_RE, NAME_START_CHAR, S_LIST, isChar, isNameChar, isNameStartChar, isS };
