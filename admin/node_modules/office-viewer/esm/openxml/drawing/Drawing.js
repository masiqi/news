import { __values } from 'tslib';
import { parseSize, LengthUsage, convertLength } from '../../word/parse/parseSize.js';
import { getAttrNumber, getAttrBoolean } from '../../OpenXML.js';
import { Pic } from './Pic.js';
import { WPS } from '../word/wps/WPS.js';
import { Diagram } from './diagram/Diagram.js';
import { WPG } from '../word/wps/WPG.js';

/**
 * 目前图片和 textbox 都会依赖这个
 */
/**
 * drawing 在文档中的位置，目前有两种情况，child 和 anchor
 */
var Position;
(function (Position) {
    Position["inline"] = "inline";
    Position["anchor"] = "anchor";
})(Position || (Position = {}));
function parseAnchor(element) {
    var simplePos = getAttrBoolean(element, 'simplePos', false);
    var hidden = getAttrBoolean(element, 'hidden', false);
    var behindDoc = getAttrBoolean(element, 'behindDoc', false);
    return {
        simplePos: simplePos,
        hidden: hidden,
        behindDoc: behindDoc
    };
}
var Drawing = /** @class */ (function () {
    function Drawing() {
        // drawing 的位置配置
        this.position = Position.inline;
    }
    Drawing.fromXML = function (word, element) {
        var e_1, _a;
        var _b;
        var drawing = new Drawing();
        var containerStyle = {};
        drawing.containerStyle = containerStyle;
        var position = element.firstElementChild;
        if (position) {
            if (position.tagName === 'wp:anchor') {
                drawing.position = Position.anchor;
                drawing.anchor = parseAnchor(position);
                var relativeHeight = getAttrNumber(position, 'relativeHeight', 1);
                containerStyle['z-index'] = relativeHeight;
            }
            try {
                for (var _c = __values(position.children), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var child = _d.value;
                    var tagName = child.tagName;
                    switch (tagName) {
                        case 'wp:simplePos':
                            // 只有设置了 simplePos 才会生效
                            // 据说 word 其实不支持这个属性，所以目前实现估计没啥用
                            if ((_b = drawing.anchor) === null || _b === void 0 ? void 0 : _b.simplePos) {
                                containerStyle['position'] = 'absolute';
                                containerStyle['x'] = parseSize(child, 'x', LengthUsage.Emu);
                                containerStyle['y'] = parseSize(child, 'y', LengthUsage.Emu);
                            }
                            break;
                        case 'wp:positionH':
                            var relativeFromH = child.getAttribute('relativeFrom');
                            if (relativeFromH === 'column' ||
                                relativeFromH === 'page' ||
                                relativeFromH === 'margin') {
                                var positionType = child.firstElementChild;
                                if (positionType) {
                                    var positionTypeTagName = positionType.tagName;
                                    containerStyle['position'] = 'absolute';
                                    if (positionTypeTagName === 'wp:posOffset') {
                                        containerStyle['left'] = convertLength(positionType.innerHTML, LengthUsage.Emu);
                                    }
                                    else {
                                        containerStyle['left'] = '0';
                                        console.warn('unsupport positionType', positionTypeTagName);
                                    }
                                }
                            }
                            else {
                                console.warn('unsupport positionH relativeFrom', relativeFromH);
                            }
                            break;
                        case 'wp:positionV':
                            var relativeFromV = child.getAttribute('relativeFrom');
                            if (relativeFromV === 'paragraph' || relativeFromV === 'page') {
                                drawing.relativeFromV = relativeFromV;
                                var positionType = child.firstElementChild;
                                if (positionType) {
                                    var positionTypeTagName = positionType.tagName;
                                    containerStyle['position'] = 'absolute';
                                    if (positionTypeTagName === 'wp:posOffset') {
                                        containerStyle['top'] = convertLength(positionType.innerHTML, LengthUsage.Emu);
                                    }
                                    else {
                                        containerStyle['top'] = '0';
                                        console.warn('unsupport positionType', positionTypeTagName);
                                    }
                                }
                            }
                            else {
                                console.warn('unsupport positionV relativeFrom', relativeFromV);
                            }
                            break;
                        case 'wp:docPr':
                            drawing.id = child.getAttribute('id') || undefined;
                            drawing.name = child.getAttribute('name') || undefined;
                            break;
                        case 'wp:cNvGraphicFramePr':
                            // 和展现无关
                            // http://webapp.docx4java.org/OnlineDemo/ecma376/DrawingML/docPr.html
                            // http://webapp.docx4java.org/OnlineDemo/ecma376/DrawingML/cNvGraphicFramePr_1.html
                            break;
                        case 'a:graphic':
                            var graphicData = child.firstElementChild;
                            var graphicDataChild = graphicData === null || graphicData === void 0 ? void 0 : graphicData.firstElementChild;
                            if (graphicDataChild) {
                                var graphicDataChildTagName = graphicDataChild.tagName;
                                switch (graphicDataChildTagName) {
                                    case 'pic:pic':
                                        drawing.pic = Pic.fromXML(word, graphicDataChild);
                                        break;
                                    case 'wps:wsp':
                                        drawing.wps = WPS.fromXML(word, graphicDataChild);
                                        break;
                                    case 'wpg:wgp':
                                        drawing.wpg = WPG.fromXML(word, graphicDataChild);
                                        break;
                                    case 'dgm:relIds':
                                        // 这个是 diagram 的关系
                                        // http://webapp.docx4java.org/OnlineDemo/ecma376/DrawingML/relIds.html
                                        drawing.diagram = Diagram.fromXML(word, graphicDataChild);
                                        break;
                                    default:
                                        console.warn('unknown graphicData child tag', graphicDataChild);
                                }
                            }
                            break;
                        case 'wp:extent':
                            containerStyle['width'] = parseSize(child, 'cx', LengthUsage.Emu);
                            containerStyle['height'] = parseSize(child, 'cy', LengthUsage.Emu);
                            break;
                        case 'wp:effectExtent':
                            // 目前也不支持特效
                            break;
                        case 'wp:wrapNone':
                            // TODO: 还不知道如何处理
                            // http://webapp.docx4java.org/OnlineDemo/ecma376/DrawingML/wrapNone.html
                            break;
                        case 'wp14:sizeRelH':
                        case 'wp14:sizeRelV':
                            // 还不知道是啥，文档都没
                            break;
                        default:
                            console.warn('drawing unknown tag', tagName);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return drawing;
    };
    return Drawing;
}());

export { Drawing, Position };
