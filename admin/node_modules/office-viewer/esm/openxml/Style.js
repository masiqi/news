import { __values } from 'tslib';
import { parseTcPr } from '../word/parse/parseTcPr.js';
import { getVal } from '../OpenXML.js';
import { Paragraph } from './word/Paragraph.js';
import { Run } from './word/Run.js';
import { parseTablePr } from '../word/parse/parseTablePr.js';
import { parseTrPr } from '../word/parse/parseTrPr.js';

/**
 * 解析共享样式 Style
 */
/**
 * 解析默认样式 docDefaults
 */
function parseDefaultStyle(word, element) {
    var defaultStyle = {};
    if (!element) {
        return defaultStyle;
    }
    var rPrDefault = element.getElementsByTagName('w:rPrDefault').item(0);
    if (rPrDefault) {
        var rPr = rPrDefault.getElementsByTagName('w:rPr').item(0);
        if (rPr) {
            defaultStyle.rPr = Run.parseRunPr(word, rPr);
        }
    }
    var pPrDefault = element.getElementsByTagName('w:pPrDefault').item(0);
    if (pPrDefault) {
        var pPr = pPrDefault.getElementsByTagName('w:pPr').item(0);
        if (pPr) {
            defaultStyle.pPr = Paragraph.parseParagraphPr(word, pPr);
        }
    }
    return defaultStyle;
}
function parseTblStylePr(word, element) {
    var e_1, _a;
    var style = {};
    try {
        for (var _b = __values(element.children), _c = _b.next(); !_c.done; _c = _b.next()) {
            var child = _c.value;
            var tag = child.tagName;
            switch (tag) {
                case 'w:rPr':
                    style.rPr = Run.parseRunPr(word, child);
                    break;
                case 'w:pPr':
                    style.pPr = Paragraph.parseParagraphPr(word, child);
                    break;
                case 'w:tblPr':
                    style.tblPr = parseTablePr(word, child);
                    break;
                case 'w:tcPr':
                    style.tcPr = parseTcPr(word, child);
                    break;
                case 'w:trPr':
                    style.trPr = parseTrPr(word, child);
                    break;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return style;
}
/**
 * 解析单个样式标签
 */
function parseStyle(word, element) {
    var e_2, _a;
    var style = {};
    style.id = element.getAttribute('w:styleId') || '';
    style.type = element.getAttribute('w:type');
    style.tblStylePr = {};
    Object.assign(style, parseTblStylePr(word, element));
    try {
        for (var _b = __values(element.children), _c = _b.next(); !_c.done; _c = _b.next()) {
            var child = _c.value;
            var tag = child.tagName;
            switch (tag) {
                case 'w:name':
                    style.name = getVal(child);
                    break;
                case 'w:basedOn':
                    style.basedOn = getVal(child);
                    break;
                case 'w:rPr':
                case 'w:pPr':
                case 'w:tblPr':
                case 'w:tcPr':
                case 'w:trPr':
                    // 这些在 parseTblStylePr 里实现了
                    break;
                case 'w:tblStylePr':
                    var type = child.getAttribute('w:type');
                    style.tblStylePr[type] = parseTblStylePr(word, child);
                    break;
                case 'w:next':
                case 'w:link':
                case 'w:unhideWhenUsed':
                case 'w:qFormat':
                case 'w:rsid':
                case 'w:uiPriority':
                case 'w:semiHidden':
                case 'w:autoRedefine':
                    // 看起来和展现不相关的配置
                    break;
                default:
                    console.warn('parseStyle Unknown tag', tag, child);
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return style;
}
/**
 * 解析 styles.xml
 */
function parseStyles(word, doc) {
    var e_3, _a;
    var styles = {
        styleMap: {}
    };
    var stylesElement = Array.from(doc.getElementsByTagName('w:style'));
    try {
        for (var stylesElement_1 = __values(stylesElement), stylesElement_1_1 = stylesElement_1.next(); !stylesElement_1_1.done; stylesElement_1_1 = stylesElement_1.next()) {
            var styleElement = stylesElement_1_1.value;
            var style = parseStyle(word, styleElement);
            if (style.id) {
                styles.styleMap[style.id] = style;
            }
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (stylesElement_1_1 && !stylesElement_1_1.done && (_a = stylesElement_1.return)) _a.call(stylesElement_1);
        }
        finally { if (e_3) throw e_3.error; }
    }
    styles.defaultStyle = parseDefaultStyle(word, doc.getElementsByTagName('w:docDefaults').item(0));
    return styles;
}

export { parseStyles };
