import { __values } from 'tslib';
import { getVal } from '../../OpenXML.js';
import { parsePr } from '../../word/parse/parsePr.js';
import { BookmarkStart } from './Bookmark.js';
import { Hyperlink } from './Hyperlink.js';
import { NumberPr } from './numbering/NumberProperties.js';
import { Run } from './Run.js';
import { Tab } from './Tab.js';
import { FldSimple } from './FldSimple.js';
import { OMath } from '../math/OMath.js';
import { mergeSdt } from '../../word/parse/mergeSdt.js';

/**
 * 段落的定义和解析
 */
// | SymbolRun
// | PageBreak
// | ColumnBreak
// | SequentialIdentifier
// | FootnoteReferenceRun
// | InsertedTextRun
// | DeletedTextRun
// | Math
// | SimpleField
// | SimpleMailMergeField
// | Comments
// | Comment
// | CommentRangeStart
// | CommentRangeEnd
// | CommentReference;
function parseAutoSpace(element) {
    var autoSpaceDE = element.getElementsByTagName('w:autoSpaceDE').item(0);
    var autoSpaceDN = element.getElementsByTagName('w:autoSpaceDN').item(0);
    return !!autoSpaceDE || !!autoSpaceDN;
}
var Paragraph = /** @class */ (function () {
    function Paragraph() {
        this.properties = {};
        this.children = [];
        this.fldSimples = [];
    }
    Paragraph.prototype.addChild = function (child) {
        this.children.push(child);
    };
    Paragraph.parseParagraphPr = function (word, element) {
        var e_1, _a;
        var cssStyle = parsePr(word, element);
        var pStyle;
        var pStyleTag = element.getElementsByTagName('w:pStyle').item(0);
        if (pStyleTag) {
            pStyle = getVal(pStyleTag);
        }
        var numPr;
        var numPrTag = element.getElementsByTagName('w:numPr').item(0);
        if (numPrTag) {
            numPr = NumberPr.fromXML(word, numPrTag);
        }
        var tabs = [];
        var tabElements = element.getElementsByTagName('w:tab');
        try {
            for (var tabElements_1 = __values(tabElements), tabElements_1_1 = tabElements_1.next(); !tabElements_1_1.done; tabElements_1_1 = tabElements_1.next()) {
                var tabElement = tabElements_1_1.value;
                tabs.push(Tab.fromXML(word, tabElement));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (tabElements_1_1 && !tabElements_1_1.done && (_a = tabElements_1.return)) _a.call(tabElements_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var autoSpace = parseAutoSpace(element);
        return { cssStyle: cssStyle, pStyle: pStyle, numPr: numPr, tabs: tabs, autoSpace: autoSpace };
    };
    Paragraph.fromXML = function (word, element) {
        var e_2, _a;
        var paragraph = new Paragraph();
        paragraph.fldSimples = [];
        paragraph.paraId = element.getAttribute('w14:paraId') || '';
        try {
            for (var _b = __values(mergeSdt(element)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var child = _c.value;
                var tagName = child.tagName;
                switch (tagName) {
                    case 'w:pPr':
                        paragraph.properties = Paragraph.parseParagraphPr(word, child);
                        break;
                    case 'w:r':
                        paragraph.addChild(Run.fromXML(word, child));
                        break;
                    case 'w:hyperlink':
                        paragraph.addChild(Hyperlink.fromXML(word, child));
                        break;
                    case 'w:bookmarkStart':
                        paragraph.addChild(BookmarkStart.fromXML(word, child));
                    case 'w:bookmarkEnd':
                        // 没啥用所以不解析了
                        break;
                    case 'w:proofErr':
                    case 'w:noProof':
                        // 语法检查
                        break;
                    case 'w:del':
                    case 'w:moveTo':
                    case 'w:moveFrom':
                        // del 看起来主要是用于跟踪历史的，先不支持
                        break;
                    case 'w:fldSimple':
                        // 这个目前还不想支持
                        paragraph.fldSimples.push(FldSimple.fromXML(word, child));
                        break;
                    case 'm:oMathPara':
                    case 'm:oMath':
                        paragraph.addChild(OMath.fromXML(word, child));
                        break;
                    default:
                        console.warn('parse Paragraph: Unknown key', tagName, child);
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return paragraph;
    };
    return Paragraph;
}());

export { Paragraph };
