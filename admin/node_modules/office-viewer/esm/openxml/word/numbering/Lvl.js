import { __values } from 'tslib';
import { Run } from '../Run.js';
import { getValBoolean, getVal, getValNumber } from '../../../OpenXML.js';
import { Paragraph } from '../Paragraph.js';

var Lvl = /** @class */ (function () {
    function Lvl() {
        this.start = 1;
        this.lvlText = '%1.';
        this.isLgl = false;
        this.lvlJc = 'start';
        this.suff = 'space';
    }
    Lvl.fromXML = function (word, element) {
        var e_1, _a;
        var lvl = new Lvl();
        lvl.ilvl = element.getAttribute('w:ilvl');
        try {
            for (var _b = __values(element.children), _c = _b.next(); !_c.done; _c = _b.next()) {
                var child = _c.value;
                var tagName = child.tagName;
                switch (tagName) {
                    case 'w:start':
                        lvl.start = getValNumber(child);
                        break;
                    case 'w:numFmt':
                        lvl.numFmt = getVal(child);
                        break;
                    case 'w:lvlText':
                        lvl.lvlText = getVal(child);
                        break;
                    case 'w:lvlJc':
                        lvl.lvlJc = getVal(child);
                        break;
                    case 'w:legacy':
                        // 老的属性应该不需要支持了
                        // http://webapp.docx4java.org/OnlineDemo/ecma376/WordML/legacy.html
                        break;
                    case 'w:pPr':
                        lvl.pPr = Paragraph.parseParagraphPr(word, child);
                        break;
                    case 'w:rPr':
                        lvl.rPr = Run.parseRunPr(word, child);
                        break;
                    case 'w:isLgl':
                        lvl.isLgl = getValBoolean(child);
                        break;
                    case 'w:pStyle':
                        // 这个在 paragraph 里处理了
                        break;
                    default:
                        console.warn("Lvl: Unknown tag ", tagName, child);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return lvl;
    };
    return Lvl;
}());

export { Lvl };
