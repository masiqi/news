import { __values } from 'tslib';
import { getValBoolean } from '../OpenXML.js';

/**
 * 解析 settings.xml，只支持一小部分
 *
 */
/**
 * 解析颜色映射
 * http://webapp.docx4java.org/OnlineDemo/ecma376/WordML/clrSchemeMapping.html
 */
function parseClrSchemeMapping(element) {
    var e_1, _a;
    var clrSchemeMapping = {};
    try {
        for (var _b = __values(element.attributes), _c = _b.next(); !_c.done; _c = _b.next()) {
            var attribute = _c.value;
            var name_1 = attribute.name.replace('w:', '');
            var value = attribute.value;
            // 文档里也说了这个等于 lt1
            if (value === 'light1') {
                value = 'lt1';
            }
            else if (value === 'light2') {
                value = 'lt2';
            }
            else if (value === 'dark1') {
                value = 'dk1';
            }
            else if (value === 'dark2') {
                value = 'dk2';
            }
            clrSchemeMapping[name_1] = value;
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    if (!clrSchemeMapping.bg1) {
        clrSchemeMapping.bg1 = 'lt1';
    }
    if (!clrSchemeMapping.bg2) {
        clrSchemeMapping.bg2 = 'lt2';
    }
    if (!clrSchemeMapping.tx1) {
        clrSchemeMapping.tx1 = 'dk1';
    }
    return clrSchemeMapping;
}
var Settings = /** @class */ (function () {
    function Settings() {
        this.clrSchemeMapping = {};
        this.autoHyphenation = false;
    }
    Settings.parse = function (word, doc) {
        var e_2, _a;
        var settings = new Settings();
        var rootElement = doc;
        if (doc.firstElementChild &&
            doc.firstElementChild.tagName === 'w:settings') {
            rootElement = doc.getElementsByTagName('w:settings').item(0);
        }
        try {
            for (var _b = __values(Array.from(rootElement.children)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var child = _c.value;
                var tag = child.tagName;
                switch (tag) {
                    case 'w:clrSchemeMapping':
                        settings.clrSchemeMapping = parseClrSchemeMapping(child);
                        break;
                    case 'w:autoHyphenation':
                        settings.autoHyphenation = getValBoolean(child, false);
                        break;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return settings;
    };
    return Settings;
}());

export { Settings };
