import s from "react";
import { generateQRCode as A, toFixedNumber as B, generatePath as F } from "../utils/helper.js";
function W(b) {
  const { config: a, styleConfig: f, logoConfig: d, value: p } = b, {
    size: r = 200,
    margin: o = 0,
    eyeType: x,
    eyeBorderSize: M,
    pointType: C,
    pointSize: R,
    pointSizeRandom: y
  } = f || {}, e = s.useMemo(
    () => A(p, a),
    [p, a]
  ), g = s.useMemo(
    () => B((r - o * 2) / e.length),
    [e, r, o]
  ), v = s.useMemo(() => {
    let t = [];
    for (let n = 0; n < e.length; n++) {
      t.push([]);
      for (let i = 0; i < e.length; i++)
        y ? t[n].push(Math.random() < 0.5 ? 1 : 0.8) : t[n].push(1);
    }
    return t;
  }, [e, y]), w = s.useMemo(
    () => F({
      modules: e,
      margin: o,
      size: r,
      dotSize: g,
      eyeType: x,
      eyeBorderSize: M,
      pointType: C,
      pointSize: R,
      customSize: v
    }),
    [e, g, f]
  );
  return { logo: s.useMemo(() => {
    if (!d)
      return;
    let t = r - o * 2, {
      src: n,
      width: i = t / 5,
      height: m = t / 5,
      x: c = t / 2 - i / 2 + o,
      y: l = t / 2 - m / 2 + o
    } = d || {};
    const I = e.length, u = Array.from({ length: I }, (h, j) => j * g + o), z = u[u.findIndex((h) => h > c) - 2] - 0.5 || c, S = u[u.findIndex((h) => h > l) - 2] - 0.5 || l, Q = i + (c - z) * 2, T = m + (l - S) * 2;
    return {
      src: n,
      width: i,
      height: m,
      x: c,
      y: l,
      bg: {
        x: z,
        y: S,
        width: Q,
        height: T
      }
    };
  }, [e, g, o, d]), path: w };
}
export {
  W as default
};
