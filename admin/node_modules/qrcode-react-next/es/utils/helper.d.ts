import { ErrorCorrectionLevel, EYE_SIZE, EYE_TYPES, POINT_SIZE, POINT_TYPES } from '../types';
/**
 * 根据提供的值和选项生成二维码。
 *
 * @param value - 要编码到二维码中的字符串值。
 * @param options - 生成二维码的选项。
 * @param options.level - 纠错级别（'L'，'M'，'Q'，'H'）。
 * @param options.minVersion - 二维码的最小版本。
 * @param options.maxVersion - 二维码的最大版本。
 * @param options.mask - 要使用的掩码模式。
 * @param options.boostLevel - 是否提升纠错级别。
 * @returns 表示二维码模块的二维布尔数组。
 */
export declare function generateQRCode(value: string, options?: {
    level?: ErrorCorrectionLevel;
    minVersion?: number;
    maxVersion?: number;
    mask?: number;
    boostLevel?: boolean;
}): boolean[][];
/**
 * 获取码眼的大小和位置。
 *
 * @param size - 二维码的大小。
 * @param margin - 码眼的边距。
 * @returns 码眼的大小和位置。
 */
export declare function getEyeSizeAndPositions(size: number, dotSize: number, margin: number): {
    eyeSize: number;
    positions: {
        x: number;
        y: number;
    }[];
};
/**
 * 判断是否是码眼
 * @param modules
 * @param x
 * @param y
 */
export declare function isQrCodeEye(modules: boolean[][], x: number, y: number): boolean;
/**
 * 根据提供的二维码矩阵生成路径。
 * @param modules
 * @param size
 * @returns {points, eyeBorder, eyeInner}
 */
export declare function generatePath(options: {
    modules: boolean[][];
    size: number;
    dotSize: number;
    margin?: number;
    eyeType?: EYE_TYPES;
    eyeBorderSize?: EYE_SIZE;
    pointType?: POINT_TYPES;
    customSize: number[][];
    pointSize?: POINT_SIZE;
}): {
    points: string;
    eyeBorder: string;
    eyeInner: string;
};
export declare function toFixedNumber(num: number, decimalPlaces?: number): number;
