import { toFixedNumber as $ } from "./helper.js";
function m(e, n, t) {
  return t = $(t), `M ${$(e - t)}, ${$(n)} a ${t},${t} 0 1,0 ${2 * t},0 a ${t},${t} 0 1,0 ${-2 * t},0`;
}
function q(e, n, t) {
  e = $(e), n = $(n);
  const c = $(e + t), o = $(n + t);
  return `M ${e}, ${n} L ${c}, ${n} L ${c}, ${o} L ${e}, ${o} Z `;
}
function p(e, n, t, c) {
  e = $(e), n = $(n);
  const o = $(e + c), r = $(n + c), s = $(e + t - c), S = $(n + t - c), R = $(e + t), u = $(n + t);
  return `M${o} ${n}L${R} ${n}L${R} ${u}L${e} ${u}L${e} ${n}L${o} ${n}L${o} ${S}L${s} ${S}L${s} ${r}L${o} ${r}Z `;
}
function g(e, n, t, c, o) {
  e = $(e), n = $(n), o = $(o);
  const r = $(e + o), s = $(e + t - o), S = $(n + o), R = $(n + t - o), u = $(e + c), B = $(n + c), i = $(e + t - c), a = $(n + t - c), A = $(e + t), z = $(n + t), L = $(o - c / 2), I = $(u + L), f = $(B + L), M = $(i - L), P = $(a - L), d = $(r + L);
  return `M${r} ${n}L${s} ${n}A${o} ${o} 0 0 1 ${A} ${S}L${A} ${R}A${o} ${o} 0 0 1 ${s} ${z}L${r} ${z}A${o} ${o} 0 0 1 ${e} ${R}L${e} ${S}A${o} ${o} 0 0 1 ${r} ${n}L${r} ${n}L${d} ${a}L${M} ${a}A${L} ${L} 0 0 0 ${i} ${P}L${i} ${f}A${L} ${L} 0 0 0 ${M} ${B}L${I} ${B}A${L} ${L} 0 0 0 ${u} ${f}L${u} ${P}A${L} ${L} 0 0 0 ${I} ${a}L${d} ${a}Z`;
}
function l(e, n, t, c) {
  const o = $(t), r = $(t - c);
  n = $(n), e = $(e);
  const s = $(n - o), S = $(n - r), R = $(n + o), u = $(n + r);
  return `M${e},${s} A${o},${o} 0 1,1 ${e},${R} A${o},${o} 0 1,1 ${e},${s} M${e},${S} A${r},${r} 0 1,0 ${e},${u} A${r},${r} 0 1,0 ${e},${S} Z`;
}
export {
  m as createCirclePath,
  l as createRingPath,
  g as createRoundedSquareBorderPath,
  p as createSquareBorderPath,
  q as createSquarePath
};
