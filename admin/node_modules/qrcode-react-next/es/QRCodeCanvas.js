import d, { useEffect as w } from "react";
import y from "./hooks/useQrCode.js";
function u({
  ctx: i,
  bgColor: e = "#fff",
  logo: r
}) {
  const { src: n, width: t, height: o, x: s, y: h, bg: a } = r || {};
  if (!n)
    return;
  const l = new Image();
  l.src = n, l.onload = () => {
    i.fillStyle = e, i.fillRect(a.x, a.y, a.width, a.height);
    const c = l.width / l.height;
    let f = t, g = o;
    c > 1 ? g = t / c : f = o * c, i.drawImage(
      l,
      s + (t - f) / 2,
      h + (o - g) / 2,
      f,
      g
    );
  };
}
function C(i) {
  const { ctx: e, path: r, styleConfig: n } = i, {
    color: t = "#000",
    bgColor: o = "#fff",
    eyeBorderColor: s,
    eyeInnerColor: h
  } = n || {};
  e.clearRect(0, 0, e.canvas.width, e.canvas.height), e.fillStyle = o, e.fillRect(0, 0, e.canvas.width, e.canvas.height), e.fillStyle = s || t, e.fill(new Path2D(r.eyeBorder)), e.fillStyle = h || t, e.fill(new Path2D(r.eyeInner)), e.fillStyle = t, e.fill(new Path2D(r.points));
}
function R(i) {
  const { value: e, config: r, styleConfig: n, logoConfig: t, className: o } = i, { size: s = 200, bgColor: h } = n || {}, { path: a, logo: l } = y({ config: r, styleConfig: n, logoConfig: t, value: e }), c = d.useRef(null);
  return w(() => {
    if (a && c.current) {
      const f = c.current.getContext("2d");
      C({ ctx: f, path: a, styleConfig: n }), l && u({ ctx: f, bgColor: h, logo: l });
    }
  }, [a, t, n]), /* @__PURE__ */ d.createElement(
    "canvas",
    {
      width: s,
      height: s,
      ref: c,
      className: "qr-container qr-canvas" + (o ? ` ${o}` : "")
    }
  );
}
export {
  R as default
};
