name: Deploy to Cloudflare Workers

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      deploy_backend:
        description: 'Deploy backend API'
        type: boolean
        default: true
      deploy_frontend:
        description: 'Deploy frontend'
        type: boolean
        default: true
      deploy_admin:
        description: 'Deploy admin panel'
        type: boolean
        default: true

env:
  NODE_VERSION: '20'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run backend tests
      run: |
        cd backend
        npm test
      continue-on-error: true
        
    - name: Run frontend linting
      run: |
        cd frontend
        npm run lint
      continue-on-error: true

  deploy-backend:
    name: Deploy Backend API
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_backend == 'true')
    
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.deploy.outputs.worker-url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd backend
        npm ci
        
    - name: Install Wrangler
      run: |
        npm install -g wrangler
        
    - name: Authenticate with Cloudflare
      run: |
        npx wrangler auth --api-key "${{ secrets.CLOUDFLARE_API_KEY }}"
        npx wrangler config set api-key "${{ secrets.CLOUDFLARE_API_KEY }}"
        
    - name: Generate production config
      run: |
        cd backend
        cat > wrangler-production.jsonc << EOF
        {
          "name": "moxiang-distill",
          "main": "src/index.ts",
          "compatibility_date": "2024-09-23",
          "compatibility_flags": ["nodejs_compat"],
          "r2_buckets": [
            {
              "binding": "R2_BUCKET",
              "bucket_name": "news"
            }
          ],
          "vars": {
            "JWT_SECRET": "${{ secrets.JWT_SECRET }}",
            "ADMIN_USERNAME": "${{ secrets.ADMIN_USERNAME }}",
            "ADMIN_PASSWORD": "${{ secrets.ADMIN_PASSWORD }}",
            "DEFAULT_LLM_PROVIDER": "${{ vars.DEFAULT_LLM_PROVIDER || 'auto' }}",
            "ENABLE_LLM_FALLBACK": "${{ vars.ENABLE_LLM_FALLBACK || 'true' }}",
            "NODE_ENV": "production"
          },
          "ai": {
            "binding": "AI"
          },
          "d1_databases": [
            {
              "binding": "DB",
              "database_name": "news-db",
              "database_id": "${{ secrets.D1_DATABASE_ID }}"
            }
          ],
          "queues": {
            "producers": [
              {
                "binding": "RSS_FETCHER_QUEUE",
                "queue": "RSS_FETCHER_QUEUE"
              },
              {
                "binding": "AI_PROCESSOR_QUEUE",
                "queue": "AI_PROCESSOR_QUEUE"
              }
            ],
            "consumers": [
              {
                "queue": "RSS_FETCHER_QUEUE"
              },
              {
                "queue": "AI_PROCESSOR_QUEUE"
              }
            ]
          }
        }
        EOF
        
    - name: Set AI API secrets
      run: |
        cd backend
        echo "${{ secrets.ZHIPUAI_API_KEY }}" | npx wrangler secret put ZHIPUAI_API_KEY
        echo "${{ secrets.OPENROUTER_API_KEY }}" | npx wrangler secret put OPENROUTER_API_KEY
      continue-on-error: true
        
    - name: Deploy Worker
      id: deploy
      run: |
        cd backend
        npx wrangler deploy --env production --config wrangler-production.jsonc
        
    - name: Get Worker URL
      id: worker-url
      run: |
        cd backend
        WORKER_URL=$(npx wrangler whoami | grep -o 'https://[^[:space:]]*\.workers\.dev' || echo "https://moxiang-distill.workers.dev")
        echo "worker-url=$WORKER_URL" >> $GITHUB_OUTPUT
        
    - name: Run health check
      run: |
        sleep 10
        if curl -f "${{ steps.worker-url.outputs.worker-url }}/api/status"; then
          echo "✅ Backend health check passed"
        else
          echo "❌ Backend health check failed"
          exit 1
        fi

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_frontend == 'true')
    
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.deploy.outputs.pages-url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: Install Wrangler
      run: |
        npm install -g wrangler
        
    - name: Authenticate with Cloudflare
      run: |
        npx wrangler auth --api-key "${{ secrets.CLOUDFLARE_API_KEY }}"
        npx wrangler config set api-key "${{ secrets.CLOUDFLARE_API_KEY }}"
        
    - name: Deploy to Pages
      id: deploy
      run: |
        cd frontend
        npx wrangler pages deploy out --project-name="${{ vars.FRONTEND_PAGES_PROJECT || 'moxiang-distill-frontend' }}"
        
    - name: Get Pages URL
      id: pages-url
      run: |
        echo "pages-url=https://${{ vars.FRONTEND_DOMAIN || 'moxiang-distill-frontend.pages.dev' }}" >> $GITHUB_OUTPUT

  deploy-admin:
    name: Deploy Admin Panel
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_admin == 'true')
    
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.deploy.outputs.admin-url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install Wrangler
      run: |
        npm install -g wrangler
        
    - name: Authenticate with Cloudflare
      run: |
        npx wrangler auth --api-key "${{ secrets.CLOUDFLARE_API_KEY }}"
        npx wrangler config set api-key "${{ secrets.CLOUDFLARE_API_KEY }}"
        
    - name: Deploy admin to Pages
      id: deploy
      run: |
        npx wrangler pages deploy admin --project-name="${{ vars.ADMIN_PAGES_PROJECT || 'moxiang-distill-admin' }}"
        
    - name: Get Admin URL
      id: admin-url
      run: |
        echo "admin-url=https://${{ vars.ADMIN_DOMAIN || 'moxiang-distill-admin.pages.dev' }}" >> $GITHUB_OUTPUT

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend, deploy-admin]
    if: always() && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')
    
    steps:
    - name: Send success notification
      if: needs.deploy-backend.result == 'success' && needs.deploy-frontend.result == 'success' && needs.deploy-admin.result == 'success'
      run: |
        echo "🎉 部署成功！"
        echo "🔗 后端 API: ${{ needs.deploy-backend.steps.worker-url.outputs.worker-url }}"
        echo "🔗 前端应用: ${{ needs.deploy-frontend.steps.pages-url.outputs.pages-url }}"
        echo "🔗 管理后台: ${{ needs.deploy-admin.steps.admin-url.outputs.admin-url }}"
        
    - name: Send failure notification
      if: needs.deploy-backend.result == 'failure' || needs.deploy-frontend.result == 'failure' || needs.deploy-admin.result == 'failure'
      run: |
        echo "❌ 部署失败！"
        echo "🔗 请检查 GitHub Actions 日志获取详细信息"